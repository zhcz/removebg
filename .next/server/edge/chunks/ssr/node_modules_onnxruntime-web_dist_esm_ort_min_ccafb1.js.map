{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/common/lib/backend-impl.ts","/turbopack/[project]/node_modules/common/lib/backend.ts","/turbopack/[project]/node_modules/common/lib/version.ts","/turbopack/[project]/node_modules/common/lib/env-impl.ts","/turbopack/[project]/node_modules/common/lib/env.ts","/turbopack/[project]/node_modules/common/lib/tensor-conversion-impl.ts","/turbopack/[project]/node_modules/common/lib/tensor-factory-impl.ts","/turbopack/[project]/node_modules/common/lib/tensor-impl-type-mapping.ts","/turbopack/[project]/node_modules/common/lib/tensor-utils-impl.ts","/turbopack/[project]/node_modules/common/lib/tensor-impl.ts","/turbopack/[project]/node_modules/common/lib/tensor.ts","/turbopack/[project]/node_modules/common/lib/trace.ts","/turbopack/[project]/node_modules/common/lib/inference-session-impl.ts","/turbopack/[project]/node_modules/common/lib/inference-session.ts","/turbopack/[project]/node_modules/common/lib/tensor-conversion.ts","/turbopack/[project]/node_modules/common/lib/tensor-factory.ts","/turbopack/[project]/node_modules/common/lib/onnx-model.ts","/turbopack/[project]/node_modules/common/lib/onnx-value.ts","/turbopack/[project]/node_modules/common/lib/training-session-impl.ts","/turbopack/[project]/node_modules/common/lib/training-session.ts","/turbopack/[project]/node_modules/common/lib/index.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/instrument.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/opset.ts","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/guid-typescript/dist/guid.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/long/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/flatbuffers/js/flatbuffers.mjs","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/@protobufjs/aspromise/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/@protobufjs/base64/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/@protobufjs/eventemitter/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/@protobufjs/float/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/@protobufjs/inquire/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/@protobufjs/utf8/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/@protobufjs/pool/index.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/util/longbits.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/util/minimal.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/writer.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/writer_buffer.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/reader.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/reader_buffer.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/rpc/service.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/rpc.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/roots.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/src/index-minimal.js","/turbopack/[project]/node_modules/onnxruntime-web/node_modules/protobufjs/minimal.js","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/ort-schema/protobuf/onnx.js","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/util.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/tensor.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-source.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/types.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/utils.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/packing-utils.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pack.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape-packed.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/uint8-encode.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unpack.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-data-encoder.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/inference-handler.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/attribute-with-cache-key.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/batch-normalization.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-definitions.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/binary-op.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/cast.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat-packed.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/concat.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unary-op.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/fuse-utils.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-grouped.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col-pack.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/matmul-pack.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-pack.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/im2col.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/dot-product.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/conv-transpose.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/transpose.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/depth-to-space.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/flatten.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/operators.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gather.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/gemm.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/image-scaler.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/instance-normalization.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/lrn.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pad.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/pool.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reduce.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/reshape.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/upsample.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/resize-packed.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/shape.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/slice.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/softmax.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/split.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/squeeze.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/sum.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/tile.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/ops/unsqueeze.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/op-resolve-rules.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-function-inliner.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-layout-strategy.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-vec-lib.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-registered-libs.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/glsl-preprocessor.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/program-manager.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/texture-manager.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/session-handler.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/webgl/webgl-context-factory.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backends/backend-webgl.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/backend.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/execution-plan.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/attribute.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/graph.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/model.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/session.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/onnxjs/session-handler-inference.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/backend-onnxjs.ts","/turbopack/[project]/node_modules/onnxruntime-web/dist/esm/nodejs-ignore:fs","/turbopack/[project]/node_modules/onnxruntime-web/dist/esm/nodejs-ignore:path","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/binding/ort-wasm.js","/turbopack/[project]/node_modules/onnxruntime-web/dist/esm/nodejs-ignore:worker_threads","/turbopack/[project]/node_modules/onnxruntime-web/dist/esm/nodejs-ignore:perf_hooks","/turbopack/[project]/node_modules/onnxruntime-web/dist/esm/nodejs-ignore:os","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/binding/ort-wasm-threaded.js","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/binding/ort-wasm-threaded.worker.js","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/wasm-factory.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/wasm-utils.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/run-options.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/session-options.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/wasm-common.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/wasm-utils-load-file.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/wasm-core-impl.ts","/turbopack/[project]/node_modules/onnxruntime-web/dist/esm/proxy-worker:./proxy-worker/main","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/proxy-wrapper.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/wasm/session-handler-inference.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/backend-wasm.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/backend-wasm-inference.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/index.ts","/turbopack/[project]/node_modules/onnxruntime-web/lib/version.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend} from './backend.js';\nimport {InferenceSession} from './inference-session.js';\n\ninterface BackendInfo {\n  backend: Backend;\n  priority: number;\n\n  initPromise?: Promise<void>;\n  initialized?: boolean;\n  aborted?: boolean;\n  error?: string;\n}\n\nconst backends: Map<string, BackendInfo> = new Map();\nconst backendsSortedByPriority: string[] = [];\n\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nexport const registerBackend = (name: string, backend: Backend, priority: number): void => {\n  if (backend && typeof backend.init === 'function' && typeof backend.createInferenceSessionHandler === 'function') {\n    const currentBackend = backends.get(name);\n    if (currentBackend === undefined) {\n      backends.set(name, {backend, priority});\n    } else if (currentBackend.priority > priority) {\n      // same name is already registered with a higher priority. skip registeration.\n      return;\n    } else if (currentBackend.priority === priority) {\n      if (currentBackend.backend !== backend) {\n        throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n      }\n    }\n\n    if (priority >= 0) {\n      const i = backendsSortedByPriority.indexOf(name);\n      if (i !== -1) {\n        backendsSortedByPriority.splice(i, 1);\n      }\n\n      for (let i = 0; i < backendsSortedByPriority.length; i++) {\n        if (backends.get(backendsSortedByPriority[i])!.priority <= priority) {\n          backendsSortedByPriority.splice(i, 0, name);\n          return;\n        }\n      }\n      backendsSortedByPriority.push(name);\n    }\n    return;\n  }\n\n  throw new TypeError('not a valid backend');\n};\n\n/**\n * Try to resolve and initialize a backend.\n *\n * @param backendName - the name of the backend.\n * @returns the backend instance if resolved and initialized successfully, or an error message if failed.\n */\nconst tryResolveAndInitializeBackend = async(backendName: string): Promise<Backend|string> => {\n  const backendInfo = backends.get(backendName);\n  if (!backendInfo) {\n    return 'backend not found.';\n  }\n\n  if (backendInfo.initialized) {\n    return backendInfo.backend;\n  } else if (backendInfo.aborted) {\n    return backendInfo.error!;\n  } else {\n    const isInitializing = !!backendInfo.initPromise;\n    try {\n      if (!isInitializing) {\n        backendInfo.initPromise = backendInfo.backend.init(backendName);\n      }\n      await backendInfo.initPromise;\n      backendInfo.initialized = true;\n      return backendInfo.backend;\n    } catch (e) {\n      if (!isInitializing) {\n        backendInfo.error = `${e}`;\n        backendInfo.aborted = true;\n      }\n      return backendInfo.error!;\n    } finally {\n      delete backendInfo.initPromise;\n    }\n  }\n};\n\n/**\n * Resolve execution providers from the specific session options.\n *\n * @param options - the session options object.\n * @returns a promise that resolves to a tuple of an initialized backend instance and a session options object with\n * filtered EP list.\n *\n * @ignore\n */\nexport const resolveBackendAndExecutionProviders = async(options: InferenceSession.SessionOptions):\n    Promise<[backend: Backend, options: InferenceSession.SessionOptions]> => {\n      // extract backend hints from session options\n      const eps = options.executionProviders || [];\n      const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n      const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n\n      // try to resolve and initialize all requested backends\n      let backend: Backend|undefined;\n      const errors = [];\n      const availableBackendNames = new Set<string>();\n      for (const backendName of backendNames) {\n        const resolveResult = await tryResolveAndInitializeBackend(backendName);\n        if (typeof resolveResult === 'string') {\n          errors.push({name: backendName, err: resolveResult});\n        } else {\n          if (!backend) {\n            backend = resolveResult;\n          }\n          if (backend === resolveResult) {\n            availableBackendNames.add(backendName);\n          }\n        }\n      }\n\n      // if no backend is available, throw error.\n      if (!backend) {\n        throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n      }\n\n      // for each explicitly requested backend, if it's not available, output warning message.\n      for (const {name, err} of errors) {\n        if (backendHints.includes(name)) {\n          // eslint-disable-next-line no-console\n          console.warn(`removing requested execution provider \"${\n              name}\" from session options because it is not available: ${err}`);\n        }\n      }\n\n      const filteredEps = eps.filter(i => availableBackendNames.has(typeof i === 'string' ? i : i.name));\n\n      return [\n        backend, new Proxy(options, {\n          get: (target, prop) => {\n            if (prop === 'executionProviders') {\n              return filteredEps;\n            }\n            return Reflect.get(target, prop);\n          }\n        })\n      ];\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {TrainingSession} from './training-session.js';\n\n/**\n * @ignore\n */\nexport declare namespace SessionHandler {\n  type FeedsType = {[name: string]: OnnxValue};\n  type FetchesType = {[name: string]: OnnxValue | null};\n  type ReturnType = {[name: string]: OnnxValue};\n}\n\n/**\n * Represents shared SessionHandler functionality\n *\n * @ignore\n */\ninterface SessionHandler {\n  dispose(): Promise<void>;\n\n  readonly inputNames: readonly string[];\n  readonly outputNames: readonly string[];\n}\n\n/**\n * Represent a handler instance of an inference session.\n *\n * @ignore\n */\nexport interface InferenceSessionHandler extends SessionHandler {\n  startProfiling(): void;\n  endProfiling(): void;\n\n  run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\n}\n\n/**\n * Represent a handler instance of a training inference session.\n *\n * @ignore\n */\nexport interface TrainingSessionHandler extends SessionHandler {\n  readonly evalInputNames: readonly string[];\n  readonly evalOutputNames: readonly string[];\n\n  lazyResetGrad(): Promise<void>;\n  runTrainStep(\n      feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\n  runOptimizerStep(options: InferenceSession.RunOptions): Promise<void>;\n  runEvalStep(\n      feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType,\n      options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType>;\n\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n}\n\n/**\n * Represent a backend that provides implementation of model inferencing.\n *\n * @ignore\n */\nexport interface Backend {\n  /**\n   * Initialize the backend asynchronously. Should throw when failed.\n   */\n  init(backendName: string): Promise<void>;\n\n  createInferenceSessionHandler(uriOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n\n  createTrainingSessionHandler?\n      (checkpointStateUriOrBuffer: TrainingSession.UriOrBuffer, trainModelUriOrBuffer: TrainingSession.UriOrBuffer,\n       evalModelUriOrBuffer: TrainingSession.UriOrBuffer, optimizerModelUriOrBuffer: TrainingSession.UriOrBuffer,\n       options: InferenceSession.SessionOptions): Promise<TrainingSessionHandler>;\n}\n\nexport {registerBackend} from './backend-impl.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.17.3';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from './env.js';\nimport {version} from './version.js';\n\ntype LogLevelType = Env['logLevel'];\n\nlet logLevelValue: Required<LogLevelType> = 'warning';\n\nexport const env: Env = {\n  wasm: {} as Env.WebAssemblyFlags,\n  webgl: {} as Env.WebGLFlags,\n  webgpu: {} as Env.WebGpuFlags,\n  versions: {common: version},\n\n  set logLevel(value: LogLevelType) {\n    if (value === undefined) {\n      return;\n    }\n    if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n      throw new Error(`Unsupported logging level: ${value}`);\n    }\n    logLevelValue = value;\n  },\n  get logLevel(): Required<LogLevelType> {\n    return logLevelValue;\n  },\n};\n\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', {enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env as envImpl} from './env-impl.js';\n\nexport declare namespace Env {\n  export type WasmPrefixOrFilePaths = string|{\n    /* eslint-disable @typescript-eslint/naming-convention */\n    'ort-wasm.wasm'?: string;\n    'ort-wasm-threaded.wasm'?: string;\n    'ort-wasm-simd.wasm'?: string;\n    'ort-training-wasm-simd.wasm'?: string;\n    'ort-wasm-simd-threaded.wasm'?: string;\n    /* eslint-enable @typescript-eslint/naming-convention */\n  };\n  export interface WebAssemblyFlags {\n    /**\n     * set or get number of thread(s). If omitted or set to 0, number of thread(s) will be determined by system. If set\n     * to 1, no worker thread will be spawned.\n     *\n     * This setting is available only when WebAssembly multithread feature is available in current context.\n     *\n     * @defaultValue `0`\n     */\n    numThreads?: number;\n\n    /**\n     * set or get a boolean value indicating whether to enable SIMD. If set to false, SIMD will be forcely disabled.\n     *\n     * This setting is available only when WebAssembly SIMD feature is available in current context.\n     *\n     * @defaultValue `true`\n     */\n    simd?: boolean;\n\n    /**\n     * set or get a boolean value indicating whether to enable trace.\n     *\n     * @deprecated Use `env.trace` instead. If `env.trace` is set, this property will be ignored.\n     * @defaultValue `false`\n     */\n    trace?: boolean;\n\n    /**\n     * Set or get a number specifying the timeout for initialization of WebAssembly backend, in milliseconds. A zero\n     * value indicates no timeout is set.\n     *\n     * @defaultValue `0`\n     */\n    initTimeout?: number;\n\n    /**\n     * Set a custom URL prefix to the .wasm files or a set of overrides for each .wasm file. The override path should be\n     * an absolute path.\n     */\n    wasmPaths?: WasmPrefixOrFilePaths;\n\n    /**\n     * Set or get a boolean value indicating whether to proxy the execution of main thread to a worker thread.\n     *\n     * @defaultValue `false`\n     */\n    proxy?: boolean;\n  }\n\n  export interface WebGLFlags {\n    /**\n     * Set or get the WebGL Context ID (webgl or webgl2).\n     *\n     * @defaultValue `'webgl2'`\n     */\n    contextId?: 'webgl'|'webgl2';\n    /**\n     * Get the WebGL rendering context.\n     */\n    readonly context: WebGLRenderingContext;\n    /**\n     * Set or get the maximum batch size for matmul. 0 means to disable batching.\n     *\n     * @deprecated\n     */\n    matmulMaxBatchSize?: number;\n    /**\n     * Set or get the texture cache mode.\n     *\n     * @defaultValue `'full'`\n     */\n    textureCacheMode?: 'initializerOnly'|'full';\n    /**\n     * Set or get the packed texture mode\n     *\n     * @defaultValue `false`\n     */\n    pack?: boolean;\n    /**\n     * Set or get whether enable async download.\n     *\n     * @defaultValue `false`\n     */\n    async?: boolean;\n  }\n\n  export interface WebGpuProfilingDataV1TensorMetadata {\n    dims: readonly number[];\n    dataType: string;\n  }\n  export interface WebGpuProfilingDataV1 {\n    version: 1;\n    inputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    outputsMetadata: readonly WebGpuProfilingDataV1TensorMetadata[];\n    kernelId: number;\n    kernelType: string;\n    kernelName: string;\n    programName: string;\n    startTime: number;\n    endTime: number;\n  }\n\n  export type WebGpuProfilingData = WebGpuProfilingDataV1;\n\n  export interface WebGpuFlags {\n    /**\n     * Set or get the profiling mode.\n     *\n     * @deprecated Use `env.webgpu.profiling.mode` instead. If `env.webgpu.profiling.mode` is set, this property will be\n     * ignored.\n     */\n    profilingMode?: 'off'|'default';\n    /**\n     * Set or get the profiling configuration.\n     */\n    profiling?: {\n      /**\n       * Set or get the profiling mode.\n       *\n       * @defaultValue `'off'`\n       */\n      mode?: 'off'|'default';\n\n      /**\n       * Set or get a callback function when a profiling data is received. If not set, the profiling data will be\n       * printed to console.\n       */\n      ondata?: (data: WebGpuProfilingData) => void;\n    };\n    /**\n     * Set or get the power preference.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    powerPreference?: 'low-power'|'high-performance';\n    /**\n     * Set or get the force fallback adapter flag.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as options for `navigator.gpu.requestAdapter()`.\n     *\n     * See {@link https://gpuweb.github.io/gpuweb/#dictdef-gpurequestadapteroptions} for more details.\n     *\n     * @defaultValue `undefined`\n     */\n    forceFallbackAdapter?: boolean;\n    /**\n     * Set or get the adapter for WebGPU.\n     *\n     * Setting this property only has effect before the first WebGPU inference session is created. The value will be\n     * used as the GPU adapter for the underlying WebGPU backend to create GPU device.\n     *\n     * If this property is not set, it will be available to get after the first WebGPU inference session is created. The\n     * value will be the GPU adapter that created by the underlying WebGPU backend.\n     *\n     * When use with TypeScript, the type of this property is `GPUAdapter` defined in \"@webgpu/types\".\n     * Use `const adapter = env.webgpu.adapter as GPUAdapter;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType}\n     */\n    adapter: unknown;\n    /**\n     * Get the device for WebGPU.\n     *\n     * This property is only available after the first WebGPU inference session is created.\n     *\n     * When use with TypeScript, the type of this property is `GPUDevice` defined in \"@webgpu/types\".\n     * Use `const device = env.webgpu.device as GPUDevice;` in TypeScript to access this property with correct type.\n     *\n     * see comments on {@link Tensor.GpuBufferType} for more details about why not use types defined in \"@webgpu/types\".\n     */\n    readonly device: unknown;\n    /**\n     * Set or get whether validate input content.\n     *\n     * @defaultValue `false`\n     */\n    validateInputContent?: boolean;\n  }\n}\n\nexport interface Env {\n  /**\n   * set the severity level for logging.\n   *\n   * @defaultValue `'warning'`\n   */\n  logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal';\n\n  /**\n   * Indicate whether run in debug mode.\n   *\n   * @defaultValue `false`\n   */\n  debug?: boolean;\n\n  /**\n   * set or get a boolean value indicating whether to enable trace.\n   *\n   * @defaultValue `false`\n   */\n  trace?: boolean;\n\n  /**\n   * Get version of the current package.\n   */\n  readonly versions: {\n    readonly common: string;\n    readonly web?: string;\n    readonly node?: string;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    readonly 'react-native'?: string;\n  };\n\n  /**\n   * Represent a set of flags for WebAssembly\n   */\n  readonly wasm: Env.WebAssemblyFlags;\n\n  /**\n   * Represent a set of flags for WebGL\n   */\n  readonly webgl: Env.WebGLFlags;\n\n  /**\n   * Represent a set of flags for WebGPU\n   */\n  readonly webgpu: Env.WebGpuFlags;\n\n  [name: string]: unknown;\n}\n\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env: Env = envImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorToDataUrlOptions, TensorToImageDataOptions} from './tensor-conversion.js';\nimport {Tensor} from './tensor.js';\n\n/**\n * implementation of Tensor.toDataURL()\n */\nexport const tensorToDataURL = (tensor: Tensor, options?: TensorToDataUrlOptions): string => {\n  const canvas = typeof document !== 'undefined' ? document.createElement('canvas') : (new OffscreenCanvas(1, 1));\n  canvas.width = tensor.dims[3];\n  canvas.height = tensor.dims[2];\n  const pixels2DContext =\n      canvas.getContext('2d') as (CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D | null);\n\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[3];\n    } else {  // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n    }\n\n    const inputformat = options?.format !== undefined ? options.format : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    // Default pointer assignments\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        const R = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0];  // R value\n        const G = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1];  // G value\n        const B = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2];  // B value\n        const A = aTensorPointer === -1 ?\n            255 :\n            ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3];  // A value\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n        pixels2DContext.fillRect(j, i, 1, 1);\n      }\n    }\n    if ('toDataURL' in canvas) {\n      return canvas.toDataURL();\n    } else {\n      throw new Error('toDataURL is not supported');\n    }\n  } else {\n    throw new Error('Can not access image data');\n  }\n};\n\n/**\n * implementation of Tensor.toImageData()\n */\nexport const tensorToImageData = (tensor: Tensor, options?: TensorToImageDataOptions): ImageData => {\n  const pixels2DContext = typeof document !== 'undefined' ?\n      document.createElement('canvas').getContext('2d') :\n      new OffscreenCanvas(1, 1).getContext('2d') as OffscreenCanvasRenderingContext2D;\n  let image: ImageData;\n  if (pixels2DContext != null) {\n    // Default values for height and width & format\n    let width: number;\n    let height: number;\n    let channels: number;\n    if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n      width = tensor.dims[2];\n      height = tensor.dims[1];\n      channels = tensor.dims[3];\n    } else {  // Default layout is NCWH\n      width = tensor.dims[3];\n      height = tensor.dims[2];\n      channels = tensor.dims[1];\n    }\n    const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n\n    const norm = options?.norm;\n    let normMean: [number, number, number, number];\n    let normBias: [number, number, number, number];\n    if (norm === undefined || norm.mean === undefined) {\n      normMean = [255, 255, 255, 255];\n    } else {\n      if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n      } else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n        if (norm.mean[3] !== undefined) {\n          normMean[3] = norm.mean[3];\n        }\n      }\n    }\n    if (norm === undefined || norm.bias === undefined) {\n      normBias = [0, 0, 0, 0];\n    } else {\n      if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n      } else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n        if (norm.bias[3] !== undefined) {\n          normBias[3] = norm.bias[3];\n        }\n      }\n    }\n\n    const stride = height * width;\n    if (options !== undefined) {\n      if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n          (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n        throw new Error('Tensor format doesn\\'t match input tensor dims');\n      }\n    }\n\n    // Default pointer assignments\n    const step = 4;\n    let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGBA') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n      aTensorPointer = stride * 3;\n    } else if (inputformat === 'RGB') {\n      rTensorPointer = 0;\n      gTensorPointer = stride;\n      bTensorPointer = stride * 2;\n    } else if (inputformat === 'RBG') {\n      rTensorPointer = 0;\n      bTensorPointer = stride;\n      gTensorPointer = stride * 2;\n    }\n\n    image = pixels2DContext.createImageData(width, height);\n\n    for (let i = 0; i < height * width;\n         rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n      image.data[rImagePointer] = ((tensor.data[rTensorPointer++] as number) - normBias[0]) * normMean[0];  // R value\n      image.data[gImagePointer] = ((tensor.data[gTensorPointer++] as number) - normBias[1]) * normMean[1];  // G value\n      image.data[bImagePointer] = ((tensor.data[bTensorPointer++] as number) - normBias[2]) * normMean[2];  // B value\n      image.data[aImagePointer] = aTensorPointer === -1 ?\n          255 :\n          ((tensor.data[aTensorPointer++] as number) - normBias[3]) * normMean[3];  // A value\n    }\n\n  } else {\n    throw new Error('Can not access image data');\n  }\n  return image;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OptionsDimensions, OptionsFormat, OptionsNormalizationParameters, OptionsTensorFormat, OptionsTensorLayout, TensorFromGpuBufferOptions, TensorFromImageBitmapOptions, TensorFromImageDataOptions, TensorFromImageElementOptions, TensorFromTextureOptions, TensorFromUrlOptions} from './tensor-factory.js';\nimport {Tensor} from './tensor-impl.js';\nimport {Tensor as TensorInterface} from './tensor.js';\n\ninterface BufferToTensorOptions extends OptionsDimensions, OptionsTensorLayout, OptionsNormalizationParameters,\n                                        OptionsFormat, OptionsTensorFormat {}\n\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor = (buffer: Uint8ClampedArray|undefined, options: BufferToTensorOptions): Tensor => {\n  if (buffer === undefined) {\n    throw new Error('Image buffer must be defined');\n  }\n  if (options.height === undefined || options.width === undefined) {\n    throw new Error('Image height and width must be defined');\n  }\n  if (options.tensorLayout === 'NHWC') {\n    throw new Error('NHWC Tensor layout is not supported yet');\n  }\n\n  const {height, width} = options;\n\n  const norm = options.norm ?? {mean: 255, bias: 0};\n  let normMean: [number, number, number, number];\n  let normBias: [number, number, number, number];\n\n  if (typeof (norm.mean) === 'number') {\n    normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n  } else {\n    normMean = [norm.mean![0], norm.mean![1], norm.mean![2], norm.mean![3] ?? 255];\n  }\n\n  if (typeof (norm.bias) === 'number') {\n    normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n  } else {\n    normBias = [norm.bias![0], norm.bias![1], norm.bias![2], norm.bias![3] ?? 0];\n  }\n\n  const inputformat = options.format !== undefined ? options.format : 'RGBA';\n  // default value is RGBA since imagedata and HTMLImageElement uses it\n\n  const outputformat =\n      options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n  const stride = height * width;\n  const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n\n  // Default pointer assignments\n  let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n  let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n\n  // Updating the pointer assignments based on the input image format\n  if (inputformat === 'RGB') {\n    step = 3;\n    rImagePointer = 0;\n    gImagePointer = 1;\n    bImagePointer = 2;\n    aImagePointer = -1;\n  }\n\n  // Updating the pointer assignments based on the output tensor format\n  if (outputformat === 'RGBA') {\n    aTensorPointer = stride * 3;\n  } else if (outputformat === 'RBG') {\n    rTensorPointer = 0;\n    bTensorPointer = stride;\n    gTensorPointer = stride * 2;\n  } else if (outputformat === 'BGR') {\n    bTensorPointer = 0;\n    gTensorPointer = stride;\n    rTensorPointer = stride * 2;\n  }\n\n  for (let i = 0; i < stride;\n       i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n    float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n    float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n    float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n    if (aTensorPointer !== -1 && aImagePointer !== -1) {\n      float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n    }\n  }\n\n  // Float32Array -> ort.Tensor\n  const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n                                                 new Tensor('float32', float32Data, [1, 3, height, width]);\n  return outputTensor;\n};\n\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async(\n    image: ImageData|HTMLImageElement|ImageBitmap|string,\n    options?: TensorFromImageDataOptions|TensorFromImageElementOptions|TensorFromImageBitmapOptions|\n    TensorFromUrlOptions): Promise<Tensor> => {\n  // checking the type of image object\n  const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n  const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n  const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n  const isString = typeof image === 'string';\n\n  let data: Uint8ClampedArray|undefined;\n  let bufferToTensorOptions: BufferToTensorOptions = options ?? {};\n\n  const createCanvas = () => {\n    if (typeof document !== 'undefined') {\n      return document.createElement('canvas');\n    } else if (typeof OffscreenCanvas !== 'undefined') {\n      return new OffscreenCanvas(1, 1);\n    } else {\n      throw new Error('Canvas is not supported');\n    }\n  };\n  const createCanvasContext = (canvas: HTMLCanvasElement|OffscreenCanvas) => {\n    if (canvas instanceof HTMLCanvasElement) {\n      return canvas.getContext('2d');\n    } else if (canvas instanceof OffscreenCanvas) {\n      return canvas.getContext('2d') as OffscreenCanvasRenderingContext2D;\n    } else {\n      return null;\n    }\n  };\n  // filling and checking image configuration options\n  if (isHTMLImageEle) {\n    // HTMLImageElement - image object - format is RGBA by default\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      let height = image.height;\n      let width = image.width;\n      if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n        height = options.resizedHeight;\n        width = options.resizedWidth;\n      }\n\n      if (options !== undefined) {\n        bufferToTensorOptions = options;\n        if (options.tensorFormat !== undefined) {\n          throw new Error('Image input config format must be RGBA for HTMLImageElement');\n        } else {\n          bufferToTensorOptions.tensorFormat = 'RGBA';\n        }\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      } else {\n        bufferToTensorOptions.tensorFormat = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n      }\n\n      pixels2DContext.drawImage(image, 0, 0);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isImageDataEle) {\n    let height: number;\n    let width: number;\n\n    if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n      height = options.resizedHeight;\n      width = options.resizedWidth;\n    } else {\n      height = image.height;\n      width = image.width;\n    }\n\n    if (options !== undefined) {\n      bufferToTensorOptions = options;\n    }\n    bufferToTensorOptions.format = 'RGBA';\n    bufferToTensorOptions.height = height;\n    bufferToTensorOptions.width = width;\n\n    if (options !== undefined) {\n      const tempCanvas = createCanvas();\n\n      tempCanvas.width = width;\n      tempCanvas.height = height;\n\n      const pixels2DContext = createCanvasContext(tempCanvas);\n\n      if (pixels2DContext != null) {\n        pixels2DContext.putImageData(image, 0, 0);\n        data = pixels2DContext.getImageData(0, 0, width, height).data;\n      } else {\n        throw new Error('Can not access image data');\n      }\n    } else {\n      data = image.data;\n    }\n  } else if (isImageBitmap) {\n    // ImageBitmap - image object - format must be provided by user\n    if (options === undefined) {\n      throw new Error('Please provide image config with format for Imagebitmap');\n    }\n\n    const canvas = createCanvas();\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const pixels2DContext = createCanvasContext(canvas);\n\n    if (pixels2DContext != null) {\n      const height = image.height;\n      const width = image.width;\n      pixels2DContext.drawImage(image, 0, 0, width, height);\n      data = pixels2DContext.getImageData(0, 0, width, height).data;\n      bufferToTensorOptions.height = height;\n      bufferToTensorOptions.width = width;\n      return bufferToTensor(data, bufferToTensorOptions);\n    } else {\n      throw new Error('Can not access image data');\n    }\n  } else if (isString) {\n    return new Promise((resolve, reject) => {\n      const canvas = createCanvas();\n      const context = createCanvasContext(canvas);\n      if (!image || !context) {\n        return reject();\n      }\n      const newImage = new Image();\n      newImage.crossOrigin = 'Anonymous';\n      newImage.src = image;\n      newImage.onload = () => {\n        canvas.width = newImage.width;\n        canvas.height = newImage.height;\n        context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n        const img = context.getImageData(0, 0, canvas.width, canvas.height);\n\n        bufferToTensorOptions.height = canvas.height;\n        bufferToTensorOptions.width = canvas.width;\n        resolve(bufferToTensor(img.data, bufferToTensorOptions));\n      };\n    });\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n\n  if (data !== undefined) {\n    return bufferToTensor(data, bufferToTensorOptions);\n  } else {\n    throw new Error('Input data provided is not supported - aborted tensor creation');\n  }\n};\n\n/**\n * implementation of Tensor.fromTexture().\n */\nexport const tensorFromTexture = <T extends TensorInterface.TextureDataTypes>(\n    texture: TensorInterface.TextureType, options: TensorFromTextureOptions<T>): Tensor => {\n  const {width, height, download, dispose} = options;\n  // Always assume RGBAF32. TODO: support different texture format\n  const dims = [1, height, width, 4];\n  return new Tensor({location: 'texture', type: 'float32', texture, dims, download, dispose});\n};\n\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nexport const tensorFromGpuBuffer = <T extends TensorInterface.GpuBufferDataTypes>(\n    gpuBuffer: TensorInterface.GpuBufferType, options: TensorFromGpuBufferOptions<T>): Tensor => {\n  const {dataType, dims, download, dispose} = options;\n  return new Tensor({location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose});\n};\n\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nexport const tensorFromPinnedBuffer = <T extends TensorInterface.CpuPinnedDataTypes>(\n    type: T, buffer: TensorInterface.DataTypeMap[T], dims?: readonly number[]): Tensor =>\n    new Tensor({location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from './tensor.js';\n\nexport type SupportedTypedArrayConstructors = Float32ArrayConstructor|Uint8ArrayConstructor|Int8ArrayConstructor|\n    Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|Uint8ArrayConstructor|\n    Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor;\nexport type SupportedTypedArray = InstanceType<SupportedTypedArrayConstructors>;\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map<string, SupportedTypedArrayConstructors>([\n  ['float32', Float32Array],\n  ['uint8', Uint8Array],\n  ['int8', Int8Array],\n  ['uint16', Uint16Array],\n  ['int16', Int16Array],\n  ['int32', Int32Array],\n  ['bool', Uint8Array],\n  ['float64', Float64Array],\n  ['uint32', Uint32Array],\n]);\n\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map<SupportedTypedArrayConstructors, Tensor.Type>([\n  [Float32Array, 'float32'],\n  [Uint8Array, 'uint8'],\n  [Int8Array, 'int8'],\n  [Uint16Array, 'uint16'],\n  [Int16Array, 'int16'],\n  [Int32Array, 'int32'],\n  [Float64Array, 'float64'],\n  [Uint32Array, 'uint32'],\n]);\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// the following code allows delaying execution of BigInt/Float16Array checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt/Float16Array\n// polyfill if available.\nlet isTypedArrayChecked = false;\nexport const checkTypedArray = () => {\n  if (!isTypedArrayChecked) {\n    isTypedArrayChecked = true;\n    const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && BigInt64Array.from;\n    const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && BigUint64Array.from;\n    const isFloat16ArrayAvailable = typeof Float16Array !== 'undefined' && Float16Array.from;\n\n    if (isBigInt64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n    }\n    if (isBigUint64ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n    }\n    if (isFloat16ArrayAvailable) {\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Float16Array);\n      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, 'float16');\n    } else {\n      // if Float16Array is not available, use 'Uint16Array' to store the data.\n      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Uint16Array);\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CpuPinnedConstructorParameters, GpuBufferConstructorParameters, TextureConstructorParameters} from './tensor-factory.js';\nimport {Tensor} from './tensor-impl.js';\n\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims: readonly unknown[]): number => {\n  let size = 1;\n  for (let i = 0; i < dims.length; i++) {\n    const dim = dims[i];\n    if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n      throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n    }\n    if (dim < 0) {\n      throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n    }\n    size *= dim;\n  }\n  return size;\n};\n\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor: Tensor, dims: readonly number[]): Tensor => {\n  switch (tensor.location) {\n    case 'cpu':\n      return new Tensor(tensor.type, tensor.data, dims);\n    case 'cpu-pinned':\n      return new Tensor({\n        location: 'cpu-pinned',\n        data: tensor.data as CpuPinnedConstructorParameters['data'],\n        type: tensor.type as CpuPinnedConstructorParameters['type'],\n        dims,\n      });\n    case 'texture':\n      return new Tensor({\n        location: 'texture',\n        texture: tensor.texture,\n        type: tensor.type as TextureConstructorParameters['type'],\n        dims,\n      });\n    case 'gpu-buffer':\n      return new Tensor({\n        location: 'gpu-buffer',\n        gpuBuffer: tensor.gpuBuffer,\n        type: tensor.type as GpuBufferConstructorParameters['type'],\n        dims,\n      });\n    default:\n      throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {tensorToDataURL, tensorToImageData} from './tensor-conversion-impl.js';\nimport {TensorToDataUrlOptions, TensorToImageDataOptions} from './tensor-conversion.js';\nimport {tensorFromGpuBuffer, tensorFromImage, tensorFromPinnedBuffer, tensorFromTexture} from './tensor-factory-impl.js';\nimport {CpuPinnedConstructorParameters, GpuBufferConstructorParameters, TensorFromGpuBufferOptions, TensorFromImageBitmapOptions, TensorFromImageDataOptions, TensorFromImageElementOptions, TensorFromTextureOptions, TensorFromUrlOptions, TextureConstructorParameters} from './tensor-factory.js';\nimport {checkTypedArray, NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, SupportedTypedArray, SupportedTypedArrayConstructors} from './tensor-impl-type-mapping.js';\nimport {calculateSize, tensorReshape} from './tensor-utils-impl.js';\nimport {Tensor as TensorInterface} from './tensor.js';\n\n// type aliases for those exported from Tensor interface\n\ntype TensorType = TensorInterface.Type;\ntype TensorDataType = TensorInterface.DataType;\ntype TensorDataLocation = TensorInterface.DataLocation;\ntype TensorTextureType = TensorInterface.TextureType;\ntype TensorGpuBufferType = TensorInterface.GpuBufferType;\n\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nexport class Tensor implements TensorInterface {\n  // #region constructors\n\n  /**\n   * Construct a new CPU tensor object from the given type, data and dims.\n   */\n  constructor(\n      type: TensorType, data: TensorDataType|readonly string[]|readonly number[]|readonly boolean[],\n      dims?: readonly number[]);\n  /**\n   * Construct a new CPU tensor object from the given data and dims. Type is inferred from data.\n   */\n  constructor(data: TensorDataType|readonly string[]|readonly boolean[], dims?: readonly number[]);\n  /**\n   * Construct a new tensor object from the pinned CPU data with the given type and dims.\n   *\n   * Tensor's location will be set to 'cpu-pinned'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: CpuPinnedConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGL texture with the given type and dims.\n   *\n   * Tensor's location will be set to 'texture'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: TextureConstructorParameters);\n  /**\n   * Construct a new tensor object from the WebGPU buffer with the given type and dims.\n   *\n   * Tensor's location will be set to 'gpu-buffer'.\n   *\n   * @param params - Specify the parameters to construct the tensor.\n   */\n  constructor(params: GpuBufferConstructorParameters);\n\n  /**\n   * implementation.\n   */\n  constructor(\n      arg0: TensorType|TensorDataType|readonly string[]|readonly boolean[]|CpuPinnedConstructorParameters|\n      TextureConstructorParameters|GpuBufferConstructorParameters,\n      arg1?: TensorDataType|readonly number[]|readonly string[]|readonly boolean[], arg2?: readonly number[]) {\n    // perform one-time check for BigInt/Float16Array support\n    checkTypedArray();\n\n    let type: TensorType;\n    let dims: readonly number[];\n\n    if (typeof arg0 === 'object' && 'location' in arg0) {\n      //\n      // constructing tensor from specific location\n      //\n      this.dataLocation = arg0.location;\n      type = arg0.type;\n      dims = arg0.dims;\n      switch (arg0.location) {\n        case 'cpu-pinned': {\n          const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n          if (!expectedTypedArrayConstructor) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n          }\n          if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n            throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n          }\n          this.cpuData = arg0.data;\n          break;\n        }\n        case 'texture': {\n          if (type !== 'float32') {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n          }\n          this.gpuTextureData = arg0.texture;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        case 'gpu-buffer': {\n          if ((type !== 'float32' && type !== 'float16' && type !== 'int32' && type !== 'int64' && type !== 'uint32' &&\n               type !== 'uint8' && type !== 'bool')) {\n            throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n          }\n          this.gpuBufferData = arg0.gpuBuffer;\n          this.downloader = arg0.download;\n          this.disposer = arg0.dispose;\n          break;\n        }\n        default:\n          throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n      }\n    } else {\n      //\n      // constructing tensor of location 'cpu'\n      //\n      let data: TensorDataType;\n      let maybeDims: typeof arg1|typeof arg2;\n      // check whether arg0 is type or data\n      if (typeof arg0 === 'string') {\n        //\n        // Override: constructor(type, data, ...)\n        //\n        type = arg0;\n        maybeDims = arg2;\n        if (arg0 === 'string') {\n          // string tensor\n          if (!Array.isArray(arg1)) {\n            throw new TypeError('A string tensor\\'s data must be a string array.');\n          }\n          // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n          // error will be populated at inference\n          data = arg1;\n        } else {\n          // numeric tensor\n          const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n          if (typedArrayConstructor === undefined) {\n            throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n          }\n          if (Array.isArray(arg1)) {\n            if (arg0 === 'float16' && typedArrayConstructor === Uint16Array) {\n              // When no Float16Array polyfill is used, we cannot create 'float16' tensor from number array.\n              //\n              // Throw error here because when user try to use number array as data,\n              // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n              // Uint16Array.from(arg1) which generates wrong data.\n              throw new TypeError(\n                  'Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n            } else if (arg0 === 'uint64' || arg0 === 'int64') {\n              // use 'as any' here because:\n              // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n              // see https://github.com/microsoft/TypeScript/issues/17002\n              // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n              // does not accept parameter mapFn.\n              // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n              // type.\n\n              // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1, BigInt);\n            } else {\n              // assume 'arg1' is of type \"readonly number[]\" here.\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              data = (typedArrayConstructor as any).from(arg1);\n            }\n          } else if (arg1 instanceof typedArrayConstructor) {\n            data = arg1;\n          } else {\n            throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n          }\n        }\n      } else {\n        //\n        // Override: constructor(data, ...)\n        //\n        maybeDims = arg1;\n        if (Array.isArray(arg0)) {\n          // only boolean[] and string[] is supported\n          if (arg0.length === 0) {\n            throw new TypeError('Tensor type cannot be inferred from an empty array.');\n          }\n          const firstElementType = typeof arg0[0];\n          if (firstElementType === 'string') {\n            type = 'string';\n            data = arg0;\n          } else if (firstElementType === 'boolean') {\n            type = 'bool';\n            // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n            // wrong type. We use 'as any' to make it happy.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            data = Uint8Array.from(arg0 as any[]);\n          } else {\n            throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n          }\n        } else {\n          // get tensor type from TypedArray\n          const mappedType =\n              NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor as SupportedTypedArrayConstructors);\n          if (mappedType === undefined) {\n            throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n          }\n          type = mappedType;\n          data = arg0 as SupportedTypedArray;\n        }\n      }\n\n      // type and data is processed, now processing dims\n      if (maybeDims === undefined) {\n        // assume 1-D tensor if dims omitted\n        maybeDims = [data.length];\n      } else if (!Array.isArray(maybeDims)) {\n        throw new TypeError('A tensor\\'s dims must be a number array');\n      }\n      dims = maybeDims as readonly number[];\n\n      this.cpuData = data;\n      this.dataLocation = 'cpu';\n    }\n\n    // perform check on dims\n    const size = calculateSize(dims);\n    // if data is on CPU, check whether data length matches tensor size\n    if (this.cpuData && size !== this.cpuData.length) {\n      throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n    }\n\n    this.type = type;\n    this.dims = dims;\n    this.size = size;\n  }\n  // #endregion\n\n  // #region factory\n  static async fromImage(\n      image: ImageData|HTMLImageElement|ImageBitmap|string,\n      options?: TensorFromImageDataOptions|TensorFromImageElementOptions|TensorFromImageBitmapOptions|\n      TensorFromUrlOptions): Promise<TensorInterface> {\n    return tensorFromImage(image, options);\n  }\n\n  static fromTexture<T extends TensorInterface.TextureDataTypes>(\n      texture: TensorTextureType, options: TensorFromTextureOptions<T>): TensorInterface {\n    return tensorFromTexture(texture, options);\n  }\n\n  static fromGpuBuffer<T extends TensorInterface.GpuBufferDataTypes>(\n      gpuBuffer: TensorGpuBufferType, options: TensorFromGpuBufferOptions<T>): TensorInterface {\n    return tensorFromGpuBuffer(gpuBuffer, options);\n  }\n\n  static fromPinnedBuffer<T extends TensorInterface.CpuPinnedDataTypes>(\n      type: T, buffer: TensorInterface.DataTypeMap[T], dims?: readonly number[]): Tensor {\n    return tensorFromPinnedBuffer(type, buffer, dims);\n  }\n\n  // #endregion\n\n  // #region conversions\n  toDataURL(options?: TensorToDataUrlOptions): string {\n    return tensorToDataURL(this, options);\n  }\n\n  toImageData(options?: TensorToImageDataOptions): ImageData {\n    return tensorToImageData(this, options);\n  }\n  // #endregion\n\n  // #region public fields\n  readonly dims: readonly number[];\n  readonly type: TensorType;\n  readonly size: number;\n  // #endregion\n\n  // #region private fields\n\n  /**\n   * stores the location of the data.\n   */\n  private dataLocation: TensorDataLocation;\n\n  /**\n   * stores the data on CPU, if location is 'cpu' or 'cpu-pinned'. otherwise empty.\n   */\n  private cpuData?: TensorDataType;\n\n  /**\n   * stores the underlying texture when location is 'texture'. otherwise empty.\n   */\n  private gpuTextureData?: TensorTextureType;\n\n  /**\n   * stores the underlying GPU buffer when location is 'gpu-buffer'. otherwise empty.\n   */\n  private gpuBufferData?: TensorGpuBufferType;\n\n  /**\n   * stores an optional downloader function to download data from GPU to CPU.\n   */\n  private downloader?(): Promise<TensorDataType>;\n\n  /**\n   * a flag indicating whether the data is being downloaded from GPU to CPU.\n   */\n  private isDownloading?: boolean;\n\n  /**\n   * stores an optional disposer function to dispose the underlying data.\n   */\n  private disposer?(): void;\n  // #endregion\n\n  // #region properties\n  get data(): TensorDataType {\n    this.ensureValid();\n    if (!this.cpuData) {\n      throw new Error(\n          'The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n          'or use `texture` or `gpuBuffer` property to access the GPU data directly.');\n    }\n    return this.cpuData;\n  }\n\n  get location(): TensorDataLocation {\n    return this.dataLocation;\n  }\n\n  get texture(): TensorTextureType {\n    this.ensureValid();\n    if (!this.gpuTextureData) {\n      throw new Error('The data is not stored as a WebGL texture.');\n    }\n    return this.gpuTextureData;\n  }\n\n  get gpuBuffer(): TensorGpuBufferType {\n    this.ensureValid();\n    if (!this.gpuBufferData) {\n      throw new Error('The data is not stored as a WebGPU buffer.');\n    }\n    return this.gpuBufferData;\n  }\n  // #endregion\n\n  // #region methods\n\n  async getData(releaseData?: boolean): Promise<TensorDataType> {\n    this.ensureValid();\n    switch (this.dataLocation) {\n      case 'cpu':\n      case 'cpu-pinned':\n        return this.data;\n      case 'texture':\n      case 'gpu-buffer': {\n        if (!this.downloader) {\n          throw new Error('The current tensor is not created with a specified data downloader.');\n        }\n        if (this.isDownloading) {\n          throw new Error('The current tensor is being downloaded.');\n        }\n        try {\n          this.isDownloading = true;\n          const data = await this.downloader();\n          this.downloader = undefined;\n          this.dataLocation = 'cpu';\n          this.cpuData = data;\n\n          if (releaseData && this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n          }\n\n          return data;\n\n        } finally {\n          this.isDownloading = false;\n        }\n      }\n      default:\n        throw new Error(`cannot get data from location: ${this.dataLocation}`);\n    }\n  }\n\n  dispose(): void {\n    if (this.isDownloading) {\n      throw new Error('The current tensor is being downloaded.');\n    }\n\n    if (this.disposer) {\n      this.disposer();\n      this.disposer = undefined;\n    }\n    this.cpuData = undefined;\n    this.gpuTextureData = undefined;\n    this.gpuBufferData = undefined;\n    this.downloader = undefined;\n    this.isDownloading = undefined;\n\n    this.dataLocation = 'none';\n  }\n\n  // #endregion\n\n  // #region tensor utilities\n  private ensureValid(): void {\n    if (this.dataLocation === 'none') {\n      throw new Error('The tensor is disposed.');\n    }\n  }\n\n  reshape(dims: readonly number[]): TensorInterface {\n    this.ensureValid();\n    if (this.downloader || this.disposer) {\n      throw new Error('Cannot reshape a tensor that owns GPU resource.');\n    }\n    return tensorReshape(this, dims);\n  }\n  // #endregion\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorFactory} from './tensor-factory.js';\nimport {Tensor as TensorImpl} from './tensor-impl.js';\nimport {TypedTensorUtils} from './tensor-utils.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/**\n * represent a basic tensor with specified dimensions and data type.\n */\ninterface TypedTensorBase<T extends Tensor.Type> {\n  /**\n   * Get the dimensions of the tensor.\n   */\n  readonly dims: readonly number[];\n  /**\n   * Get the data type of the tensor.\n   */\n  readonly type: T;\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is not on CPU (eg. it's in the form of WebGL texture or WebGPU buffer), throw error.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n  /**\n   * Get the location of the data.\n   */\n  readonly location: Tensor.DataLocation;\n  /**\n   * Get the WebGL texture that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGL texture, throw error.\n   */\n  readonly texture: Tensor.TextureType;\n  /**\n   * Get the WebGPU buffer that holds the tensor data.\n   *\n   * If the data is not on GPU as WebGPU buffer, throw error.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n\n  /**\n   * Get the buffer data of the tensor.\n   *\n   * If the data is on CPU, returns the data immediately.\n   * If the data is on GPU, downloads the data and returns the promise.\n   *\n   * @param releaseData - whether release the data on GPU. Ignore if data is already on CPU.\n   */\n  getData(releaseData?: boolean): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * Dispose the tensor data.\n   *\n   * If the data is on CPU, remove its internal reference to the underlying data.\n   * If the data is on GPU, release the data on GPU.\n   *\n   * After calling this function, the tensor is considered no longer valid. Its location will be set to 'none'.\n   */\n  dispose(): void;\n}\n\nexport declare namespace Tensor {\n  interface DataTypeMap {\n    float32: Float32Array;\n    uint8: Uint8Array;\n    int8: Int8Array;\n    uint16: Uint16Array;\n    int16: Int16Array;\n    int32: Int32Array;\n    int64: BigInt64Array;\n    string: string[];\n    bool: Uint8Array;\n    float16: Uint16Array;  // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: Float64Array;\n    uint32: Uint32Array;\n    uint64: BigUint64Array;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  interface ElementTypeMap {\n    float32: number;\n    uint8: number;\n    int8: number;\n    uint16: number;\n    int16: number;\n    int32: number;\n    int64: bigint;\n    string: string;\n    bool: boolean;\n    float16: number;  // Keep using Uint16Array until we have a concrete solution for float 16.\n    float64: number;\n    uint32: number;\n    uint64: bigint;\n    // complex64: never;\n    // complex128: never;\n    // bfloat16: never;\n  }\n\n  type DataType = DataTypeMap[Type];\n  type ElementType = ElementTypeMap[Type];\n\n  /**\n   * supported data types for constructing a tensor from a pinned CPU buffer\n   */\n  export type CpuPinnedDataTypes = Exclude<Tensor.Type, 'string'>;\n\n  /**\n   * type alias for WebGL texture\n   */\n  export type TextureType = WebGLTexture;\n\n  /**\n   * supported data types for constructing a tensor from a WebGL texture\n   */\n  export type TextureDataTypes = 'float32';\n\n  /**\n   * type alias for WebGPU buffer\n   *\n   * The reason why we don't use type \"GPUBuffer\" defined in webgpu.d.ts from @webgpu/types is because \"@webgpu/types\"\n   * requires \"@types/dom-webcodecs\" as peer dependency when using TypeScript < v5.1 and its version need to be chosen\n   * carefully according to the TypeScript version being used. This means so far there is not a way to keep every\n   * TypeScript version happy. It turns out that we will easily broke users on some TypeScript version.\n   *\n   * for more info see https://github.com/gpuweb/types/issues/127\n   */\n  export type GpuBufferType = {size: number; mapState: 'unmapped' | 'pending' | 'mapped'};\n\n  /**\n   * supported data types for constructing a tensor from a WebGPU buffer\n   */\n  export type GpuBufferDataTypes = 'float32'|'float16'|'int32'|'int64'|'uint32'|'uint8'|'bool';\n\n  /**\n   * represent where the tensor data is stored\n   */\n  export type DataLocation = 'none'|'cpu'|'cpu-pinned'|'texture'|'gpu-buffer';\n\n  /**\n   * represent the data type of a tensor\n   */\n  export type Type = keyof DataTypeMap;\n}\n\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface TypedTensor<T extends Tensor.Type> extends TypedTensorBase<T>, TypedTensorUtils<T> {}\n/**\n * Represent multi-dimensional arrays to feed to or fetch from model inferencing.\n */\nexport interface Tensor extends TypedTensorBase<Tensor.Type>, TypedTensorUtils<Tensor.Type> {}\n\n/**\n * type TensorConstructor defines the constructors of 'Tensor' to create CPU tensor instances.\n */\nexport interface TensorConstructor extends TensorFactory {\n  // #region CPU tensor - specify element type\n  /**\n   * Construct a new string tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'string', data: Tensor.DataTypeMap['string']|readonly string[],\n      dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: 'bool', data: Tensor.DataTypeMap['bool']|readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new 64-bit integer typed tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new<T extends 'uint64'|'int64'>(\n      type: T, data: Tensor.DataTypeMap[T]|readonly bigint[]|readonly number[],\n      dims?: readonly number[]): TypedTensor<T>;\n\n  /**\n   * Construct a new numeric tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new<T extends Exclude<Tensor.Type, 'string'|'bool'|'uint64'|'int64'>>(\n      type: T, data: Tensor.DataTypeMap[T]|readonly number[], dims?: readonly number[]): TypedTensor<T>;\n  // #endregion\n\n  // #region CPU tensor - infer element types\n\n  /**\n   * Construct a new float32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float32Array, dims?: readonly number[]): TypedTensor<'float32'>;\n\n  /**\n   * Construct a new int8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int8Array, dims?: readonly number[]): TypedTensor<'int8'>;\n\n  /**\n   * Construct a new uint8 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint8Array, dims?: readonly number[]): TypedTensor<'uint8'>;\n\n  /**\n   * Construct a new uint16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint16Array, dims?: readonly number[]): TypedTensor<'uint16'>;\n\n  /**\n   * Construct a new int16 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int16Array, dims?: readonly number[]): TypedTensor<'int16'>;\n\n  /**\n   * Construct a new int32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Int32Array, dims?: readonly number[]): TypedTensor<'int32'>;\n\n  /**\n   * Construct a new int64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigInt64Array, dims?: readonly number[]): TypedTensor<'int64'>;\n\n  /**\n   * Construct a new string tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly string[], dims?: readonly number[]): TypedTensor<'string'>;\n\n  /**\n   * Construct a new bool tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: readonly boolean[], dims?: readonly number[]): TypedTensor<'bool'>;\n\n  /**\n   * Construct a new float64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Float64Array, dims?: readonly number[]): TypedTensor<'float64'>;\n\n  /**\n   * Construct a new uint32 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Uint32Array, dims?: readonly number[]): TypedTensor<'uint32'>;\n\n  /**\n   * Construct a new uint64 tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: BigUint64Array, dims?: readonly number[]): TypedTensor<'uint64'>;\n\n  // #endregion\n\n  // #region CPU tensor - fall back to non-generic tensor type declaration\n\n  /**\n   * Construct a new tensor object from the given type, data and dims.\n   *\n   * @param type - Specify the element type.\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(type: Tensor.Type, data: Tensor.DataType|readonly number[]|readonly string[]|readonly bigint[]|readonly boolean[],\n      dims?: readonly number[]): Tensor;\n\n  /**\n   * Construct a new tensor object from the given data and dims.\n   *\n   * @param data - Specify the CPU tensor data.\n   * @param dims - Specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   */\n  new(data: Tensor.DataType, dims?: readonly number[]): Tensor;\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl as TensorConstructor;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from './env-impl.js';\n\n/**\n * @ignore\n */\nexport const TRACE = (deviceType: string, label: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  // eslint-disable-next-line no-console\n  console.timeStamp(`${deviceType}::ORT::${label}`);\n};\n\nconst TRACE_FUNC = (msg: string, extraMsg?: string) => {\n  const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n  let hasTraceFunc = false;\n  for (let i = 0; i < stack.length; i++) {\n    if (hasTraceFunc && !stack[i].includes('TRACE_FUNC')) {\n      let label = `FUNC_${msg}::${stack[i].trim().split(' ')[1]}`;\n      if (extraMsg) {\n        label += `::${extraMsg}`;\n      }\n      TRACE('CPU', label);\n      return;\n    }\n    if (stack[i].includes('TRACE_FUNC')) {\n      hasTraceFunc = true;\n    }\n  }\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_BEGIN = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('BEGIN', extraMsg);\n};\n\n/**\n * @ignore\n */\nexport const TRACE_FUNC_END = (extraMsg?: string) => {\n  if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n    return;\n  }\n  TRACE_FUNC('END', extraMsg);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {resolveBackendAndExecutionProviders} from './backend-impl.js';\nimport {InferenceSessionHandler} from './backend.js';\nimport {InferenceSession as InferenceSessionInterface} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {Tensor} from './tensor.js';\nimport {TRACE_FUNC_BEGIN, TRACE_FUNC_END} from './trace.js';\n\ntype SessionOptions = InferenceSessionInterface.SessionOptions;\ntype RunOptions = InferenceSessionInterface.RunOptions;\ntype FeedsType = InferenceSessionInterface.FeedsType;\ntype FetchesType = InferenceSessionInterface.FetchesType;\ntype ReturnType = InferenceSessionInterface.ReturnType;\n\nexport class InferenceSession implements InferenceSessionInterface {\n  private constructor(handler: InferenceSessionHandler) {\n    this.handler = handler;\n  }\n  run(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  run(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async run(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const fetches: {[name: string]: OnnxValue|null} = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\n          }\n          if (this.outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'options\\' must be an object.');\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of this.outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSessionInterface.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n    }\n\n    // check if all inputs are in feed\n    for (const name of this.inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of this.outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    // feeds, fetches and options are prepared\n\n    const results = await this.handler.run(feeds, fetches, options);\n    const returnValue: {[name: string]: OnnxValue} = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    TRACE_FUNC_END();\n    return returnValue;\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n\n  static create(path: string, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: SessionOptions):\n      Promise<InferenceSessionInterface>;\n  static create(buffer: Uint8Array, options?: SessionOptions): Promise<InferenceSessionInterface>;\n  static async create(\n      arg0: string|ArrayBufferLike|Uint8Array, arg1?: SessionOptions|number, arg2?: number,\n      arg3?: SessionOptions): Promise<InferenceSessionInterface> {\n    TRACE_FUNC_BEGIN();\n    // either load from a file or buffer\n    let filePathOrUint8Array: string|Uint8Array;\n    let options: SessionOptions = {};\n\n    if (typeof arg0 === 'string') {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (arg0 instanceof Uint8Array) {\n      filePathOrUint8Array = arg0;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n    } else if (\n        arg0 instanceof ArrayBuffer ||\n        (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n      const buffer = arg0;\n      let byteOffset = 0;\n      let byteLength = arg0.byteLength;\n      if (typeof arg1 === 'object' && arg1 !== null) {\n        options = arg1;\n      } else if (typeof arg1 === 'number') {\n        byteOffset = arg1;\n        if (!Number.isSafeInteger(byteOffset)) {\n          throw new RangeError('\\'byteOffset\\' must be an integer.');\n        }\n        if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n          throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n        }\n        byteLength = arg0.byteLength - byteOffset;\n        if (typeof arg2 === 'number') {\n          byteLength = arg2;\n          if (!Number.isSafeInteger(byteLength)) {\n            throw new RangeError('\\'byteLength\\' must be an integer.');\n          }\n          if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n            throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n          }\n          if (typeof arg3 === 'object' && arg3 !== null) {\n            options = arg3;\n          } else if (typeof arg3 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'byteLength\\' must be a number.');\n        }\n      } else if (typeof arg1 !== 'undefined') {\n        throw new TypeError('\\'options\\' must be an object.');\n      }\n      filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n    } else {\n      throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n    }\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n    TRACE_FUNC_END();\n    return new InferenceSession(handler);\n  }\n\n  startProfiling(): void {\n    this.handler.startProfiling();\n  }\n  endProfiling(): void {\n    this.handler.endProfiling();\n  }\n\n  get inputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get outputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  private handler: InferenceSessionHandler;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession as InferenceSessionImpl} from './inference-session-impl.js';\nimport {OnnxModelOptions} from './onnx-model.js';\nimport {OnnxValue, OnnxValueDataLocation} from './onnx-value.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace InferenceSession {\n  // #region input/output types\n\n  type OnnxValueMapType = {readonly [name: string]: OnnxValue};\n  type NullableOnnxValueMapType = {readonly [name: string]: OnnxValue | null};\n\n  /**\n   * A feeds (model inputs) is an object that uses input names as keys and OnnxValue as corresponding values.\n   */\n  type FeedsType = OnnxValueMapType;\n\n  /**\n   * A fetches (model outputs) could be one of the following:\n   *\n   * - Omitted. Use model's output names definition.\n   * - An array of string indicating the output names.\n   * - An object that use output names as keys and OnnxValue or null as corresponding values.\n   *\n   * @remark\n   * different from input argument, in output, OnnxValue is optional. If an OnnxValue is present it will be\n   * used as a pre-allocated value by the inference engine; if omitted, inference engine will allocate buffer\n   * internally.\n   */\n  type FetchesType = readonly string[]|NullableOnnxValueMapType;\n\n  /**\n   * A inferencing return type is an object that uses output names as keys and OnnxValue as corresponding values.\n   */\n  type ReturnType = OnnxValueMapType;\n\n  // #endregion\n\n  // #region session options\n\n  /**\n   * A set of configurations for session behavior.\n   */\n  export interface SessionOptions extends OnnxModelOptions {\n    /**\n     * An array of execution provider options.\n     *\n     * An execution provider option can be a string indicating the name of the execution provider,\n     * or an object of corresponding type.\n     */\n    executionProviders?: readonly ExecutionProviderConfig[];\n\n    /**\n     * The intra OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    intraOpNumThreads?: number;\n\n    /**\n     * The inter OP threads number.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native).\n     */\n    interOpNumThreads?: number;\n\n    /**\n     * The free dimension override.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    freeDimensionOverrides?: {readonly [dimensionName: string]: number};\n\n    /**\n     * The optimization level.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    graphOptimizationLevel?: 'disabled'|'basic'|'extended'|'all';\n\n    /**\n     * Whether enable CPU memory arena.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableCpuMemArena?: boolean;\n\n    /**\n     * Whether enable memory pattern.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    enableMemPattern?: boolean;\n\n    /**\n     * Execution mode.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    executionMode?: 'sequential'|'parallel';\n\n    /**\n     * Optimized model file path.\n     *\n     * If this setting is specified, the optimized model will be dumped. In browser, a blob will be created\n     * with a pop-up window.\n     */\n    optimizedModelFilePath?: string;\n\n    /**\n     * Whether enable profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    enableProfiling?: boolean;\n\n    /**\n     * File prefix for profiling.\n     *\n     * This setting is a placeholder for a future use.\n     */\n    profileFilePrefix?: string;\n\n    /**\n     * Log ID.\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logId?: string;\n\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Specify string as a preferred data location for all outputs, or an object that use output names as keys and a\n     * preferred data location as corresponding values.\n     *\n     * This setting is available only in ONNXRuntime Web for WebGL and WebGPU EP.\n     */\n    preferredOutputLocation?: OnnxValueDataLocation|{readonly [outputName: string]: OnnxValueDataLocation};\n\n    /**\n     * Whether enable graph capture.\n     * This setting is available only in ONNXRuntime Web for WebGPU EP.\n     */\n    enableGraphCapture?: boolean;\n\n    /**\n     * Store configurations for a session. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_session_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     * ```js\n     * extra: {\n     *   session: {\n     *     set_denormal_as_zero: \"1\",\n     *     disable_prepacking: \"1\"\n     *   },\n     *   optimization: {\n     *     enable_gelu_approximation: \"1\"\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #region execution providers\n\n  // Currently, we have the following backends to support execution providers:\n  // Backend Node.js binding: supports 'cpu', 'dml' (win32), 'coreml' (macOS) and 'cuda' (linux).\n  // Backend WebAssembly: supports 'cpu', 'wasm', 'webgpu' and 'webnn'.\n  // Backend ONNX.js: supports 'webgl'.\n  // Backend React Native: supports 'cpu', 'xnnpack', 'coreml' (iOS), 'nnapi' (Android).\n  interface ExecutionProviderOptionMap {\n    coreml: CoreMLExecutionProviderOption;\n    cpu: CpuExecutionProviderOption;\n    cuda: CudaExecutionProviderOption;\n    dml: DmlExecutionProviderOption;\n    nnapi: NnapiExecutionProviderOption;\n    tensorrt: TensorRtExecutionProviderOption;\n    wasm: WebAssemblyExecutionProviderOption;\n    webgl: WebGLExecutionProviderOption;\n    webgpu: WebGpuExecutionProviderOption;\n    webnn: WebNNExecutionProviderOption;\n    xnnpack: XnnpackExecutionProviderOption;\n  }\n\n  type ExecutionProviderName = keyof ExecutionProviderOptionMap;\n  type ExecutionProviderConfig =\n      ExecutionProviderOptionMap[ExecutionProviderName]|ExecutionProviderOption|ExecutionProviderName|string;\n\n  export interface ExecutionProviderOption {\n    readonly name: string;\n  }\n  export interface CpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cpu';\n    useArena?: boolean;\n  }\n  export interface CudaExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'cuda';\n    deviceId?: number;\n  }\n  export interface DmlExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'dml';\n    deviceId?: number;\n  }\n  export interface TensorRtExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'tensorrt';\n    deviceId?: number;\n  }\n  export interface WebAssemblyExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'wasm';\n  }\n  export interface WebGLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgl';\n    // TODO: add flags\n  }\n  export interface XnnpackExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'xnnpack';\n  }\n  export interface WebGpuExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webgpu';\n    preferredLayout?: 'NCHW'|'NHWC';\n  }\n  export interface WebNNExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'webnn';\n    deviceType?: 'cpu'|'gpu';\n    numThreads?: number;\n    powerPreference?: 'default'|'low-power'|'high-performance';\n  }\n  export interface CoreMLExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'coreml';\n    /**\n     * The bit flags for CoreML execution provider.\n     *\n     * ```\n     * COREML_FLAG_USE_CPU_ONLY = 0x001\n     * COREML_FLAG_ENABLE_ON_SUBGRAPH = 0x002\n     * COREML_FLAG_ONLY_ENABLE_DEVICE_WITH_ANE = 0x004\n     * COREML_FLAG_ONLY_ALLOW_STATIC_INPUT_SHAPES = 0x008\n     * COREML_FLAG_CREATE_MLPROGRAM = 0x010\n     * ```\n     *\n     * See include/onnxruntime/core/providers/coreml/coreml_provider_factory.h for more details.\n     *\n     * This flag is available only in ONNXRuntime (Node.js binding).\n     */\n    coreMlFlags?: number;\n    /**\n     * Specify whether to use CPU only in CoreML EP.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    useCPUOnly?: boolean;\n    /**\n     * Specify whether to enable CoreML EP on subgraph.\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    enableOnSubgraph?: boolean;\n    /**\n     * Specify whether to only enable CoreML EP for Apple devices with ANE (Apple Neural Engine).\n     *\n     * This setting is available only in ONNXRuntime (react-native).\n     */\n    onlyEnableDeviceWithANE?: boolean;\n  }\n  export interface NnapiExecutionProviderOption extends ExecutionProviderOption {\n    readonly name: 'nnapi';\n    useFP16?: boolean;\n    useNCHW?: boolean;\n    cpuDisabled?: boolean;\n    cpuOnly?: boolean;\n  }\n  // #endregion\n\n  // #endregion\n\n  // #region run options\n\n  /**\n   * A set of configurations for inference run behavior\n   */\n  export interface RunOptions {\n    /**\n     * Log severity level. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/common/logging/severity.h\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    logSeverityLevel?: 0|1|2|3|4;\n\n    /**\n     * Log verbosity level.\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    logVerbosityLevel?: number;\n\n    /**\n     * Terminate all incomplete OrtRun calls as soon as possible if true\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     */\n    terminate?: boolean;\n\n    /**\n     * A tag for the Run() calls using this\n     *\n     * This setting is available only in ONNXRuntime (Node.js binding and react-native) or WebAssembly backend\n     */\n    tag?: string;\n\n    /**\n     * Set a single run configuration entry. See\n     * https://github.com/microsoft/onnxruntime/blob/main/include/onnxruntime/core/session/\n     * onnxruntime_run_options_config_keys.h\n     *\n     * This setting is available only in WebAssembly backend. Will support Node.js binding and react-native later\n     *\n     * @example\n     *\n     * ```js\n     * extra: {\n     *   memory: {\n     *     enable_memory_arena_shrinkage: \"1\",\n     *   }\n     * }\n     * ```\n     */\n    extra?: Record<string, unknown>;\n  }\n\n  // #endregion\n\n  // #region value metadata\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface ValueMetadata {\n    // TBD\n  }\n\n  // #endregion\n}\n\n/**\n * Represent a runtime instance of an ONNX model.\n */\nexport interface InferenceSession {\n  // #region run()\n\n  /**\n   * Execute the model asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Execute the model asynchronously with the given feeds, fetches and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for detail.\n   * @param fetches - Representation of the model output. See type description of `InferenceSession.OutputType` for\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model inference.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  run(feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n\n  // #endregion\n\n  // #region profiling\n\n  /**\n   * Start profiling.\n   */\n  startProfiling(): void;\n\n  /**\n   * End profiling.\n   */\n  endProfiling(): void;\n\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded model.\n   */\n  readonly inputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded model.\n   */\n  readonly outputNames: readonly string[];\n\n  // /**\n  //  * Get input metadata of the loaded model.\n  //  */\n  // readonly inputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // /**\n  //  * Get output metadata of the loaded model.\n  //  */\n  // readonly outputMetadata: ReadonlyArray<Readonly<InferenceSession.ValueMetadata>>;\n\n  // #endregion\n}\n\nexport interface InferenceSessionFactory {\n  // #region create()\n\n  /**\n   * Create a new inference session and load model asynchronously from an ONNX model file.\n   *\n   * @param uri - The URI or file path of the model to load.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(uri: string, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from segment of an array bufer.\n   *\n   * @param buffer - An ArrayBuffer representation of an ONNX model.\n   * @param byteOffset - The beginning of the specified portion of the array buffer.\n   * @param byteLength - The length in bytes of the array buffer.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: ArrayBufferLike, byteOffset: number, byteLength?: number, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSession>;\n\n  /**\n   * Create a new inference session and load model asynchronously from a Uint8Array.\n   *\n   * @param buffer - A Uint8Array representation of an ONNX model.\n   * @param options - specify configuration for creating a new inference session.\n   * @returns A promise that resolves to an InferenceSession object.\n   */\n  create(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession: InferenceSessionFactory = InferenceSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OptionsFormat, OptionsNormalizationParameters, OptionsTensorLayout} from './tensor-factory.js';\n\nexport interface TensorToDataUrlOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface TensorToImageDataOptions extends OptionsTensorLayout, OptionsFormat, OptionsNormalizationParameters {}\n\nexport interface ConversionUtils {\n  /**\n   * creates a DataURL instance from tensor\n   *\n   * @param options - An optional object representing options for creating a DataURL instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns a DataURL string representing the image converted from tensor data\n   */\n  toDataURL(options?: TensorToDataUrlOptions): string;\n\n  /**\n   * creates an ImageData instance from tensor\n   *\n   * @param options - An optional object representing options for creating an ImageData instance from the tensor.\n   *\n   * The following default settings will be applied:\n   * - `format`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * @returns an ImageData instance representing the image converted from tensor data\n   */\n  toImageData(options?: TensorToImageDataOptions): ImageData;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TypedTensor} from './tensor.js';\n\nexport type ImageFormat = 'RGB'|'RGBA'|'BGR'|'RBG';\nexport type ImageTensorLayout = 'NHWC'|'NCHW';\n\n// the following region contains type definitions for constructing tensor from a specific location.\n\n// #region types for constructing a tensor from a specific location\n\n/**\n * represent common properties of the parameter for constructing a tensor from a specific location.\n */\ninterface CommonConstructorParameters<T> extends Pick<Tensor, 'dims'> {\n  /**\n   * Specify the data type of the tensor.\n   */\n  readonly type: T;\n}\n\n/**\n * represent the parameter for constructing a tensor from a GPU resource.\n */\ninterface GpuResourceConstructorParameters<T extends Tensor.Type> {\n  /**\n   * an optional callback function to download data from GPU to CPU.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  download?(): Promise<Tensor.DataTypeMap[T]>;\n\n  /**\n   * an optional callback function that will be called when the tensor is disposed.\n   *\n   * If not provided, the tensor treat the GPU data as external resource.\n   */\n  dispose?(): void;\n}\n\n/**\n * represent the parameter for constructing a tensor from a pinned CPU buffer\n */\nexport interface CpuPinnedConstructorParameters<T extends Tensor.CpuPinnedDataTypes = Tensor.CpuPinnedDataTypes> extends\n    CommonConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'cpu-pinned'.\n   */\n  readonly location: 'cpu-pinned';\n  /**\n   * Specify the CPU pinned buffer that holds the tensor data.\n   */\n  readonly data: Tensor.DataTypeMap[T];\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGL texture\n */\nexport interface TextureConstructorParameters<T extends Tensor.TextureDataTypes = Tensor.TextureDataTypes> extends\n    CommonConstructorParameters<T>, GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'texture'.\n   */\n  readonly location: 'texture';\n  /**\n   * Specify the WebGL texture that holds the tensor data.\n   */\n  readonly texture: Tensor.TextureType;\n}\n\n/**\n * represent the parameter for constructing a tensor from a WebGPU buffer\n */\nexport interface GpuBufferConstructorParameters<T extends Tensor.GpuBufferDataTypes = Tensor.GpuBufferDataTypes> extends\n    CommonConstructorParameters<T>, GpuResourceConstructorParameters<T> {\n  /**\n   * Specify the location of the data to be 'gpu-buffer'.\n   */\n  readonly location: 'gpu-buffer';\n  /**\n   * Specify the WebGPU buffer that holds the tensor data.\n   */\n  readonly gpuBuffer: Tensor.GpuBufferType;\n}\n\n// #endregion\n\n// the following region contains type definitions of each individual options.\n// the tensor factory functions use a composition of those options as the parameter type.\n\n// #region Options fields\n\nexport interface OptionsFormat {\n  /**\n   * Describes the image format represented in RGBA color space.\n   */\n  format?: ImageFormat;\n}\n\nexport interface OptionsTensorFormat {\n  /**\n   * Describes the image format of the tensor.\n   *\n   * NOTE: this is different from option 'format'. While option 'format' represents the original image, 'tensorFormat'\n   * represents the target format of the tensor. A transpose will be performed if they are different.\n   */\n  tensorFormat?: ImageFormat;\n}\n\nexport interface OptionsTensorDataType {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: 'float32'|'uint8';\n}\n\nexport interface OptionsTensorLayout {\n  /**\n   * Describes the tensor layout when representing data of one or more image(s).\n   */\n  tensorLayout?: ImageTensorLayout;\n}\n\nexport interface OptionsDimensions {\n  /**\n   * Describes the image height in pixel\n   */\n  height?: number;\n  /**\n   * Describes the image width in pixel\n   */\n  width?: number;\n}\n\nexport interface OptionResizedDimensions {\n  /**\n   * Describes the resized height. If omitted, original height will be used.\n   */\n  resizedHeight?: number;\n  /**\n   * Describes resized width - can be accessed via tensor dimensions as well\n   */\n  resizedWidth?: number;\n}\n\nexport interface OptionsNormalizationParameters {\n  /**\n   * Describes normalization parameters when preprocessing the image as model input.\n   *\n   * Data element are ranged from 0 to 255.\n   */\n  norm?: {\n    /**\n     * The 'bias' value for image normalization.\n     * - If omitted, use default value 0.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    bias?: number|[number, number, number]|[number, number, number, number];\n    /**\n     * The 'mean' value for image normalization.\n     * - If omitted, use default value 255.\n     * - If it's a single number, apply to each channel\n     * - If it's an array of 3 or 4 numbers, apply element-wise. Number of elements need to match the number of channels\n     * for the corresponding image format\n     */\n    mean?: number | [number, number, number] | [number, number, number, number];\n  };\n}\n\n// #endregion\n\n// #region Options composition\n\nexport interface TensorFromImageDataOptions extends OptionResizedDimensions, OptionsTensorFormat, OptionsTensorLayout,\n                                                    OptionsTensorDataType, OptionsNormalizationParameters {}\n\nexport interface TensorFromImageElementOptions extends OptionResizedDimensions, OptionsTensorFormat,\n                                                       OptionsTensorLayout, OptionsTensorDataType,\n                                                       OptionsNormalizationParameters {}\n\nexport interface TensorFromUrlOptions extends OptionsDimensions, OptionResizedDimensions, OptionsTensorFormat,\n                                              OptionsTensorLayout, OptionsTensorDataType,\n                                              OptionsNormalizationParameters {}\n\nexport interface TensorFromImageBitmapOptions extends OptionResizedDimensions, OptionsTensorFormat, OptionsTensorLayout,\n                                                      OptionsTensorDataType, OptionsNormalizationParameters {}\n\nexport interface TensorFromTextureOptions<T extends Tensor.TextureDataTypes> extends\n    Required<OptionsDimensions>, OptionsFormat, GpuResourceConstructorParameters<T>/* TODO: add more */ {}\n\nexport interface TensorFromGpuBufferOptions<T extends Tensor.GpuBufferDataTypes> extends\n    Pick<Tensor, 'dims'>, GpuResourceConstructorParameters<T> {\n  /**\n   * Describes the data type of the tensor.\n   */\n  dataType?: T;\n}\n\n// #endregion\n\n/**\n * type TensorFactory defines the factory functions of 'Tensor' to create tensor instances from existing data or\n * resources.\n */\nexport interface TensorFactory {\n  /**\n   * create a tensor from an ImageData object\n   *\n   * @param imageData - the ImageData object to create tensor from\n   * @param options - An optional object representing options for creating tensor from ImageData.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(imageData: ImageData, options?: TensorFromImageDataOptions):\n      Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a HTMLImageElement object\n   *\n   * @param imageElement - the HTMLImageElement object to create tensor from\n   * @param options - An optional object representing options for creating tensor from HTMLImageElement.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(imageElement: HTMLImageElement, options?: TensorFromImageElementOptions):\n      Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from URL\n   *\n   * @param urlSource - a string as a URL to the image or a data URL containing the image data.\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(urlSource: string, options?: TensorFromUrlOptions): Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from an ImageBitmap object\n   *\n   * @param bitmap - the ImageBitmap object to create tensor from\n   * @param options - An optional object representing options for creating tensor from URL.\n   *\n   * The following default settings will be applied:\n   * - `tensorFormat`: `'RGB'`\n   * - `tensorLayout`: `'NCHW'`\n   * - `dataType`: `'float32'`\n   * @returns A promise that resolves to a tensor object\n   */\n  fromImage(bitmap: ImageBitmap, options: TensorFromImageBitmapOptions):\n      Promise<TypedTensor<'float32'>|TypedTensor<'uint8'>>;\n\n  /**\n   * create a tensor from a WebGL texture\n   *\n   * @param texture - the WebGLTexture object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGL texture.\n   *\n   * The options include following properties:\n   * - `width`: the width of the texture. Required.\n   * - `height`: the height of the texture. Required.\n   * - `format`: the format of the texture. If omitted, assume 'RGBA'.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromTexture<T extends Tensor.TextureDataTypes = 'float32'>(\n      texture: Tensor.TextureType, options: TensorFromTextureOptions<T>): TypedTensor<'float32'>;\n\n  /**\n   * create a tensor from a WebGPU buffer\n   *\n   * @param buffer - the GPUBuffer object to create tensor from\n   * @param options - An optional object representing options for creating tensor from WebGPU buffer.\n   *\n   * The options include following properties:\n   * - `dataType`: the data type of the tensor. If omitted, assume 'float32'.\n   * - `dims`: the dimension of the tensor. Required.\n   * - `download`: an optional function to download the tensor data from GPU to CPU. If omitted, the GPU data\n   * will not be able to download. Usually, this is provided by a GPU backend for the inference outputs. Users don't\n   * need to provide this function.\n   * - `dispose`: an optional function to dispose the tensor data on GPU. If omitted, the GPU data will not be disposed.\n   * Usually, this is provided by a GPU backend for the inference outputs. Users don't need to provide this function.\n   *\n   * @returns a tensor object\n   */\n  fromGpuBuffer<T extends Tensor.GpuBufferDataTypes>(\n      buffer: Tensor.GpuBufferType, options: TensorFromGpuBufferOptions<T>): TypedTensor<T>;\n\n  /**\n   * create a tensor from a pre-allocated buffer. The buffer will be used as a pinned buffer.\n   *\n   * @param type - the tensor element type.\n   * @param buffer - a TypedArray corresponding to the type.\n   * @param dims - specify the dimension of the tensor. If omitted, a 1-D tensor is assumed.\n   *\n   * @returns a tensor object\n   */\n  fromPinnedBuffer<T extends Exclude<Tensor.Type, 'string'>>(\n      type: T, buffer: Tensor.DataTypeMap[T], dims?: readonly number[]): TypedTensor<T>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * A string that represents a file's URL or path.\n *\n * Path is vailable only in onnxruntime-node or onnxruntime-web running in Node.js.\n */\nexport type FileUrlOrPath = string;\n\n/**\n * A Blob object that represents a file.\n */\nexport type FileBlob = Blob;\n\n/**\n * A Uint8Array, ArrayBuffer or SharedArrayBuffer object that represents a file content.\n *\n * When it is an ArrayBuffer or SharedArrayBuffer, the whole buffer is assumed to be the file content.\n */\nexport type FileData = Uint8Array|ArrayBufferLike;\n\n/**\n * Represents a file that can be loaded by the ONNX Runtime JavaScript API.\n */\nexport type FileType = FileUrlOrPath|FileBlob|FileData;\n\n/**\n * Represents an external data file.\n */\nexport interface ExternalDataFileDescription {\n  /**\n   * Specify the external data file.\n   */\n  data: FileType;\n  /**\n   * Specify the file path.\n   */\n  path: string;\n}\n\n/**\n * Represents an external data file.\n *\n * When using a string, it should be a file URL or path that in the same directory as the model file.\n */\nexport type ExternalDataFileType = ExternalDataFileDescription|FileUrlOrPath;\n\n/**\n * Options for model loading.\n */\nexport interface OnnxModelOptions {\n  /**\n   * Specifying a list of files that represents the external data.\n   */\n  externalData?: readonly ExternalDataFileType[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from './tensor.js';\n\nexport type NonTensorType = never;\n\n/**\n * Type OnnxValue Represents both tensors and non-tensors value for model's inputs/outputs.\n *\n * NOTE: currently not support non-tensor\n */\nexport type OnnxValue = Tensor|NonTensorType;\n\n/**\n * Type OnnxValueDataLocation represents the location of the data of an OnnxValue.\n */\nexport type OnnxValueDataLocation = Tensor.DataLocation;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {resolveBackendAndExecutionProviders} from './backend-impl.js';\nimport {SessionHandler, TrainingSessionHandler} from './backend.js';\nimport {InferenceSession as InferenceSession} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {Tensor} from './tensor.js';\nimport {TrainingSession as TrainingSessionInterface, TrainingSessionCreateOptions} from './training-session.js';\n\ntype SessionOptions = InferenceSession.SessionOptions;\ntype FeedsType = InferenceSession.FeedsType;\ntype FetchesType = InferenceSession.FetchesType;\ntype ReturnType = InferenceSession.ReturnType;\ntype RunOptions = InferenceSession.RunOptions;\n\nconst noBackendErrMsg: string = 'Training backend could not be resolved. ' +\n    'Make sure you\\'re using the correct configuration & WebAssembly files.';\n\nexport class TrainingSession implements TrainingSessionInterface {\n  private constructor(handler: TrainingSessionHandler, hasOptimizerModel: boolean, hasEvalModel: boolean) {\n    this.handler = handler;\n    this.hasOptimizerModel = hasOptimizerModel;\n    this.hasEvalModel = hasEvalModel;\n  }\n  private handler: TrainingSessionHandler;\n  private hasOptimizerModel: boolean;\n  private hasEvalModel: boolean;\n\n  get trainingInputNames(): readonly string[] {\n    return this.handler.inputNames;\n  }\n  get trainingOutputNames(): readonly string[] {\n    return this.handler.outputNames;\n  }\n\n  get evalInputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalInputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n  get evalOutputNames(): readonly string[] {\n    if (this.hasEvalModel) {\n      return this.handler.evalOutputNames;\n    } else {\n      throw new Error('This training session has no evalModel loaded.');\n    }\n  }\n\n  static async create(trainingOptions: TrainingSessionCreateOptions, sessionOptions?: SessionOptions):\n      Promise<TrainingSession> {\n    const evalModel: string|Uint8Array = trainingOptions.evalModel || '';\n    const optimizerModel: string|Uint8Array = trainingOptions.optimizerModel || '';\n    const options: SessionOptions = sessionOptions || {};\n\n    // resolve backend, update session options with validated EPs, and create session handler\n    const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n    if (backend.createTrainingSessionHandler) {\n      const handler = await backend.createTrainingSessionHandler(\n          trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel,\n          optionsWithValidatedEPs);\n      return new TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);\n    } else {\n      throw new Error(noBackendErrMsg);\n    }\n  }\n\n  /**\n   * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from\n   * the given parameters to SessionHandler.FetchesType and RunOptions.\n   *\n   * @param inputNames the feeds object is checked that they contain all input names in the provided list of input\n   * names.\n   * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output\n   * names.\n   * @param feeds the required input\n   * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object\n   * @param arg2 optional RunOptions object.\n   * @returns\n   */\n  typeNarrowingForRunStep(\n      inputNames: readonly string[], outputNames: readonly string[], feeds: FeedsType, arg1?: FetchesType|RunOptions,\n      arg2?: RunOptions): [SessionHandler.FetchesType, RunOptions] {\n    const fetches: {[name: string]: OnnxValue|null} = {};\n    let options: RunOptions = {};\n    // check inputs\n    if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n      throw new TypeError(\n          '\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n    }\n\n    let isFetchesEmpty = true;\n    // determine which override is being used\n    if (typeof arg1 === 'object') {\n      if (arg1 === null) {\n        throw new TypeError('Unexpected argument[1]: cannot be null.');\n      }\n      if (arg1 instanceof Tensor) {\n        throw new TypeError('\\'fetches\\' cannot be a Tensor');\n      }\n\n      if (Array.isArray(arg1)) {\n        if (arg1.length === 0) {\n          throw new TypeError('\\'fetches\\' cannot be an empty array.');\n        }\n        isFetchesEmpty = false;\n        // output names\n        for (const name of arg1) {\n          if (typeof name !== 'string') {\n            throw new TypeError('\\'fetches\\' must be a string array or an object.');\n          }\n          if (outputNames.indexOf(name) === -1) {\n            throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n          }\n          fetches[name] = null;\n        }\n\n        if (typeof arg2 === 'object' && arg2 !== null) {\n          options = arg2;\n        } else if (typeof arg2 !== 'undefined') {\n          throw new TypeError('\\'options\\' must be an object.');\n        }\n      } else {\n        // decide whether arg1 is fetches or options\n        // if any output name is present and its value is valid OnnxValue, we consider it fetches\n        let isFetches = false;\n        const arg1Keys = Object.getOwnPropertyNames(arg1);\n        for (const name of outputNames) {\n          if (arg1Keys.indexOf(name) !== -1) {\n            const v = (arg1 as InferenceSession.NullableOnnxValueMapType)[name];\n            if (v === null || v instanceof Tensor) {\n              isFetches = true;\n              isFetchesEmpty = false;\n              fetches[name] = v;\n            }\n          }\n        }\n\n        if (isFetches) {\n          if (typeof arg2 === 'object' && arg2 !== null) {\n            options = arg2;\n          } else if (typeof arg2 !== 'undefined') {\n            throw new TypeError('\\'options\\' must be an object.');\n          }\n        } else {\n          options = arg1 as RunOptions;\n        }\n      }\n    } else if (typeof arg1 !== 'undefined') {\n      throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n    }\n\n    // check if all inputs are in feed\n    for (const name of inputNames) {\n      if (typeof feeds[name] === 'undefined') {\n        throw new Error(`input '${name}' is missing in 'feeds'.`);\n      }\n    }\n\n    // if no fetches is specified, we use the full output names list\n    if (isFetchesEmpty) {\n      for (const name of outputNames) {\n        fetches[name] = null;\n      }\n    }\n\n    return [fetches, options];\n  }\n\n  /**\n   * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler\n   * and changes it into a map of Tensors.\n   *\n   * @param results\n   * @returns\n   */\n  convertHandlerReturnTypeToMapOfTensors(results: SessionHandler.ReturnType): ReturnType {\n    const returnValue: {[name: string]: OnnxValue} = {};\n    for (const key in results) {\n      if (Object.hasOwnProperty.call(results, key)) {\n        const result = results[key];\n        if (result instanceof Tensor) {\n          returnValue[key] = result;\n        } else {\n          returnValue[key] = new Tensor(result.type, result.data, result.dims);\n        }\n      }\n    }\n    return returnValue;\n  }\n\n  async lazyResetGrad(): Promise<void> {\n    await this.handler.lazyResetGrad();\n  }\n\n  runTrainStep(feeds: FeedsType, options?: RunOptions): Promise<ReturnType>;\n  runTrainStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions): Promise<ReturnType>;\n  async runTrainStep(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    const [fetches, options] =\n        this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);\n    const results = await this.handler.runTrainStep(feeds, fetches, options);\n    return this.convertHandlerReturnTypeToMapOfTensors(results);\n  }\n\n  async runOptimizerStep(options?: InferenceSession.RunOptions|undefined): Promise<void> {\n    if (this.hasOptimizerModel) {\n      await this.handler.runOptimizerStep(options || {});\n    } else {\n      throw new Error('This TrainingSession has no OptimizerModel loaded.');\n    }\n  }\n\n  runEvalStep(feeds: FeedsType, options?: RunOptions|undefined): Promise<ReturnType>;\n  runEvalStep(feeds: FeedsType, fetches: FetchesType, options?: RunOptions|undefined): Promise<ReturnType>;\n  async runEvalStep(feeds: FeedsType, arg1?: FetchesType|RunOptions, arg2?: RunOptions): Promise<ReturnType> {\n    if (this.hasEvalModel) {\n      const [fetches, options] =\n          this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);\n      const results = await this.handler.runEvalStep(feeds, fetches, options);\n      return this.convertHandlerReturnTypeToMapOfTensors(results);\n    } else {\n      throw new Error('This TrainingSession has no EvalModel loaded.');\n    }\n  }\n\n  async getParametersSize(trainableOnly = true): Promise<number> {\n    return this.handler.getParametersSize(trainableOnly);\n  }\n\n  async loadParametersBuffer(array: Uint8Array, trainableOnly = true): Promise<void> {\n    const paramsSize = await this.getParametersSize(trainableOnly);\n    // checking that the size of the Uint8Array is equivalent to the byte length of a Float32Array of the number\n    // of parameters\n    if (array.length !== 4 * paramsSize) {\n      throw new Error(\n          'Size of the buffer passed into loadParametersBuffer must match the number of parameters in ' +\n          'the model. Please use getParametersSize method to check.');\n    }\n    return this.handler.loadParametersBuffer(array, trainableOnly);\n  }\n\n  async getContiguousParameters(trainableOnly = true): Promise<OnnxValue> {\n    return this.handler.getContiguousParameters(trainableOnly);\n  }\n\n  async release(): Promise<void> {\n    return this.handler.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from './inference-session.js';\nimport {OnnxValue} from './onnx-value.js';\nimport {TrainingSession as TrainingSessionImpl} from './training-session-impl.js';\n\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nexport declare namespace TrainingSession {\n  /**\n   * Either URI file path (string) or Uint8Array containing model or checkpoint information.\n   */\n  type UriOrBuffer = string|Uint8Array;\n}\n\n/**\n * Represent a runtime instance of an ONNX training session,\n * which contains a model that can be trained, and, optionally,\n * an eval and optimizer model.\n */\nexport interface TrainingSession {\n  // #region run()\n\n  /**\n   * Lazily resets the gradients of all trainable parameters to zero. Should happen after the invocation of\n   * runOptimizerStep.\n   */\n  lazyResetGrad(): Promise<void>;\n\n  /**\n   * Run TrainStep asynchronously with the given feeds and options.\n   *\n   * @param feeds - Representation of the model input. See type description of `InferenceSession.InputType` for\n   detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding values.\n   */\n  runTrainStep(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions):\n      Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single train step with the given inputs and options.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model training.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runTrainStep(\n      feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Runs a single optimizer step, which performs weight updates for the trainable parameters using the optimizer model.\n   *\n   * @param options - Optional. A set of options that controls the behavior of model optimizing.\n   */\n  runOptimizerStep(options?: InferenceSession.RunOptions): Promise<void>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(feeds: InferenceSession.FeedsType, options?: InferenceSession.RunOptions):\n      Promise<InferenceSession.ReturnType>;\n\n  /**\n   * Run a single eval step with the given inputs and options using the eval model.\n   *\n   * @param feeds - Representation of the model input.\n   * @param fetches - Representation of the model output.\n   * detail.\n   * @param options - Optional. A set of options that controls the behavior of model eval step.\n   * @returns A promise that resolves to a map, which uses output names as keys and OnnxValue as corresponding\n   values.\n   */\n  runEvalStep(\n      feeds: InferenceSession.FeedsType, fetches: InferenceSession.FetchesType,\n      options?: InferenceSession.RunOptions): Promise<InferenceSession.ReturnType>;\n\n  // #endregion\n\n  // #region copy parameters\n\n  /**\n   * Retrieves the size of all parameters for the training state. Calculates the total number of primitive (datatype of\n   * the parameters) elements of all the parameters in the training state.\n   *\n   * @param trainableOnly - When set to true, the size is calculated for trainable params only. Default value is true.\n   */\n  getParametersSize(trainableOnly: boolean): Promise<number>;\n\n  /**\n   * Copies parameter values from the given buffer to the training state. Currently, only supporting models with\n   * parameters of type Float32.\n   *\n   * @param buffer - A Uint8Array representation of Float32 parameters.\n   * @param trainableOnly - True if trainable parameters only to be modified, false otherwise. Default value is true.\n   */\n  loadParametersBuffer(buffer: Uint8Array, trainableOnly: boolean): Promise<void>;\n\n  /**\n   * Copies the model parameters to a contiguous buffer. Usually used in the context of Federated Learning.\n   * Currently, only supporting models with parameters of type Float32.\n   *\n   * @param trainableOnly - When set to true, only trainable parameters are copied. Trainable parameters are parameters\n   * for which requires_grad is set to true. Default value is true.\n   * @returns A promise that resolves to a Float32 OnnxValue of the requested parameters.\n   */\n  getContiguousParameters(trainableOnly: boolean): Promise<OnnxValue>;\n  // #endregion\n\n  // #region release()\n\n  /**\n   * Release the inference session and the underlying resources.\n   */\n  release(): Promise<void>;\n  // #endregion\n\n  // #region metadata\n\n  /**\n   * Get input names of the loaded training model.\n   */\n  readonly trainingInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded training model.\n   */\n  readonly trainingOutputNames: readonly string[];\n\n  /**\n   * Get input names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalInputNames: readonly string[];\n\n  /**\n   * Get output names of the loaded eval model. Is an empty array if no eval model is loaded.\n   */\n  readonly evalOutputNames: readonly string[];\n\n  // #endregion\n}\n\n/**\n * Represents the optional parameters that can be passed into the TrainingSessionFactory.\n */\nexport interface TrainingSessionCreateOptions {\n  /**\n   * URI or buffer for a .ckpt file that contains the checkpoint for the training model.\n   */\n  checkpointState: TrainingSession.UriOrBuffer;\n  /**\n   * URI or buffer for the .onnx training file.\n   */\n  trainModel: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx optimizer model file.\n   */\n  optimizerModel?: TrainingSession.UriOrBuffer;\n  /**\n   * Optional. URI or buffer for the .onnx eval model file.\n   */\n  evalModel?: TrainingSession.UriOrBuffer;\n}\n\n/**\n * Defines method overload possibilities for creating a TrainingSession.\n */\nexport interface TrainingSessionFactory {\n  // #region create()\n\n  /**\n   * Creates a new TrainingSession and asynchronously loads any models passed in through trainingOptions\n   *\n   * @param trainingOptions specify models and checkpoints to load into the Training Session\n   * @param sessionOptions specify configuration for training session behavior\n   *\n   * @returns Promise that resolves to a TrainingSession object\n   */\n  create(trainingOptions: TrainingSessionCreateOptions, sessionOptions?: InferenceSession.SessionOptions):\n      Promise<TrainingSession>;\n\n  // #endregion\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const TrainingSession: TrainingSessionFactory = TrainingSessionImpl;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript/)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n\nexport * from './backend.js';\nexport * from './env.js';\nexport * from './inference-session.js';\nexport * from './tensor.js';\nexport * from './tensor-conversion.js';\nexport * from './tensor-factory.js';\nexport * from './trace.js';\nexport * from './onnx-model.js';\nexport * from './onnx-value.js';\nexport * from './training-session.js';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, _stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","/**\n * @license\n * Copyright 2009 The Closure Library Authors\n * Copyright 2020 Daniel Wirtz / The long.js Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// WebAssembly optimizations to do native i64 multiplication and divide\nvar wasm = null;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n  ])), {}).exports;\n} catch (e) {\n  // no wasm support :(\n}\n\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nfunction Long(low, high, unsigned) {\n\n  /**\n   * The low 32 bits as a signed value.\n   * @type {number}\n   */\n  this.low = low | 0;\n\n  /**\n   * The high 32 bits as a signed value.\n   * @type {number}\n   */\n  this.high = high | 0;\n\n  /**\n   * Whether unsigned or not.\n   * @type {boolean}\n   */\n  this.unsigned = !!unsigned;\n}\n\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\n\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nfunction isLong(obj) {\n  return (obj && obj[\"__isLong__\"]) === true;\n}\n\n/**\n * @function\n * @param {*} value number\n * @returns {number}\n * @inner\n */\nfunction ctz32(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n}\n\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\nLong.isLong = isLong;\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromInt(value, unsigned) {\n  var obj, cachedObj, cache;\n  if (unsigned) {\n    value >>>= 0;\n    if (cache = (0 <= value && value < 256)) {\n      cachedObj = UINT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, 0, true);\n    if (cache)\n      UINT_CACHE[value] = obj;\n    return obj;\n  } else {\n    value |= 0;\n    if (cache = (-128 <= value && value < 128)) {\n      cachedObj = INT_CACHE[value];\n      if (cachedObj)\n        return cachedObj;\n    }\n    obj = fromBits(value, value < 0 ? -1 : 0, false);\n    if (cache)\n      INT_CACHE[value] = obj;\n    return obj;\n  }\n}\n\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromInt = fromInt;\n\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromNumber(value, unsigned) {\n  if (isNaN(value))\n    return unsigned ? UZERO : ZERO;\n  if (unsigned) {\n    if (value < 0)\n      return UZERO;\n    if (value >= TWO_PWR_64_DBL)\n      return MAX_UNSIGNED_VALUE;\n  } else {\n    if (value <= -TWO_PWR_63_DBL)\n      return MIN_VALUE;\n    if (value + 1 >= TWO_PWR_63_DBL)\n      return MAX_VALUE;\n  }\n  if (value < 0)\n    return fromNumber(-value, unsigned).neg();\n  return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromNumber = fromNumber;\n\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromBits(lowBits, highBits, unsigned) {\n  return new Long(lowBits, highBits, unsigned);\n}\n\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\nLong.fromBits = fromBits;\n\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nfunction fromString(str, unsigned, radix) {\n  if (str.length === 0)\n    throw Error('empty string');\n  if (typeof unsigned === 'number') {\n    // For goog.math.long compatibility\n    radix = unsigned;\n    unsigned = false;\n  } else {\n    unsigned = !!unsigned;\n  }\n  if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n    return unsigned ? UZERO : ZERO;\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n\n  var p;\n  if ((p = str.indexOf('-')) > 0)\n    throw Error('interior hyphen');\n  else if (p === 0) {\n    return fromString(str.substring(1), unsigned, radix).neg();\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 8));\n\n  var result = ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i),\n      value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = fromNumber(pow_dbl(radix, size));\n      result = result.mul(power).add(fromNumber(value));\n    } else {\n      result = result.mul(radixToPower);\n      result = result.add(fromNumber(value));\n    }\n  }\n  result.unsigned = unsigned;\n  return result;\n}\n\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\nLong.fromString = fromString;\n\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nfunction fromValue(val, unsigned) {\n  if (typeof val === 'number')\n    return fromNumber(val, unsigned);\n  if (typeof val === 'string')\n    return fromString(val, unsigned);\n  // Throws for non-objects, converts non-instanceof Long:\n  return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\nLong.fromValue = fromValue;\n\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ZERO = fromInt(0);\n\n/**\n * Signed zero.\n * @type {!Long}\n */\nLong.ZERO = ZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UZERO = fromInt(0, true);\n\n/**\n * Unsigned zero.\n * @type {!Long}\n */\nLong.UZERO = UZERO;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar ONE = fromInt(1);\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar UONE = fromInt(1, true);\n\n/**\n * Unsigned one.\n * @type {!Long}\n */\nLong.UONE = UONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar NEG_ONE = fromInt(-1);\n\n/**\n * Signed negative one.\n * @type {!Long}\n */\nLong.NEG_ONE = NEG_ONE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n/**\n * Maximum signed value.\n * @type {!Long}\n */\nLong.MAX_VALUE = MAX_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n\n/**\n * @type {!Long}\n * @inner\n */\nvar MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n\n/**\n * Minimum signed value.\n * @type {!Long}\n */\nLong.MIN_VALUE = MIN_VALUE;\n\n/**\n * @alias Long.prototype\n * @inner\n */\nvar LongPrototype = Long.prototype;\n\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toInt = function toInt() {\n  return this.unsigned ? this.low >>> 0 : this.low;\n};\n\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.toNumber = function toNumber() {\n  if (this.unsigned)\n    return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n  return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n};\n\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nLongPrototype.toString = function toString(radix) {\n  radix = radix || 10;\n  if (radix < 2 || 36 < radix)\n    throw RangeError('radix');\n  if (this.isZero())\n    return '0';\n  if (this.isNegative()) { // Unsigned Longs are never negative\n    if (this.eq(MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = fromNumber(radix),\n        div = this.div(radixLong),\n        rem1 = div.mul(radixLong).sub(this);\n      return div.toString(radix) + rem1.toInt().toString(radix);\n    } else\n      return '-' + this.neg().toString(radix);\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n    rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower),\n      intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n      digits = intval.toString(radix);\n    rem = remDiv;\n    if (rem.isZero())\n      return digits + result;\n    else {\n      while (digits.length < 6)\n        digits = '0' + digits;\n      result = '' + digits + result;\n    }\n  }\n};\n\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nLongPrototype.getHighBits = function getHighBits() {\n  return this.high;\n};\n\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n  return this.high >>> 0;\n};\n\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nLongPrototype.getLowBits = function getLowBits() {\n  return this.low;\n};\n\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n  return this.low >>> 0;\n};\n\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n  if (this.isNegative()) // Unsigned Longs are never negative\n    return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n  var val = this.high != 0 ? this.high : this.low;\n  for (var bit = 31; bit > 0; bit--)\n    if ((val & (1 << bit)) != 0)\n      break;\n  return this.high != 0 ? bit + 33 : bit + 1;\n};\n\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isZero = function isZero() {\n  return this.high === 0 && this.low === 0;\n};\n\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\nLongPrototype.eqz = LongPrototype.isZero;\n\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isNegative = function isNegative() {\n  return !this.unsigned && this.high < 0;\n};\n\n/**\n * Tests if this Long's value is positive or zero.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isPositive = function isPositive() {\n  return this.unsigned || this.high >= 0;\n};\n\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isOdd = function isOdd() {\n  return (this.low & 1) === 1;\n};\n\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nLongPrototype.isEven = function isEven() {\n  return (this.low & 1) === 0;\n};\n\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.equals = function equals(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n    return false;\n  return this.high === other.high && this.low === other.low;\n};\n\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.eq = LongPrototype.equals;\n\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.notEquals = function notEquals(other) {\n  return !this.eq(/* validates */ other);\n};\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.neq = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ne = LongPrototype.notEquals;\n\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThan = function lessThan(other) {\n  return this.comp(/* validates */ other) < 0;\n};\n\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lt = LongPrototype.lessThan;\n\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n  return this.comp(/* validates */ other) <= 0;\n};\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.le = LongPrototype.lessThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThan = function greaterThan(other) {\n  return this.comp(/* validates */ other) > 0;\n};\n\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gt = LongPrototype.greaterThan;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n  return this.comp(/* validates */ other) >= 0;\n};\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\n\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\n\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.compare = function compare(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  if (this.eq(other))\n    return 0;\n  var thisNeg = this.isNegative(),\n    otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg)\n    return -1;\n  if (!thisNeg && otherNeg)\n    return 1;\n  // At this point the sign bits are the same\n  if (!this.unsigned)\n    return this.sub(other).isNegative() ? -1 : 1;\n  // Both are positive if at least one is unsigned\n  return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n};\n\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nLongPrototype.comp = LongPrototype.compare;\n\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nLongPrototype.negate = function negate() {\n  if (!this.unsigned && this.eq(MIN_VALUE))\n    return MIN_VALUE;\n  return this.not().add(ONE);\n};\n\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\nLongPrototype.neg = LongPrototype.negate;\n\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nLongPrototype.add = function add(addend) {\n  if (!isLong(addend))\n    addend = fromValue(addend);\n\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = addend.high >>> 16;\n  var b32 = addend.high & 0xFFFF;\n  var b16 = addend.low >>> 16;\n  var b00 = addend.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.subtract = function subtract(subtrahend) {\n  if (!isLong(subtrahend))\n    subtrahend = fromValue(subtrahend);\n  return this.add(subtrahend.neg());\n};\n\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nLongPrototype.sub = LongPrototype.subtract;\n\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.multiply = function multiply(multiplier) {\n  if (this.isZero())\n    return this;\n  if (!isLong(multiplier))\n    multiplier = fromValue(multiplier);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = wasm[\"mul\"](this.low,\n      this.high,\n      multiplier.low,\n      multiplier.high);\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (multiplier.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  if (this.eq(MIN_VALUE))\n    return multiplier.isOdd() ? MIN_VALUE : ZERO;\n  if (multiplier.eq(MIN_VALUE))\n    return this.isOdd() ? MIN_VALUE : ZERO;\n\n  if (this.isNegative()) {\n    if (multiplier.isNegative())\n      return this.neg().mul(multiplier.neg());\n    else\n      return this.neg().mul(multiplier).neg();\n  } else if (multiplier.isNegative())\n    return this.mul(multiplier.neg()).neg();\n\n  // If both longs are small, use float multiplication\n  if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\n    return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high >>> 16;\n  var a32 = this.high & 0xFFFF;\n  var a16 = this.low >>> 16;\n  var a00 = this.low & 0xFFFF;\n\n  var b48 = multiplier.high >>> 16;\n  var b32 = multiplier.high & 0xFFFF;\n  var b16 = multiplier.low >>> 16;\n  var b00 = multiplier.low & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n};\n\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nLongPrototype.mul = LongPrototype.multiply;\n\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.divide = function divide(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n  if (divisor.isZero())\n    throw Error('division by zero');\n\n  // use wasm support if present\n  if (wasm) {\n    // guard against signed division overflow: the largest\n    // negative number / -1 would be 1 larger than the largest\n    // positive number, due to two's complement.\n    if (!this.unsigned &&\n      this.high === -0x80000000 &&\n      divisor.low === -1 && divisor.high === -1) {\n      // be consistent with non-wasm code path\n      return this;\n    }\n    var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  if (this.isZero())\n    return this.unsigned ? UZERO : ZERO;\n  var approx, rem, res;\n  if (!this.unsigned) {\n    // This section is only relevant for signed longs and is derived from the\n    // closure library as a whole.\n    if (this.eq(MIN_VALUE)) {\n      if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\n        return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n      else if (divisor.eq(MIN_VALUE))\n        return ONE;\n      else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shr(1);\n        approx = halfThis.div(divisor).shl(1);\n        if (approx.eq(ZERO)) {\n          return divisor.isNegative() ? ONE : NEG_ONE;\n        } else {\n          rem = this.sub(divisor.mul(approx));\n          res = approx.add(rem.div(divisor));\n          return res;\n        }\n      }\n    } else if (divisor.eq(MIN_VALUE))\n      return this.unsigned ? UZERO : ZERO;\n    if (this.isNegative()) {\n      if (divisor.isNegative())\n        return this.neg().div(divisor.neg());\n      return this.neg().div(divisor).neg();\n    } else if (divisor.isNegative())\n      return this.div(divisor.neg()).neg();\n    res = ZERO;\n  } else {\n    // The algorithm below has not been made for unsigned longs. It's therefore\n    // required to take special care of the MSB prior to running it.\n    if (!divisor.unsigned)\n      divisor = divisor.toUnsigned();\n    if (divisor.gt(this))\n      return UZERO;\n    if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n      return UONE;\n    res = UZERO;\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  rem = this;\n  while (rem.gte(divisor)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n      delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n      approxRem = approxRes.mul(divisor);\n    while (approxRem.isNegative() || approxRem.gt(rem)) {\n      approx -= delta;\n      approxRes = fromNumber(approx, this.unsigned);\n      approxRem = approxRes.mul(divisor);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero())\n      approxRes = ONE;\n\n    res = res.add(approxRes);\n    rem = rem.sub(approxRem);\n  }\n  return res;\n};\n\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nLongPrototype.div = LongPrototype.divide;\n\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.modulo = function modulo(divisor) {\n  if (!isLong(divisor))\n    divisor = fromValue(divisor);\n\n  // use wasm support if present\n  if (wasm) {\n    var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(\n      this.low,\n      this.high,\n      divisor.low,\n      divisor.high\n    );\n    return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n  }\n\n  return this.sub(this.div(divisor).mul(divisor));\n};\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.mod = LongPrototype.modulo;\n\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nLongPrototype.rem = LongPrototype.modulo;\n\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nLongPrototype.not = function not() {\n  return fromBits(~this.low, ~this.high, this.unsigned);\n};\n\n/**\n * Returns count leading zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countLeadingZeros = function countLeadingZeros() {\n  return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n};\n\n/**\n * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.clz = LongPrototype.countLeadingZeros;\n\n/**\n * Returns count trailing zeros of this Long.\n * @this {!Long}\n * @returns {!number}\n */\nLongPrototype.countTrailingZeros = function countTrailingZeros() {\n  return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n};\n\n/**\n * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n * @function\n * @param {!Long}\n * @returns {!number}\n */\nLongPrototype.ctz = LongPrototype.countTrailingZeros;\n\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.and = function and(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.or = function or(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n};\n\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nLongPrototype.xor = function xor(other) {\n  if (!isLong(other))\n    other = fromValue(other);\n  return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\n  else\n    return fromBits(0, this.low << (numBits - 32), this.unsigned);\n};\n\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shl = LongPrototype.shiftLeft;\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRight = function shiftRight(numBits) {\n  if (isLong(numBits))\n    numBits = numBits.toInt();\n  if ((numBits &= 63) === 0)\n    return this;\n  else if (numBits < 32)\n    return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\n  else\n    return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n};\n\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr = LongPrototype.shiftRight;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits < 32) return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned);\n  if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n  return fromBits(this.high >>> (numBits - 32), 0, this.unsigned);\n};\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateLeft = function rotateLeft(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotl = LongPrototype.rotateLeft;\n\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotateRight = function rotateRight(numBits) {\n  var b;\n  if (isLong(numBits)) numBits = numBits.toInt();\n  if ((numBits &= 63) === 0) return this;\n  if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  if (numBits < 32) {\n    b = (32 - numBits);\n    return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n  }\n  numBits -= 32;\n  b = (32 - numBits);\n  return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n}\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nLongPrototype.rotr = LongPrototype.rotateRight;\n\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nLongPrototype.toSigned = function toSigned() {\n  if (!this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, false);\n};\n\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nLongPrototype.toUnsigned = function toUnsigned() {\n  if (this.unsigned)\n    return this;\n  return fromBits(this.low, this.high, true);\n};\n\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nLongPrototype.toBytes = function toBytes(le) {\n  return le ? this.toBytesLE() : this.toBytesBE();\n};\n\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nLongPrototype.toBytesLE = function toBytesLE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    lo & 0xff,\n    lo >>> 8 & 0xff,\n    lo >>> 16 & 0xff,\n    lo >>> 24,\n    hi & 0xff,\n    hi >>> 8 & 0xff,\n    hi >>> 16 & 0xff,\n    hi >>> 24\n  ];\n};\n\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nLongPrototype.toBytesBE = function toBytesBE() {\n  var hi = this.high,\n    lo = this.low;\n  return [\n    hi >>> 24,\n    hi >>> 16 & 0xff,\n    hi >>> 8 & 0xff,\n    hi & 0xff,\n    lo >>> 24,\n    lo >>> 16 & 0xff,\n    lo >>> 8 & 0xff,\n    lo & 0xff\n  ];\n};\n\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\n  return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n};\n\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n  return new Long(\n    bytes[0] |\n    bytes[1] << 8 |\n    bytes[2] << 16 |\n    bytes[3] << 24,\n    bytes[4] |\n    bytes[5] << 8 |\n    bytes[6] << 16 |\n    bytes[7] << 24,\n    unsigned\n  );\n};\n\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n  return new Long(\n    bytes[4] << 24 |\n    bytes[5] << 16 |\n    bytes[6] << 8 |\n    bytes[7],\n    bytes[0] << 24 |\n    bytes[1] << 16 |\n    bytes[2] << 8 |\n    bytes[3],\n    unsigned\n  );\n};\n\nexport default Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((_d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const enum EncoderUsage {\n  Default = 0,\n  UploadOnly,\n  Download4BytesAsFloat32,\n}\n/* eslint-enable @typescript-eslint/naming-convention */\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((_value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {EncoderUsage} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, EncoderUsage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, EncoderUsage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, EncoderUsage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = EncoderUsage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, EncoderUsage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: EncoderUsage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private key: string;\n  public get cacheKey(): string {\n    if (!this.key) {\n      this.key =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this.key;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (_v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (_handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((_s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((_s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (_handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (_handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (_handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, _name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (_inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((_val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (_inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (_inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((_v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((_v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (_handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (_d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((_s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(_shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((_s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder, EncoderUsage} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: EncoderUsage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === EncoderUsage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === EncoderUsage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(_dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder, EncoderUsage} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: EncoderUsage = EncoderUsage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === EncoderUsage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      if (!env.webgl.context) {\n        Object.defineProperty(env.webgl, 'context', {value: this.glContext.gl});\n      }\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((_output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n              nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'node:fs/promises';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await readFile(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, InferenceSessionHandler, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements InferenceSessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, InferenceSessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler-inference';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createInferenceSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","export const readFile = undefined;export const readFileSync = undefined;export const createReadStream = undefined;","export const join = undefined;","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar f=moduleArg,k,l;f.ready=new Promise((a,b)=>{k=a;l=b});var aa=Object.assign({},f),ba=\"./this.program\",ca=\"object\"==typeof window,q=\"function\"==typeof importScripts,da=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",x,z,A;\nif(da){var fs=require(\"fs\"),B=require(\"path\");v=q?B.dirname(v)+\"/\":__dirname+\"/\";x=(a,b)=>{a=C(a)?new URL(a):B.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};A=a=>{a=x(a,!0);a.buffer||(a=new Uint8Array(a));return a};z=(a,b,c,e=!0)=>{a=C(a)?new URL(a):B.normalize(a);fs.readFile(a,e?void 0:\"utf8\",(g,h)=>{g?c(g):b(e?h.buffer:h)})};!f.thisProgram&&1<process.argv.length&&(ba=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);f.inspect=()=>\"[Emscripten Module object]\"}else if(ca||q)q?v=\nself.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",x=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},q&&(A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),z=(a,b,c)=>{var e=new XMLHttpRequest;e.open(\"GET\",a,!0);e.responseType=\n\"arraybuffer\";e.onload=()=>{200==e.status||0==e.status&&e.response?b(e.response):c()};e.onerror=c;e.send(null)};var ea=console.log.bind(console),D=console.error.bind(console);Object.assign(f,aa);aa=null;\"object\"!=typeof WebAssembly&&E(\"no native wasm support detected\");var F,fa=!1,G,H,I,J,ha;\nfunction ia(){var a=F.buffer;f.HEAP8=G=new Int8Array(a);f.HEAP16=new Int16Array(a);f.HEAPU8=H=new Uint8Array(a);f.HEAPU16=new Uint16Array(a);f.HEAP32=I=new Int32Array(a);f.HEAPU32=J=new Uint32Array(a);f.HEAPF32=new Float32Array(a);f.HEAPF64=ha=new Float64Array(a)}var K=[],L=[],ja=[],M=0,N=null,O=null;function E(a){a=\"Aborted(\"+a+\")\";D(a);fa=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");l(a);throw a;}\nvar ka=a=>a.startsWith(\"data:application/octet-stream;base64,\"),C=a=>a.startsWith(\"file://\"),P;P=\"ort-wasm.wasm\";if(!ka(P)){var la=P;P=f.locateFile?f.locateFile(la,v):v+la}function ma(a){if(A)return A(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction na(a){if(ca||q){if(\"function\"==typeof fetch&&!C(a))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ma(a));if(z)return new Promise((b,c)=>{z(a,e=>b(new Uint8Array(e)),c)})}return Promise.resolve().then(()=>ma(a))}function oa(a,b,c){return na(a).then(e=>WebAssembly.instantiate(e,b)).then(e=>e).then(c,e=>{D(`failed to asynchronously prepare wasm: ${e}`);E(e)})}\nfunction pa(a,b){var c=P;return\"function\"!=typeof WebAssembly.instantiateStreaming||ka(c)||C(c)||da||\"function\"!=typeof fetch?oa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(e=>WebAssembly.instantiateStreaming(e,a).then(b,function(g){D(`wasm streaming compile failed: ${g}`);D(\"falling back to ArrayBuffer instantiation\");return oa(c,a,b)}))}\nvar Q,qa={920016:(a,b,c,e)=>{if(\"undefined\"==typeof f||!f.za)return 1;a=R(a>>>0);a.startsWith(\"./\")&&(a=a.substring(2));a=f.za.get(a);if(!a)return 2;b>>>=0;c>>>=0;if(b+c>a.byteLength)return 3;try{return H.set(a.subarray(b,b+c),e>>>0>>>0),0}catch{return 4}}};function ra(a){this.xa=a-24;this.Ha=function(b){J[this.xa+4>>>2>>>0]=b};this.Ga=function(b){J[this.xa+8>>>2>>>0]=b};this.Aa=function(b,c){this.Fa();this.Ha(b);this.Ga(c)};this.Fa=function(){J[this.xa+16>>>2>>>0]=0}}\nvar sa=0,ta=0,ua=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,va=(a,b,c)=>{b>>>=0;var e=b+c;for(c=b;a[c]&&!(c>=e);)++c;if(16<c-b&&a.buffer&&ua)return ua.decode(a.subarray(b,c));for(e=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))e+=String.fromCharCode((g&31)<<6|h);else{var m=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|m:(g&7)<<18|h<<12|m<<6|a[b++]&63;65536>g?e+=String.fromCharCode(g):(g-=65536,e+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else e+=String.fromCharCode(g)}return e},\nR=(a,b)=>(a>>>=0)?va(H,a,b):\"\",S=a=>{for(var b=0,c=0;c<a.length;++c){var e=a.charCodeAt(c);127>=e?b++:2047>=e?b+=2:55296<=e&&57343>=e?(b+=4,++c):b+=3}return b},T=(a,b,c,e)=>{c>>>=0;if(!(0<e))return 0;var g=c;e=c+e-1;for(var h=0;h<a.length;++h){var m=a.charCodeAt(h);if(55296<=m&&57343>=m){var r=a.charCodeAt(++h);m=65536+((m&1023)<<10)|r&1023}if(127>=m){if(c>=e)break;b[c++>>>0]=m}else{if(2047>=m){if(c+1>=e)break;b[c++>>>0]=192|m>>6}else{if(65535>=m){if(c+2>=e)break;b[c++>>>0]=224|m>>12}else{if(c+3>=\ne)break;b[c++>>>0]=240|m>>18;b[c++>>>0]=128|m>>12&63}b[c++>>>0]=128|m>>6&63}b[c++>>>0]=128|m&63}}b[c>>>0]=0;return c-g},U=a=>0===a%4&&(0!==a%100||0===a%400),wa=[0,31,60,91,121,152,182,213,244,274,305,335],xa=[0,31,59,90,120,151,181,212,243,273,304,334],Ca=a=>{var b=S(a)+1,c=Ba(b);c&&T(a,H,c,b);return c},V=[],W={},Da=()=>{if(!X){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\n\"_\")+\".UTF-8\",_:ba||\"./this.program\"},b;for(b in W)void 0===W[b]?delete a[b]:a[b]=W[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);X=c}return X},X,Ea=[null,[],[]],Fa=[31,29,31,30,31,30,31,31,30,31,30,31],Ga=[31,28,31,30,31,30,31,31,30,31,30,31];function Ha(a){var b=Array(S(a)+1);T(a,b,0,b.length);return b}\nfunction Ia(a,b,c,e){function g(d,n,p){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<n;)d=p[0]+d;return d}function h(d,n){return g(d,n,\"0\")}function m(d,n){function p(ya){return 0>ya?-1:0<ya?1:0}var y;0===(y=p(d.getFullYear()-n.getFullYear()))&&0===(y=p(d.getMonth()-n.getMonth()))&&(y=p(d.getDate()-n.getDate()));return y}function r(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var n=d.ta;for(d=new Date((new Date(d.ua+1900,0,1)).getTime());0<n;){var p=d.getMonth(),y=(U(d.getFullYear())?Fa:Ga)[p];if(n>y-d.getDate())n-=y-d.getDate()+1,d.setDate(1),11>p?d.setMonth(p+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+n);break}}p=new Date(d.getFullYear()+1,0,4);n=r(new Date(d.getFullYear(),\n0,4));p=r(p);return 0>=m(n,d)?0>=m(p,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;e>>>=0;var t=J[e+40>>>2>>>0];e={Da:I[e>>>2>>>0],Ca:I[e+4>>>2>>>0],va:I[e+8>>>2>>>0],ya:I[e+12>>>2>>>0],wa:I[e+16>>>2>>>0],ua:I[e+20>>>2>>>0],oa:I[e+24>>>2>>>0],ta:I[e+28>>>2>>>0],Ia:I[e+32>>>2>>>0],Ba:I[e+36>>>2>>>0],Ea:t?R(t):\"\"};c=R(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\n\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in t)c=c.replace(new RegExp(u,\"g\"),t[u]);var za=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),Aa=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":d=>za[d.oa].substring(0,3),\"%A\":d=>za[d.oa],\n\"%b\":d=>Aa[d.wa].substring(0,3),\"%B\":d=>Aa[d.wa],\"%C\":d=>h((d.ua+1900)/100|0,2),\"%d\":d=>h(d.ya,2),\"%e\":d=>g(d.ya,2,\" \"),\"%g\":d=>w(d).toString().substring(2),\"%G\":d=>w(d),\"%H\":d=>h(d.va,2),\"%I\":d=>{d=d.va;0==d?d=12:12<d&&(d-=12);return h(d,2)},\"%j\":d=>{for(var n=0,p=0;p<=d.wa-1;n+=(U(d.ua+1900)?Fa:Ga)[p++]);return h(d.ya+n,3)},\"%m\":d=>h(d.wa+1,2),\"%M\":d=>h(d.Ca,2),\"%n\":()=>\"\\n\",\"%p\":d=>0<=d.va&&12>d.va?\"AM\":\"PM\",\"%S\":d=>h(d.Da,2),\"%t\":()=>\"\\t\",\"%u\":d=>d.oa||7,\"%U\":d=>h(Math.floor((d.ta+7-d.oa)/7),\n2),\"%V\":d=>{var n=Math.floor((d.ta+7-(d.oa+6)%7)/7);2>=(d.oa+371-d.ta-2)%7&&n++;if(n)53==n&&(p=(d.oa+371-d.ta)%7,4==p||3==p&&U(d.ua)||(n=1));else{n=52;var p=(d.oa+7-d.ta-1)%7;(4==p||5==p&&U(d.ua%400-1))&&n++}return h(n,2)},\"%w\":d=>d.oa,\"%W\":d=>h(Math.floor((d.ta+7-(d.oa+6)%7)/7),2),\"%y\":d=>(d.ua+1900).toString().substring(2),\"%Y\":d=>d.ua+1900,\"%z\":d=>{d=d.Ba;var n=0<=d;d=Math.abs(d)/60;return(n?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":d=>d.Ea,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");\nfor(u in t)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),t[u](e)));c=c.replace(/\\0\\0/g,\"%\");u=Ha(c);if(u.length>b)return 0;G.set(u,a>>>0);return u.length-1}\nvar La={a:function(a,b,c){a>>>=0;(new ra(a)).Aa(b>>>0,c>>>0);sa=a;ta++;throw sa;},e:function(){return 0},H:function(){},x:function(){},z:function(){},J:function(){return 0},F:function(){},A:function(){},E:function(){},g:function(){},y:function(){},v:function(){},G:function(){},w:function(){},k:()=>1,n:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);I[c>>>2>>>0]=a.getUTCSeconds();I[c+4>>>2>>>0]=a.getUTCMinutes();I[c+8>>>2>>>0]=a.getUTCHours();I[c+12>>>\n2>>>0]=a.getUTCDate();I[c+16>>>2>>>0]=a.getUTCMonth();I[c+20>>>2>>>0]=a.getUTCFullYear()-1900;I[c+24>>>2>>>0]=a.getUTCDay();I[c+28>>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},o:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);I[c>>>2>>>0]=a.getSeconds();I[c+4>>>2>>>0]=a.getMinutes();I[c+8>>>2>>>0]=a.getHours();I[c+12>>>2>>>0]=a.getDate();I[c+16>>>2>>>0]=a.getMonth();I[c+20>>>2>>>0]=a.getFullYear()-1900;I[c+24>>>2>>>0]=a.getDay();\nI[c+28>>>2>>>0]=(U(a.getFullYear())?wa:xa)[a.getMonth()]+a.getDate()-1|0;I[c+36>>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var e=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();I[c+32>>>2>>>0]=(b!=e&&a.getTimezoneOffset()==Math.min(e,b))|0},p:function(a){a>>>=0;var b=new Date(I[a+20>>>2>>>0]+1900,I[a+16>>>2>>>0],I[a+12>>>2>>>0],I[a+8>>>2>>>0],I[a+4>>>2>>>0],I[a>>>2>>>0],0),c=I[a+32>>>2>>>0],e=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),\nh=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),m=Math.min(h,g);0>c?I[a+32>>>2>>>0]=Number(g!=h&&m==e):0<c!=(m==e)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?m:g)-e)));I[a+24>>>2>>>0]=b.getDay();I[a+28>>>2>>>0]=(U(b.getFullYear())?wa:xa)[b.getMonth()]+b.getDate()-1|0;I[a>>>2>>>0]=b.getSeconds();I[a+4>>>2>>>0]=b.getMinutes();I[a+8>>>2>>>0]=b.getHours();I[a+12>>>2>>>0]=b.getDate();I[a+16>>>2>>>0]=b.getMonth();I[a+20>>>2>>>0]=b.getYear();a=b.getTime();isNaN(a)?(I[Ja()>>>2>>>0]=61,a=-1):\na/=1E3;return Ka((Q=a,1<=+Math.abs(Q)?0<Q?+Math.floor(Q/4294967296)>>>0:~~+Math.ceil((Q-+(~~Q>>>0))/4294967296)>>>0:0)),a>>>0},l:function(){return-52},m:function(){},t:function(a,b,c){function e(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}c>>>=0;var g=(new Date).getFullYear(),h=new Date(g,0,1),m=new Date(g,6,1);g=h.getTimezoneOffset();var r=m.getTimezoneOffset();J[a>>>0>>>2>>>0]=60*Math.max(g,r);I[b>>>0>>>2>>>0]=Number(g!=r);a=e(h);b=e(m);a=Ca(a);b=Ca(b);r<g?(J[c>>>2>>>0]=\na,J[c+4>>>2>>>0]=b):(J[c>>>2>>>0]=b,J[c+4>>>2>>>0]=a)},d:()=>{E(\"\")},B:function(a,b,c){a>>>=0;b>>>=0;c>>>=0;V.length=0;for(var e;e=H[b++>>>0];){var g=105!=e;g&=112!=e;c+=g&&c%8?4:0;V.push(112==e?J[c>>>2>>>0]:105==e?I[c>>>2>>>0]:ha[c>>>3>>>0]);c+=g?8:4}return qa[a].apply(null,V)},h:()=>Date.now(),u:function(){return 4294901760},b:()=>performance.now(),I:function(a,b,c){b>>>=0;return H.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},s:function(a){a>>>=0;var b=H.length;if(4294901760<a)return!1;for(var c=\n1;4>=c;c*=2){var e=b*(1+.2/c);e=Math.min(e,a+100663296);var g=Math;e=Math.max(a,e);a:{g=(g.min.call(g,4294901760,e+(65536-e%65536)%65536)-F.buffer.byteLength+65535)/65536;try{F.grow(g);ia();var h=1;break a}catch(m){}h=void 0}if(h)return!0}return!1},C:function(a,b){a>>>=0;b>>>=0;var c=0;Da().forEach((e,g)=>{var h=b+c;g=J[a+4*g>>>2>>>0]=h;for(h=0;h<e.length;++h)G[g++>>>0>>>0]=e.charCodeAt(h);G[g>>>0>>>0]=0;c+=e.length+1});return 0},D:function(a,b){a>>>=0;b>>>=0;var c=Da();J[a>>>2>>>0]=c.length;var e=\n0;c.forEach(g=>e+=g.length+1);J[b>>>2>>>0]=e;return 0},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(a,b,c,e){b>>>=0;c>>>=0;e>>>=0;for(var g=0,h=0;h<c;h++){var m=J[b>>>2>>>0],r=J[b+4>>>2>>>0];b+=8;for(var w=0;w<r;w++){var t=H[m+w>>>0],u=Ea[a];0===t||10===t?((1===a?ea:D)(va(u,0)),u.length=0):u.push(t)}g+=r}J[e>>>2>>>0]=g;return 0},r:Ia,c:function(a,b,c,e){return Ia(a>>>0,b>>>0,c>>>0,e>>>0)}},Y=function(){function a(c){Y=c.exports;Y=Ma();F=Y.K;ia();L.unshift(Y.L);M--;0==M&&(null!==\nN&&(clearInterval(N),N=null),O&&(c=O,O=null,c()));return Y}var b={a:La};M++;if(f.instantiateWasm)try{return f.instantiateWasm(b,a)}catch(c){D(`Module.instantiateWasm callback failed with error: ${c}`),l(c)}pa(b,function(c){a(c.instance)}).catch(l);return{}}();f._OrtInit=(a,b)=>(f._OrtInit=Y.M)(a,b);f._OrtGetLastError=(a,b)=>(f._OrtGetLastError=Y.N)(a,b);f._OrtCreateSessionOptions=(a,b,c,e,g,h,m,r,w,t)=>(f._OrtCreateSessionOptions=Y.O)(a,b,c,e,g,h,m,r,w,t);\nf._OrtAppendExecutionProvider=(a,b)=>(f._OrtAppendExecutionProvider=Y.P)(a,b);f._OrtAddFreeDimensionOverride=(a,b,c)=>(f._OrtAddFreeDimensionOverride=Y.Q)(a,b,c);f._OrtAddSessionConfigEntry=(a,b,c)=>(f._OrtAddSessionConfigEntry=Y.R)(a,b,c);f._OrtReleaseSessionOptions=a=>(f._OrtReleaseSessionOptions=Y.S)(a);f._OrtCreateSession=(a,b,c)=>(f._OrtCreateSession=Y.T)(a,b,c);f._OrtReleaseSession=a=>(f._OrtReleaseSession=Y.U)(a);f._OrtGetInputOutputCount=(a,b,c)=>(f._OrtGetInputOutputCount=Y.V)(a,b,c);\nf._OrtGetInputName=(a,b)=>(f._OrtGetInputName=Y.W)(a,b);f._OrtGetOutputName=(a,b)=>(f._OrtGetOutputName=Y.X)(a,b);f._OrtFree=a=>(f._OrtFree=Y.Y)(a);f._OrtCreateTensor=(a,b,c,e,g,h)=>(f._OrtCreateTensor=Y.Z)(a,b,c,e,g,h);f._OrtGetTensorData=(a,b,c,e,g)=>(f._OrtGetTensorData=Y._)(a,b,c,e,g);f._OrtReleaseTensor=a=>(f._OrtReleaseTensor=Y.$)(a);f._OrtCreateRunOptions=(a,b,c,e)=>(f._OrtCreateRunOptions=Y.aa)(a,b,c,e);f._OrtAddRunConfigEntry=(a,b,c)=>(f._OrtAddRunConfigEntry=Y.ba)(a,b,c);\nf._OrtReleaseRunOptions=a=>(f._OrtReleaseRunOptions=Y.ca)(a);f._OrtCreateBinding=a=>(f._OrtCreateBinding=Y.da)(a);f._OrtBindInput=(a,b,c)=>(f._OrtBindInput=Y.ea)(a,b,c);f._OrtBindOutput=(a,b,c,e)=>(f._OrtBindOutput=Y.fa)(a,b,c,e);f._OrtClearBoundOutputs=a=>(f._OrtClearBoundOutputs=Y.ga)(a);f._OrtReleaseBinding=a=>(f._OrtReleaseBinding=Y.ha)(a);f._OrtRunWithBinding=(a,b,c,e,g)=>(f._OrtRunWithBinding=Y.ia)(a,b,c,e,g);f._OrtRun=(a,b,c,e,g,h,m,r)=>(f._OrtRun=Y.ja)(a,b,c,e,g,h,m,r);\nf._OrtEndProfiling=a=>(f._OrtEndProfiling=Y.ka)(a);var Ja=()=>(Ja=Y.la)(),Ba=f._malloc=a=>(Ba=f._malloc=Y.ma)(a);f._free=a=>(f._free=Y.na)(a);var Ka=a=>(Ka=Y.pa)(a),Na=()=>(Na=Y.qa)(),Oa=a=>(Oa=Y.ra)(a),Pa=a=>(Pa=Y.sa)(a);function Ma(){var a=Y;a=Object.assign({},a);var b=e=>()=>e()>>>0,c=e=>g=>e(g)>>>0;a.la=b(a.la);a.ma=c(a.ma);a.qa=b(a.qa);a.sa=c(a.sa);return a}f.stackAlloc=Pa;f.stackSave=Na;f.stackRestore=Oa;f.UTF8ToString=R;f.stringToUTF8=(a,b,c)=>T(a,H,b,c);f.lengthBytesUTF8=S;var Z;\nO=function Qa(){Z||Ra();Z||(O=Qa)};function Ra(){if(!(0<M)){if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;){var a=f.preRun.shift();K.unshift(a)}for(;0<K.length;)K.shift()(f);if(!(0<M||Z||(Z=!0,f.calledRun=!0,fa))){for(;0<L.length;)L.shift()(f);for(k(f);0<ja.length;)ja.shift()(f)}}}Ra();\n\n\n  return moduleArg.ready\n}\n);\n})();\n;\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n","","","export const cpus = undefined;","\nvar ortWasmThreaded = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nfunction aa(){e.buffer!=l.buffer&&m();return l}function n(){e.buffer!=l.buffer&&m();return ba}function p(){e.buffer!=l.buffer&&m();return ca}function r(){e.buffer!=l.buffer&&m();return da}function ea(){e.buffer!=l.buffer&&m();return fa}var v=moduleArg,ha,x;v.ready=new Promise((a,b)=>{ha=a;x=b});\nvar ia=Object.assign({},v),ja=\"./this.program\",z=(a,b)=>{throw b;},ka=\"object\"==typeof window,A=\"function\"==typeof importScripts,B=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,D=v.ENVIRONMENT_IS_PTHREAD||!1,E=\"\";function la(a){return v.locateFile?v.locateFile(a,E):E+a}var ma,G,H;\nif(B){var fs=require(\"fs\"),na=require(\"path\");E=A?na.dirname(E)+\"/\":__dirname+\"/\";ma=(b,c)=>{b=I(b)?new URL(b):na.normalize(b);return fs.readFileSync(b,c?void 0:\"utf8\")};H=b=>{b=ma(b,!0);b.buffer||(b=new Uint8Array(b));return b};G=(b,c,d,g=!0)=>{b=I(b)?new URL(b):na.normalize(b);fs.readFile(b,g?void 0:\"utf8\",(h,k)=>{h?d(h):c(g?k.buffer:k)})};!v.thisProgram&&1<process.argv.length&&(ja=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);z=(b,c)=>{process.exitCode=b;throw c;};v.inspect=()=>\"[Emscripten Module object]\";\nlet a;try{a=require(\"worker_threads\")}catch(b){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),b;}global.Worker=a.Worker}else if(ka||A)A?E=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(E=document.currentScript.src),(typeof _scriptDir !== \"undefined\" && _scriptDir)&&(E=_scriptDir),0!==E.indexOf(\"blob:\")?E=E.substr(0,E.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):E=\"\",B||(ma=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);\nreturn b.responseText},A&&(H=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),G=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)});B&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var oa=console.log.bind(console),pa=console.error.bind(console);\nB&&(oa=(...a)=>fs.writeSync(1,a.join(\" \")+\"\\n\"),pa=(...a)=>fs.writeSync(2,a.join(\" \")+\"\\n\"));var qa=oa,J=pa;Object.assign(v,ia);ia=null;\"object\"!=typeof WebAssembly&&ra(\"no native wasm support detected\");var e,sa,K=!1,L,l,ba,ca,da,fa;function m(){var a=e.buffer;v.HEAP8=l=new Int8Array(a);v.HEAP16=new Int16Array(a);v.HEAPU8=ba=new Uint8Array(a);v.HEAPU16=new Uint16Array(a);v.HEAP32=ca=new Int32Array(a);v.HEAPU32=da=new Uint32Array(a);v.HEAPF32=new Float32Array(a);v.HEAPF64=fa=new Float64Array(a)}\nvar ta=16777216;\nif(D)e=v.wasmMemory;else if(v.wasmMemory)e=v.wasmMemory;else if(e=new WebAssembly.Memory({initial:ta/65536,maximum:65536,shared:!0}),!(e.buffer instanceof SharedArrayBuffer))throw J(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),B&&J(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");\nm();ta=e.buffer.byteLength;var ua=[],va=[],wa=[],M=0,xa=null,N=null;function ya(){M--;if(0==M&&(null!==xa&&(clearInterval(xa),xa=null),N)){var a=N;N=null;a()}}function ra(a){a=\"Aborted(\"+a+\")\";J(a);K=!0;L=1;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");x(a);throw a;}var za=a=>a.startsWith(\"data:application/octet-stream;base64,\"),I=a=>a.startsWith(\"file://\"),O;O=\"ort-wasm-threaded.wasm\";za(O)||(O=la(O));\nfunction Aa(a){if(H)return H(a);throw\"both async and sync fetching of the wasm failed\";}function Ba(a){if(ka||A){if(\"function\"==typeof fetch&&!I(a))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>Aa(a));if(G)return new Promise((b,c)=>{G(a,d=>b(new Uint8Array(d)),c)})}return Promise.resolve().then(()=>Aa(a))}\nfunction Ca(a,b,c){return Ba(a).then(d=>WebAssembly.instantiate(d,b)).then(d=>d).then(c,d=>{J(`failed to asynchronously prepare wasm: ${d}`);ra(d)})}function Da(a,b){var c=O;return\"function\"!=typeof WebAssembly.instantiateStreaming||za(c)||I(c)||B||\"function\"!=typeof fetch?Ca(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(d=>WebAssembly.instantiateStreaming(d,a).then(b,function(g){J(`wasm streaming compile failed: ${g}`);J(\"falling back to ArrayBuffer instantiation\");return Ca(c,a,b)}))}\nvar P,Ea={921388:(a,b,c,d)=>{if(\"undefined\"==typeof v||!v.cb)return 1;a=Q(a>>>0);a.startsWith(\"./\")&&(a=a.substring(2));a=v.cb.get(a);if(!a)return 2;b>>>=0;c>>>=0;d>>>=0;if(b+c>a.byteLength)return 3;try{return n().set(a.subarray(b,b+c),d>>>0),0}catch{return 4}}};function R(a){this.name=\"ExitStatus\";this.message=`Program terminated with exit(${a})`;this.status=a}\nvar Fa=a=>{a.terminate();a.onmessage=()=>{}},Ha=a=>{0==S.Pa.length&&(Ga(),S.Ya(S.Pa[0]));var b=S.Pa.pop();if(!b)return 6;S.Qa.push(b);S.Ma[a.Oa]=b;b.Oa=a.Oa;var c={cmd:\"run\",start_routine:a.kb,arg:a.hb,pthread_ptr:a.Oa};B&&b.unref();b.postMessage(c,a.qb);return 0},T=0,Ia=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,Ja=(a,b,c)=>{b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&Ia)return Ia.decode(a.buffer instanceof SharedArrayBuffer?a.slice(b,c):a.subarray(b,c));\nfor(d=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))d+=String.fromCharCode((g&31)<<6|h);else{var k=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|k:(g&7)<<18|h<<12|k<<6|a[b++]&63;65536>g?d+=String.fromCharCode(g):(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else d+=String.fromCharCode(g)}return d},Q=(a,b)=>(a>>>=0)?Ja(n(),a,b):\"\",La=a=>{var b=Ka();a=a();U(b);return a};\nfunction V(a,b){var c=arguments.length-2,d=arguments;return La(()=>{for(var g=Ma(8*c),h=g>>>3,k=0;k<c;k++){var t=d[2+k];ea()[h+k>>>0]=t}return Na(a,c,g,b)})}function Oa(a){if(D)return V(0,1,a);L=a;0<T||(S.lb(),v.onExit?.(a),K=!0);z(a,new R(a))}var Qa=a=>{L=a;if(D)throw Pa(a),\"unwind\";Oa(a)};function Ra(){for(var a=v.numThreads;a--;)Ga();ua.unshift(()=>{M++;Sa(()=>ya())})}function Ga(){var a=la(\"ort-wasm-threaded.worker.js\");a=new Worker(a);S.Pa.push(a)}\nfunction Sa(a){D?a():Promise.all(S.Pa.map(S.Ya)).then(a)}\nvar S={Pa:[],Qa:[],bb:[],Ma:{},Wa(){D?(S.receiveObjectTransfer=S.jb,S.threadInitTLS=S.ab,S.setExitStatus=S.$a):Ra()},$a:a=>L=a,tb:[\"$terminateWorker\"],lb:()=>{for(var a of S.Qa)Fa(a);for(a of S.Pa)Fa(a);S.Pa=[];S.Qa=[];S.Ma=[]},Za:a=>{var b=a.Oa;delete S.Ma[b];S.Pa.push(a);S.Qa.splice(S.Qa.indexOf(a),1);a.Oa=0;Ta(b)},jb(){},ab(){S.bb.forEach(a=>a())},Ya:a=>new Promise(b=>{a.onmessage=h=>{h=h.data;var k=h.cmd;if(h.targetThread&&h.targetThread!=W()){var t=S.Ma[h.targetThread];t?t.postMessage(h,h.transferList):\nJ(`Internal error! Worker sent a message \"${k}\" to target pthread ${h.targetThread}, but that thread no longer exists!`)}else if(\"checkMailbox\"===k)X();else if(\"spawnThread\"===k)Ha(h);else if(\"cleanupThread\"===k)S.Za(S.Ma[h.thread]);else if(\"killThread\"===k)h=h.thread,k=S.Ma[h],delete S.Ma[h],Fa(k),Ta(h),S.Qa.splice(S.Qa.indexOf(k),1),k.Oa=0;else if(\"cancelThread\"===k)S.Ma[h.thread].postMessage({cmd:\"cancel\"});else if(\"loaded\"===k)a.loaded=!0,B&&!a.Oa&&a.unref(),b(a);else if(\"alert\"===k)alert(`Thread ${h.threadId}: ${h.text}`);\nelse if(\"setimmediate\"===h.target)a.postMessage(h);else if(\"callHandler\"===k)v[h.handler](...h.args);else k&&J(`worker sent an unknown command ${k}`)};a.onerror=h=>{J(`${\"worker sent an error!\"} ${h.filename}:${h.lineno}: ${h.message}`);throw h;};B&&(a.on(\"message\",h=>a.onmessage({data:h})),a.on(\"error\",h=>a.onerror(h)));var c=[],d=[\"onExit\"],g;for(g of d)v.hasOwnProperty(g)&&c.push(g);a.postMessage({cmd:\"load\",handlers:c,urlOrBlob:v.mainScriptUrlOrBlob||_scriptDir,wasmMemory:e,wasmModule:sa})})};\nv.PThread=S;var Ua=a=>{for(;0<a.length;)a.shift()(v)};v.establishStackSpace=()=>{var a=W(),b=r()[a+52>>>2>>>0];a=r()[a+56>>>2>>>0];Va(b,b-a);U(b)};function Pa(a){if(D)return V(1,0,a);Qa(a)}var Wa=[],Xa;v.invokeEntryPoint=(a,b)=>{var c=Wa[a];c||(a>=Wa.length&&(Wa.length=a+1),Wa[a]=c=Xa.get(a));a=c(b);0<T?S.$a(a):Ya(a)};\nfunction Za(a){this.Va=a-24;this.gb=function(b){r()[this.Va+4>>>2>>>0]=b};this.fb=function(b){r()[this.Va+8>>>2>>>0]=b};this.Wa=function(b,c){this.eb();this.gb(b);this.fb(c)};this.eb=function(){r()[this.Va+16>>>2>>>0]=0}}var $a=0,ab=0;function bb(a,b,c,d){return D?V(2,1,a,b,c,d):cb(a,b,c,d)}\nfunction cb(a,b,c,d){a>>>=0;b>>>=0;c>>>=0;d>>>=0;if(\"undefined\"==typeof SharedArrayBuffer)return J(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var g=[];if(D&&0===g.length)return bb(a,b,c,d);a={kb:c,Oa:a,hb:d,qb:g};return D?(a.sb=\"spawnThread\",postMessage(a,g),0):Ha(a)}function db(a,b,c){return D?V(3,1,a,b,c):0}function eb(a,b){if(D)return V(4,1,a,b)}\nvar fb=a=>{for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b},gb=(a,b,c,d)=>{c>>>=0;if(!(0<d))return 0;var g=c;d=c+d-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var t=a.charCodeAt(++h);k=65536+((k&1023)<<10)|t&1023}if(127>=k){if(c>=d)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=d)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++>>>0]=224|k>>12}else{if(c+3>=d)break;b[c++>>>0]=240|k>>\n18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-g},hb=(a,b,c)=>gb(a,n(),b,c);function ib(a,b){if(D)return V(5,1,a,b)}function jb(a,b,c){if(D)return V(6,1,a,b,c)}function kb(a,b,c){return D?V(7,1,a,b,c):0}function lb(a,b){if(D)return V(8,1,a,b)}function mb(a,b,c){if(D)return V(9,1,a,b,c)}function nb(a,b,c,d){if(D)return V(10,1,a,b,c,d)}function ob(a,b,c,d){if(D)return V(11,1,a,b,c,d)}function pb(a,b,c,d){if(D)return V(12,1,a,b,c,d)}\nfunction qb(a){if(D)return V(13,1,a)}function rb(a,b){if(D)return V(14,1,a,b)}function sb(a,b,c){if(D)return V(15,1,a,b,c)}function tb(a){a>>>=0;\"function\"===typeof Atomics.rb&&(Atomics.rb(p(),a>>>2,a).value.then(X),a+=128,Atomics.store(p(),a>>>2,1))}v.__emscripten_thread_mailbox_await=tb;var X=()=>{var a=W();if(a&&(tb(a),a=ub,!K))try{if(a(),!(0<T))try{D?Ya(L):Qa(L)}catch(b){b instanceof R||\"unwind\"==b||z(1,b)}}catch(b){b instanceof R||\"unwind\"==b||z(1,b)}};v.checkMailbox=X;\nvar vb=[],Y=a=>0===a%4&&(0!==a%100||0===a%400),wb=[0,31,60,91,121,152,182,213,244,274,305,335],xb=[0,31,59,90,120,151,181,212,243,273,304,334];function yb(a,b,c,d,g,h,k,t){return D?V(16,1,a,b,c,d,g,h,k,t):-52}function zb(a,b,c,d,g,h,k){if(D)return V(17,1,a,b,c,d,g,h,k)}\nvar Bb=a=>{var b=fb(a)+1,c=Ab(b);c&&hb(a,c,b);return c},Cb=[],Db={},Fb=()=>{if(!Eb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ja||\"./this.program\"},b;for(b in Db)void 0===Db[b]?delete a[b]:a[b]=Db[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Eb=c}return Eb},Eb;\nfunction Gb(a,b){if(D)return V(18,1,a,b);a>>>=0;b>>>=0;var c=0;Fb().forEach((d,g)=>{var h=b+c;g=r()[a+4*g>>>2>>>0]=h;for(h=0;h<d.length;++h)aa()[g++>>>0>>>0]=d.charCodeAt(h);aa()[g>>>0>>>0]=0;c+=d.length+1});return 0}function Kb(a,b){if(D)return V(19,1,a,b);a>>>=0;b>>>=0;var c=Fb();r()[a>>>2>>>0]=c.length;var d=0;c.forEach(g=>d+=g.length+1);r()[b>>>2>>>0]=d;return 0}function Lb(a){return D?V(20,1,a):52}function Mb(a,b,c,d){return D?V(21,1,a,b,c,d):52}\nfunction Nb(a,b,c,d,g){return D?V(22,1,a,b,c,d,g):70}var Ob=[null,[],[]];function Pb(a,b,c,d){if(D)return V(23,1,a,b,c,d);b>>>=0;c>>>=0;d>>>=0;for(var g=0,h=0;h<c;h++){var k=r()[b>>>2>>>0],t=r()[b+4>>>2>>>0];b+=8;for(var C=0;C<t;C++){var w=n()[k+C>>>0],y=Ob[a];0===w||10===w?((1===a?qa:J)(Ja(y,0)),y.length=0):y.push(w)}g+=t}r()[d>>>2>>>0]=g;return 0}var Qb=[31,29,31,30,31,30,31,31,30,31,30,31],Rb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Sb(a){var b=Array(fb(a)+1);gb(a,b,0,b.length);return b}var Tb=(a,b)=>{aa().set(a,b>>>0)};\nfunction Ub(a,b,c,d){function g(f,q,u){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=u[0]+f;return f}function h(f,q){return g(f,q,\"0\")}function k(f,q){function u(Hb){return 0>Hb?-1:0<Hb?1:0}var F;0===(F=u(f.getFullYear()-q.getFullYear()))&&0===(F=u(f.getMonth()-q.getMonth()))&&(F=u(f.getDate()-q.getDate()));return F}function t(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function C(f){var q=f.Ra;for(f=new Date((new Date(f.Sa+1900,0,1)).getTime());0<q;){var u=f.getMonth(),F=(Y(f.getFullYear())?Qb:Rb)[u];if(q>F-f.getDate())q-=F-f.getDate()+1,f.setDate(1),11>u?f.setMonth(u+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}u=new Date(f.getFullYear()+1,0,4);q=t(new Date(f.getFullYear(),\n0,4));u=t(u);return 0>=k(q,f)?0>=k(u,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;d>>>=0;var w=r()[d+40>>>2>>>0];d={ob:p()[d>>>2>>>0],nb:p()[d+4>>>2>>>0],Ta:p()[d+8>>>2>>>0],Xa:p()[d+12>>>2>>>0],Ua:p()[d+16>>>2>>>0],Sa:p()[d+20>>>2>>>0],Na:p()[d+24>>>2>>>0],Ra:p()[d+28>>>2>>>0],ub:p()[d+32>>>2>>>0],mb:p()[d+36>>>2>>>0],pb:w?Q(w):\"\"};c=Q(c);w={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\n\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var y in w)c=c.replace(new RegExp(y,\"g\"),w[y]);var Ib=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),Jb=\"January February March April May June July August September October November December\".split(\" \");w={\"%a\":f=>Ib[f.Na].substring(0,3),\n\"%A\":f=>Ib[f.Na],\"%b\":f=>Jb[f.Ua].substring(0,3),\"%B\":f=>Jb[f.Ua],\"%C\":f=>h((f.Sa+1900)/100|0,2),\"%d\":f=>h(f.Xa,2),\"%e\":f=>g(f.Xa,2,\" \"),\"%g\":f=>C(f).toString().substring(2),\"%G\":f=>C(f),\"%H\":f=>h(f.Ta,2),\"%I\":f=>{f=f.Ta;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":f=>{for(var q=0,u=0;u<=f.Ua-1;q+=(Y(f.Sa+1900)?Qb:Rb)[u++]);return h(f.Xa+q,3)},\"%m\":f=>h(f.Ua+1,2),\"%M\":f=>h(f.nb,2),\"%n\":()=>\"\\n\",\"%p\":f=>0<=f.Ta&&12>f.Ta?\"AM\":\"PM\",\"%S\":f=>h(f.ob,2),\"%t\":()=>\"\\t\",\"%u\":f=>f.Na||7,\"%U\":f=>h(Math.floor((f.Ra+\n7-f.Na)/7),2),\"%V\":f=>{var q=Math.floor((f.Ra+7-(f.Na+6)%7)/7);2>=(f.Na+371-f.Ra-2)%7&&q++;if(q)53==q&&(u=(f.Na+371-f.Ra)%7,4==u||3==u&&Y(f.Sa)||(q=1));else{q=52;var u=(f.Na+7-f.Ra-1)%7;(4==u||5==u&&Y(f.Sa%400-1))&&q++}return h(q,2)},\"%w\":f=>f.Na,\"%W\":f=>h(Math.floor((f.Ra+7-(f.Na+6)%7)/7),2),\"%y\":f=>(f.Sa+1900).toString().substring(2),\"%Y\":f=>f.Sa+1900,\"%z\":f=>{f=f.mb;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":f=>f.pb,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\n\"\\x00\\x00\");for(y in w)c.includes(y)&&(c=c.replace(new RegExp(y,\"g\"),w[y](d)));c=c.replace(/\\0\\0/g,\"%\");y=Sb(c);if(y.length>b)return 0;Tb(y,a);return y.length-1}S.Wa();\nvar Vb=[Oa,Pa,bb,db,eb,ib,jb,kb,lb,mb,nb,ob,pb,qb,rb,sb,yb,zb,Gb,Kb,Lb,Mb,Nb,Pb],Zb={b:function(a,b,c){a>>>=0;(new Za(a)).Wa(b>>>0,c>>>0);$a=a;ab++;throw $a;},L:function(a){Wb(a>>>0,!A,1,!ka,131072,!1);S.ab()},j:function(a){a>>>=0;D?postMessage({cmd:\"cleanupThread\",thread:a}):S.Za(S.Ma[a])},H:cb,h:db,S:eb,D:ib,F:jb,T:kb,Q:lb,J:mb,P:nb,n:ob,E:pb,B:qb,R:rb,C:sb,p:()=>1,z:function(a,b){a>>>=0;a==b>>>0?setTimeout(()=>X()):D?postMessage({targetThread:a,cmd:\"checkMailbox\"}):(a=S.Ma[a])&&a.postMessage({cmd:\"checkMailbox\"})},\nI:function(a,b,c,d){b>>>=0;vb.length=c;d=d>>>0>>>3;for(var g=0;g<c;g++)vb[g]=ea()[d+g>>>0];a=0>a?Ea[-a-1]:Vb[a];S.ib=b;b=a.apply(null,vb);S.ib=0;return b},K:tb,o:function(a){B&&S.Ma[a>>>0].ref()},s:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);p()[c>>>2>>>0]=a.getUTCSeconds();p()[c+4>>>2>>>0]=a.getUTCMinutes();p()[c+8>>>2>>>0]=a.getUTCHours();p()[c+12>>>2>>>0]=a.getUTCDate();p()[c+16>>>2>>>0]=a.getUTCMonth();p()[c+20>>>2>>>0]=a.getUTCFullYear()-1900;\np()[c+24>>>2>>>0]=a.getUTCDay();a=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0;p()[c+28>>>2>>>0]=a},t:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);p()[c>>>2>>>0]=a.getSeconds();p()[c+4>>>2>>>0]=a.getMinutes();p()[c+8>>>2>>>0]=a.getHours();p()[c+12>>>2>>>0]=a.getDate();p()[c+16>>>2>>>0]=a.getMonth();p()[c+20>>>2>>>0]=a.getFullYear()-1900;p()[c+24>>>2>>>0]=a.getDay();b=(Y(a.getFullYear())?wb:xb)[a.getMonth()]+a.getDate()-1|0;p()[c+28>>>\n2>>>0]=b;p()[c+36>>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();a=(b!=d&&a.getTimezoneOffset()==Math.min(d,b))|0;p()[c+32>>>2>>>0]=a},u:function(a){a>>>=0;var b=new Date(p()[a+20>>>2>>>0]+1900,p()[a+16>>>2>>>0],p()[a+12>>>2>>>0],p()[a+8>>>2>>>0],p()[a+4>>>2>>>0],p()[a>>>2>>>0],0),c=p()[a+32>>>2>>>0],d=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),\n0,1)).getTimezoneOffset(),k=Math.min(h,g);0>c?p()[a+32>>>2>>>0]=Number(g!=h&&k==d):0<c!=(k==d)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?k:g)-d)));p()[a+24>>>2>>>0]=b.getDay();c=(Y(b.getFullYear())?wb:xb)[b.getMonth()]+b.getDate()-1|0;p()[a+28>>>2>>>0]=c;p()[a>>>2>>>0]=b.getSeconds();p()[a+4>>>2>>>0]=b.getMinutes();p()[a+8>>>2>>>0]=b.getHours();p()[a+12>>>2>>>0]=b.getDate();p()[a+16>>>2>>>0]=b.getMonth();p()[a+20>>>2>>>0]=b.getYear();a=b.getTime();isNaN(a)?(p()[Xb()>>>2>>>0]=61,a=-1):a/=1E3;\nreturn Yb((P=a,1<=+Math.abs(P)?0<P?+Math.floor(P/4294967296)>>>0:~~+Math.ceil((P-+(~~P>>>0))/4294967296)>>>0:0)),a>>>0},q:yb,r:zb,y:function(a,b,c){function d(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}a>>>=0;b>>>=0;c>>>=0;var g=(new Date).getFullYear(),h=new Date(g,0,1),k=new Date(g,6,1);g=h.getTimezoneOffset();var t=k.getTimezoneOffset(),C=Math.max(g,t);r()[a>>>2>>>0]=60*C;p()[b>>>2>>>0]=Number(g!=t);a=d(h);b=d(k);a=Bb(a);b=Bb(b);t<g?(r()[c>>>2>>>0]=a,r()[c+4>>>2>>>0]=b):\n(r()[c>>>2>>>0]=b,r()[c+4>>>2>>>0]=a)},c:()=>{ra(\"\")},O:function(a,b,c){a>>>=0;b>>>=0;c>>>=0;Cb.length=0;for(var d;d=n()[b++>>>0];){var g=105!=d;g&=112!=d;c+=g&&c%8?4:0;Cb.push(112==d?r()[c>>>2>>>0]:105==d?p()[c>>>2>>>0]:ea()[c>>>3>>>0]);c+=g?8:4}return Ea[a].apply(null,Cb)},k:()=>{},i:()=>Date.now(),U:()=>{T+=1;throw\"unwind\";},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:()=>B?require(\"os\").cpus().length:navigator.hardwareConcurrency,x:function(a){a>>>=0;var b=\nn().length;if(a<=b||4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var g=Math;d=Math.max(a,d);a:{g=(g.min.call(g,4294901760,d+(65536-d%65536)%65536)-e.buffer.byteLength+65535)/65536;try{e.grow(g);m();var h=1;break a}catch(k){}h=void 0}if(h)return!0}return!1},M:Gb,N:Kb,G:Qa,g:Lb,m:Mb,v:Nb,l:Pb,a:e||v.wasmMemory,w:Ub,d:function(a,b,c,d){return Ub(a>>>0,b>>>0,c>>>0,d>>>0)}},Z=function(){function a(c,d){Z=c.exports;Z=$b();S.bb.push(Z.za);Xa=Z.Aa;va.unshift(Z.V);\nsa=d;ya();return Z}var b={a:Zb};M++;if(v.instantiateWasm)try{return v.instantiateWasm(b,a)}catch(c){J(`Module.instantiateWasm callback failed with error: ${c}`),x(c)}Da(b,function(c){a(c.instance,c.module)}).catch(x);return{}}();v._OrtInit=(a,b)=>(v._OrtInit=Z.W)(a,b);v._OrtGetLastError=(a,b)=>(v._OrtGetLastError=Z.X)(a,b);v._OrtCreateSessionOptions=(a,b,c,d,g,h,k,t,C,w)=>(v._OrtCreateSessionOptions=Z.Y)(a,b,c,d,g,h,k,t,C,w);\nv._OrtAppendExecutionProvider=(a,b)=>(v._OrtAppendExecutionProvider=Z.Z)(a,b);v._OrtAddFreeDimensionOverride=(a,b,c)=>(v._OrtAddFreeDimensionOverride=Z._)(a,b,c);v._OrtAddSessionConfigEntry=(a,b,c)=>(v._OrtAddSessionConfigEntry=Z.$)(a,b,c);v._OrtReleaseSessionOptions=a=>(v._OrtReleaseSessionOptions=Z.aa)(a);v._OrtCreateSession=(a,b,c)=>(v._OrtCreateSession=Z.ba)(a,b,c);v._OrtReleaseSession=a=>(v._OrtReleaseSession=Z.ca)(a);v._OrtGetInputOutputCount=(a,b,c)=>(v._OrtGetInputOutputCount=Z.da)(a,b,c);\nv._OrtGetInputName=(a,b)=>(v._OrtGetInputName=Z.ea)(a,b);v._OrtGetOutputName=(a,b)=>(v._OrtGetOutputName=Z.fa)(a,b);v._OrtFree=a=>(v._OrtFree=Z.ga)(a);v._OrtCreateTensor=(a,b,c,d,g,h)=>(v._OrtCreateTensor=Z.ha)(a,b,c,d,g,h);v._OrtGetTensorData=(a,b,c,d,g)=>(v._OrtGetTensorData=Z.ia)(a,b,c,d,g);v._OrtReleaseTensor=a=>(v._OrtReleaseTensor=Z.ja)(a);v._OrtCreateRunOptions=(a,b,c,d)=>(v._OrtCreateRunOptions=Z.ka)(a,b,c,d);v._OrtAddRunConfigEntry=(a,b,c)=>(v._OrtAddRunConfigEntry=Z.la)(a,b,c);\nv._OrtReleaseRunOptions=a=>(v._OrtReleaseRunOptions=Z.ma)(a);v._OrtCreateBinding=a=>(v._OrtCreateBinding=Z.na)(a);v._OrtBindInput=(a,b,c)=>(v._OrtBindInput=Z.oa)(a,b,c);v._OrtBindOutput=(a,b,c,d)=>(v._OrtBindOutput=Z.pa)(a,b,c,d);v._OrtClearBoundOutputs=a=>(v._OrtClearBoundOutputs=Z.qa)(a);v._OrtReleaseBinding=a=>(v._OrtReleaseBinding=Z.ra)(a);v._OrtRunWithBinding=(a,b,c,d,g)=>(v._OrtRunWithBinding=Z.sa)(a,b,c,d,g);v._OrtRun=(a,b,c,d,g,h,k,t)=>(v._OrtRun=Z.ta)(a,b,c,d,g,h,k,t);\nv._OrtEndProfiling=a=>(v._OrtEndProfiling=Z.ua)(a);var Xb=()=>(Xb=Z.va)(),W=v._pthread_self=()=>(W=v._pthread_self=Z.wa)(),Ab=v._malloc=a=>(Ab=v._malloc=Z.xa)(a);v._free=a=>(v._free=Z.ya)(a);v.__emscripten_tls_init=()=>(v.__emscripten_tls_init=Z.za)();var Wb=v.__emscripten_thread_init=(a,b,c,d,g,h)=>(Wb=v.__emscripten_thread_init=Z.Ba)(a,b,c,d,g,h);v.__emscripten_thread_crashed=()=>(v.__emscripten_thread_crashed=Z.Ca)();\nvar Na=(a,b,c,d)=>(Na=Z.Da)(a,b,c,d),Ta=a=>(Ta=Z.Ea)(a),Ya=v.__emscripten_thread_exit=a=>(Ya=v.__emscripten_thread_exit=Z.Fa)(a),ub=()=>(ub=Z.Ga)(),Yb=a=>(Yb=Z.Ha)(a),Va=(a,b)=>(Va=Z.Ia)(a,b),Ka=()=>(Ka=Z.Ja)(),U=a=>(U=Z.Ka)(a),Ma=a=>(Ma=Z.La)(a);function $b(){var a=Z;a=Object.assign({},a);var b=d=>()=>d()>>>0,c=d=>g=>d(g)>>>0;a.va=b(a.va);a.wa=b(a.wa);a.xa=c(a.xa);a.emscripten_main_runtime_thread_id=b(a.emscripten_main_runtime_thread_id);a.Ja=b(a.Ja);a.La=c(a.La);return a}v.wasmMemory=e;\nv.stackAlloc=Ma;v.stackSave=Ka;v.stackRestore=U;v.keepRuntimeAlive=()=>0<T;v.UTF8ToString=Q;v.stringToUTF8=hb;v.lengthBytesUTF8=fb;v.ExitStatus=R;v.PThread=S;var ac;N=function bc(){ac||cc();ac||(N=bc)};function cc(){if(!(0<M))if(D)ha(v),D||Ua(va),startWorker(v);else{if(v.preRun)for(\"function\"==typeof v.preRun&&(v.preRun=[v.preRun]);v.preRun.length;)ua.unshift(v.preRun.shift());Ua(ua);0<M||ac||(ac=!0,v.calledRun=!0,K||(D||Ua(va),ha(v),D||Ua(wa)))}}cc();\n\n\n  return moduleArg.ready\n}\n);\n})();\n;\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasmThreaded;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasmThreaded);\n","\"use strict\";var Module={},ENVIRONMENT_IS_NODE=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require(\"worker_threads\"),parentPort=nodeWorkerThreads.parentPort;parentPort.on(\"message\",e=>onmessage({data:e}));var fs=require(\"fs\"),vm=require(\"vm\");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,\"utf8\"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(\" \");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd===\"load\"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:\"loaded\"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:\"callHandler\",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob==\"string\")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd===\"run\"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!=\"unwind\")throw a}}else e.data.cmd===\"cancel\"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target===\"setimmediate\"||(e.data.cmd===\"checkMailbox\"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as path from 'node:path';\nimport {Env} from 'onnxruntime-common';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nlet ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule>;\n\nif (!BUILD_DEFS.DISABLE_TRAINING) {\n  ortWasmFactory = require('./binding/ort-training-wasm-simd.js');\n} else {\n  ortWasmFactory =\n      BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n}\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (numThreads: number): boolean => {\n  // WebAssembly threads are set to 1 (single thread).\n  if (numThreads === 1) {\n    return false;\n  }\n\n  // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n  if (typeof SharedArrayBuffer === 'undefined') {\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      // eslint-disable-next-line no-console\n      console.warn(\n          'env.wasm.numThreads is set to ' + numThreads +\n          ', but this will not work unless you enable crossOriginIsolated mode. ' +\n          'See https://web.dev/cross-origin-isolation-guide/ for more info.');\n    }\n    return false;\n  }\n\n  // onnxruntime-web does not support multi-threads in Node.js.\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    // eslint-disable-next-line no-console\n    console.warn(\n        'env.wasm.numThreads is set to ' + numThreads +\n        ', however, currently onnxruntime-web does not support multi-threads in Node.js. ' +\n        'Please consider using onnxruntime-node for performance critical scenarios.');\n  }\n\n  try {\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useSimd) {\n    if (!BUILD_DEFS.DISABLE_TRAINING) {\n      return 'ort-training-wasm-simd.wasm';\n    }\n    return useThreads ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-simd.wasm';\n  } else {\n    return useThreads ? 'ort-wasm-threaded.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = isMultiThreadSupported(numThreads);\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      config.numThreads = numThreads;\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.numThreads) {\n                let numThreads = webnnOptions.numThreads;\n                // Just ignore invalid webnnOptions.numThreads.\n                if (typeof numThreads != 'number' || !Number.isInteger(numThreads) || numThreads < 0) {\n                  numThreads = 0;\n                }\n                const keyDataOffset = allocWasmString('numThreads', allocs);\n                const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            if (typeof ep !== 'string') {\n              const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n              if (webgpuOptions?.preferredLayout) {\n                if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n                  throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n                }\n                const keyDataOffset = allocWasmString('preferredLayout', allocs);\n                const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n                }\n              }\n            }\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.enableGraphCapture !== undefined) {\n      if (typeof sessionOptions.enableGraphCapture !== 'boolean') {\n        throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);\n      }\n      const keyDataOffset = allocWasmString('enableGraphCapture', allocs);\n      const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);\n      if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n        checkLastError(\n            `Can't set a session config entry: 'enableGraphCapture' - ${sessionOptions.enableGraphCapture}.`);\n      }\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          // allow Float16Array polyfill.\n          return typeof Float16Array !== 'undefined' && Float16Array.from ? Float16Array : Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes => type === 'float32' ||\n    type === 'float16' || type === 'int32' || type === 'int64' || type === 'uint32' || type === 'uint8' ||\n    type === 'bool';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation|undefined =>\n    (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer'] as const)[location];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as fs from 'fs';\nimport {readFile} from 'node:fs/promises';\n\n/**\n * Load a file into a Uint8Array.\n *\n * @param file - the file to load. Can be a URL/path, a Blob, an ArrayBuffer, or a Uint8Array.\n * @returns a Uint8Array containing the file data.\n */\nexport const loadFile = async(file: string|Blob|ArrayBufferLike|Uint8Array): Promise<Uint8Array> => {\n  if (typeof file === 'string') {\n    if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n      // load file into ArrayBuffer in Node.js\n      try {\n        return new Uint8Array(await readFile(file));\n      } catch (e) {\n        if (e.code === 'ERR_FS_FILE_TOO_LARGE') {\n          // file is too large, use fs.createReadStream instead\n          const stream = fs.createReadStream(file);\n          const chunks: Uint8Array[] = [];\n          for await (const chunk of stream) {\n            chunks.push(chunk);\n          }\n          return new Uint8Array(Buffer.concat(chunks));\n        }\n        throw e;\n      }\n    } else {\n      // load file into ArrayBuffer in browsers\n      const response = await fetch(file);\n      if (!response.ok) {\n        throw new Error(`failed to load external data file: ${file}`);\n      }\n      const contentLengthHeader = response.headers.get('Content-Length');\n      const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n      if (fileSize < 1073741824 /* 1GB */) {\n        // when Content-Length header is not set, we cannot determine the file size. We assume it is small enough to\n        // load into memory.\n        return new Uint8Array(await response.arrayBuffer());\n      } else {\n        // file is too large, use stream instead\n        if (!response.body) {\n          throw new Error(`failed to load external data file: ${file}, no response body.`);\n        }\n        const reader = response.body.getReader();\n\n        let buffer;\n        try {\n          // try to create ArrayBuffer directly\n          buffer = new ArrayBuffer(fileSize);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            // use WebAssembly Memory to allocate larger ArrayBuffer\n            const pages = Math.ceil(fileSize / 65536);\n            buffer = new WebAssembly.Memory({initial: pages, maximum: pages}).buffer;\n          } else {\n            throw e;\n          }\n        }\n\n        let offset = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const {done, value} = await reader.read();\n          if (done) {\n            break;\n          }\n          const chunkSize = value.byteLength;\n          const chunk = new Uint8Array(buffer, offset, chunkSize);\n          chunk.set(value);\n          offset += chunkSize;\n        }\n        return new Uint8Array(buffer, 0, fileSize);\n      }\n    }\n\n  } else if (file instanceof Blob) {\n    return new Uint8Array(await file.arrayBuffer());\n  } else if (file instanceof Uint8Array) {\n    return file;\n  } else {\n    return new Uint8Array(file);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableInternalBuffer, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {dataLocationStringToEnum, getTensorElementSize, isGpuBufferSupportedType, logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\nimport {loadFile} from './wasm-utils-load-file';\n\n// #region Initializations\n\n/**\n * There are 4 different \"initialization\" steps for ORT. They happen in different places and different time.\n *\n * 1. JavaScript initialization for onnxruntime-common and onnxruntime-web.\n *    This is the first initialization step. In this step, onnxruntime-web calls onnxruntime-common's registerBackend()\n * function multiple times to register all the available backends. The backend registration is very fast. It only\n * registers the backend name with the uninitialized backend object. No heavy initialization is done in this step.\n *    Refer to web/lib/index.ts for the backend registration.\n *\n * 2. WebAssembly artifact initialization.\n *    This happens when any registered wasm backend is used for the first time (ie. `ort.InferenceSession.create()` or\n * `ort.TrainingSession.create()` is called). In this step, onnxruntime-web does the followings:\n *     - create a proxy worker and make sure the proxy worker is ready to receive messages, if proxy is enabled.\n *     - perform feature detection, locate correct WebAssembly artifact path and call the Emscripten generated\n * JavaScript code to initialize the WebAssembly runtime.\n *         - if proxy is enabled, this step happens in the proxy worker using message 'init-wasm'.\n *         - downloading the 'ort-wasm{...}.wasm' file is done in this step.\n *         - if multi-thread is enabled, one or more webworker will be created to initialize the PThread threadpool.\n *\n * 3. ORT environment initialization.\n *    This happens after step 2. In this step, onnxruntime-web performs ONNX Runtime environment initialization.\n * Function `_OrtInit()` is called in this step.\n *     - if proxy is enabled, this step happens in the proxy worker using message 'init-ort'.\n *     - logging level (ort.env.logLevel) and thread number (ort.env.wasm.numThreads) are set in this step.\n *\n * 4. Session initialization.\n *    This happens when `ort.InferenceSession.create()` or `ort.TrainingSession.create()` is called. Unlike the first 3\n * steps (they only called once), this step will be done for each session. In this step, onnxruntime-web does the\n * followings:\n *    If the parameter is a URL:\n *    - download the model data from the URL.\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - dereference the model buffer. This step allows the original ArrayBuffer to be garbage collected.\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *    If the parameter is a Uint8Array object:\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *\n */\n\n/**\n * initialize ORT environment.\n *\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n};\n\n/**\n * perform EP specific initialization.\n *\n * @param env\n * @param epName\n */\nexport const initEp = async(env: Env, epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n\n    if (epName === 'webgpu') {\n      // perform WebGPU availability check\n      if (typeof navigator === 'undefined' || !navigator.gpu) {\n        throw new Error('WebGPU is not supported in current environment');\n      }\n\n      let adapter = env.webgpu.adapter as GPUAdapter | null;\n      if (!adapter) {\n        // if adapter is not set, request a new adapter.\n        const powerPreference = env.webgpu.powerPreference;\n        if (powerPreference !== undefined && powerPreference !== 'low-power' &&\n            powerPreference !== 'high-performance') {\n          throw new Error(`Invalid powerPreference setting: \"${powerPreference}\"`);\n        }\n        const forceFallbackAdapter = env.webgpu.forceFallbackAdapter;\n        if (forceFallbackAdapter !== undefined && typeof forceFallbackAdapter !== 'boolean') {\n          throw new Error(`Invalid forceFallbackAdapter setting: \"${forceFallbackAdapter}\"`);\n        }\n        adapter = await navigator.gpu.requestAdapter({powerPreference, forceFallbackAdapter});\n        if (!adapter) {\n          throw new Error(\n              'Failed to get GPU adapter. ' +\n              'You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.');\n        }\n      } else {\n        // if adapter is set, validate it.\n        if (typeof adapter.limits !== 'object' || typeof adapter.features !== 'object' ||\n            typeof adapter.requestDevice !== 'function') {\n          throw new Error('Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.');\n        }\n      }\n\n      if (!env.wasm.simd) {\n        throw new Error(\n            'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP');\n      }\n\n      await initJsep('webgpu', getInstance(), env, adapter);\n    }\n    if (epName === 'webnn') {\n      // perform WebNN availability check\n      if (typeof navigator === 'undefined' || !(navigator as unknown as {ml: unknown}).ml) {\n        throw new Error('WebNN is not supported in current environment');\n      }\n\n      await initJsep('webnn', getInstance(), env);\n    }\n  }\n};\n\n// #endregion Initializations\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu'|'cpu-pinned'|'gpu-buffer';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number, inputNamesUTF8Encoded: number[], outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState|null, enableGraphCapture: boolean, inputOutputBound: boolean\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * allocate the memory and memcpy the external buffer.\n *\n * @param model - the external buffer containing the model data. Must not be the same buffer as the WASM heap.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const copyFromExternalBuffer = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session from a model data buffer.\n *\n * @param modelData - either a Uint8Array object representing the model data, or a 2-elements tuple containing the\n *     pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSession = async(\n    modelData: Uint8Array|SerializableInternalBuffer,\n    options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  let modelDataOffset: number, modelDataLength: number;\n  const wasm = getInstance();\n\n  if (Array.isArray(modelData)) {\n    // if model data is an array, it must be a 2-elements tuple containing the pointer and size of the model data\n    [modelDataOffset, modelDataLength] = modelData;\n  } else if (modelData.buffer === wasm.HEAPU8.buffer) {\n    // if model data uses the same buffer as the WASM heap, we don't need to copy it.\n    [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n  } else {\n    // otherwise, copy the model data to the WASM heap.\n    [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n  }\n\n  let sessionHandle = 0;\n  let sessionOptionsHandle = 0;\n  let ioBindingHandle = 0;\n  let allocs: number[] = [];\n  const inputNamesUTF8Encoded = [];\n  const outputNamesUTF8Encoded = [];\n\n  try {\n    [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n    if (options?.externalData && wasm.mountExternalData) {\n      const loadingPromises = [];\n      for (const file of options.externalData) {\n        const path = typeof file === 'string' ? file : file.path;\n        loadingPromises.push(loadFile(typeof file === 'string' ? file : file.data).then(data => {\n          wasm.mountExternalData!(path, data);\n        }));\n      }\n\n      // wait for all external data files to be loaded\n      await Promise.all(loadingPromises);\n    }\n\n    sessionHandle = await wasm._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n    if (sessionHandle === 0) {\n      checkLastError('Can\\'t create a session.');\n    }\n\n    const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n    const enableGraphCapture = !!options?.enableGraphCapture;\n\n    const inputNames = [];\n    const outputNames = [];\n    const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError('Can\\'t get an input name.');\n      }\n      inputNamesUTF8Encoded.push(name);\n      inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError('Can\\'t get an output name.');\n      }\n      outputNamesUTF8Encoded.push(name);\n      const nameString = wasm.UTF8ToString(name);\n      outputNames.push(nameString);\n\n      if (!BUILD_DEFS.DISABLE_WEBGPU) {\n        if (enableGraphCapture && options?.preferredOutputLocation === undefined) {\n          outputPreferredLocations.push('gpu-buffer');\n          continue;\n        }\n        const location = typeof options?.preferredOutputLocation === 'string' ?\n            options.preferredOutputLocation :\n            options?.preferredOutputLocation?.[nameString] ?? 'cpu';\n        if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer') {\n          throw new Error(`Not supported preferred output location: ${location}.`);\n        }\n        if (enableGraphCapture && location !== 'gpu-buffer') {\n          throw new Error(`Not supported preferred output location: ${\n              location}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);\n        }\n        outputPreferredLocations.push(location);\n      }\n    }\n\n    // use IO binding only when at least one output is preffered to be on GPU.\n    let bindingState: IOBindingState|null = null;\n    if (!BUILD_DEFS.DISABLE_WEBGPU && outputPreferredLocations.some(l => l === 'gpu-buffer')) {\n      ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n      if (ioBindingHandle === 0) {\n        checkLastError('Can\\'t create IO binding.');\n      }\n\n      bindingState = {\n        handle: ioBindingHandle,\n        outputPreferredLocations,\n        outputPreferredLocationsEncoded: outputPreferredLocations.map(l => dataLocationStringToEnum(l)),\n      };\n    }\n\n    activeSessions.set(\n        sessionHandle,\n        [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState, enableGraphCapture, false]);\n    return [sessionHandle, inputNames, outputNames];\n  } catch (e) {\n    inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n    if (ioBindingHandle !== 0) {\n      wasm._OrtReleaseBinding(ioBindingHandle);\n    }\n\n    if (sessionHandle !== 0) {\n      wasm._OrtReleaseSession(sessionHandle);\n    }\n    throw e;\n  } finally {\n    wasm._free(modelDataOffset);\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n\n    // unmount external data if necessary\n    wasm.unmountExternalData?.();\n  }\n};\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;\n\n  if (ioBindingState) {\n    if (enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n    }\n    wasm._OrtReleaseBinding(ioBindingState.handle);\n  }\n\n  wasm.jsepOnReleaseSession?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\nexport const prepareInputOutputTensor =\n    (tensor: TensorMetadata|null, tensorHandles: number[], allocs: number[], sessionId: number, index: number,\n     enableGraphCapture = false): void => {\n      if (!tensor) {\n        tensorHandles.push(0);\n        return;\n      }\n\n      const wasm = getInstance();\n\n      const dataType = tensor[0];\n      const dims = tensor[1];\n      const location = tensor[3];\n\n      let rawData: number;\n      let dataByteLength: number;\n\n      if (dataType === 'string' && location === 'gpu-buffer') {\n        throw new Error('String tensor is not supported on GPU.');\n      }\n\n      if (enableGraphCapture && location !== 'gpu-buffer') {\n        throw new Error(\n            `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`);\n      }\n\n      if (location === 'gpu-buffer') {\n        const gpuBuffer = tensor[2].gpuBuffer as GPUBuffer;\n        const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType))!;\n        dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n\n        const registerBuffer = wasm.jsepRegisterBuffer;\n        if (!registerBuffer) {\n          throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n        }\n        rawData = registerBuffer(sessionId, index, gpuBuffer, dataByteLength);\n      } else {\n        const data = tensor[2];\n\n        if (Array.isArray(data)) {\n          // string tensor\n          dataByteLength = 4 * data.length;\n          rawData = wasm._malloc(dataByteLength);\n          allocs.push(rawData);\n          let dataIndex = rawData / 4;\n          for (let i = 0; i < data.length; i++) {\n            if (typeof data[i] !== 'string') {\n              throw new TypeError(`tensor data at index ${i} is not a string`);\n            }\n            wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n          }\n        } else {\n          dataByteLength = data.byteLength;\n          rawData = wasm._malloc(dataByteLength);\n          allocs.push(rawData);\n          wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n        }\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), rawData, dataByteLength, dimsOffset, dims.length,\n            dataLocationStringToEnum(location));\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n        }\n        tensorHandles.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    };\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputTensors: TensorMetadata[], outputIndices: number[],\n    outputTensors: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n  const ioBindingState = session[3];\n  const enableGraphCapture = session[4];\n  const inputOutputBound = session[5];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(\n          inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i], enableGraphCapture);\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n          outputTensors[i], outputTensorHandles, inputOutputAllocs, sessionId, inputCount + outputIndices[i],\n          enableGraphCapture);\n    }\n\n    let inputValuesIndex = inputValuesOffset / 4;\n    let inputNamesIndex = inputNamesOffset / 4;\n    let outputValuesIndex = outputValuesOffset / 4;\n    let outputNamesIndex = outputNamesOffset / 4;\n    for (let i = 0; i < inputCount; i++) {\n      wasm.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n      wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n      wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n    }\n\n    if (!BUILD_DEFS.DISABLE_WEBGPU && ioBindingState && !inputOutputBound) {\n      const {handle, outputPreferredLocations, outputPreferredLocationsEncoded} = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(`input count from feeds (${\n            inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3];  // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode =\n              wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n      activeSessions.set(\n          sessionId,\n          [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, true]);\n    }\n\n    wasm.jsepOnRunStart?.(sessionHandle);\n    let errorCode: number;\n    if (!BUILD_DEFS.DISABLE_WEBGPU && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n          sessionHandle, ioBindingState.handle, outputCount, outputValuesOffset, runOptionsHandle);\n    } else {\n      errorCode = await wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type|undefined, dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n            tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        let tensorDataIndex = tensorDataOffset / 4;\n        const dataType = wasm.HEAPU32[tensorDataIndex++];\n        dataOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n        const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n        }\n        wasm._OrtFree(dimsOffset);\n\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          let dataIndex = dataOffset / 4;\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.HEAPU32[dataIndex++];\n            const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const getBuffer = wasm.jsepGetBuffer;\n            if (!getBuffer) {\n              throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n            }\n            const gpuBuffer = getBuffer(dataOffset);\n            const elementSize = getTensorElementSize(dataType);\n            if (elementSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type, dims, {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader!(gpuBuffer, size * elementSize, type),\n                dispose: () => {\n                  wasm._OrtReleaseTensor(tensor);\n                }\n              },\n              'gpu-buffer'\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState && !enableGraphCapture) {\n      wasm._OrtClearBoundOutputs(ioBindingState.handle);\n      activeSessions.set(\n          sessionId,\n          [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture, false]);\n    }\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach(v => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","/*!\n * ONNX Runtime Web v1.17.3\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\"use strict\";(()=>{var Et=Object.defineProperty;var Jr=Object.getOwnPropertyDescriptor;var Xr=Object.getOwnPropertyNames;var Qr=Object.prototype.hasOwnProperty;var St=(u,c)=>()=>(u&&(c=u(u=0)),c);var tt=(u,c)=>()=>(c||u((c={exports:{}}).exports,c),c.exports),At=(u,c)=>{for(var a in c)Et(u,a,{get:c[a],enumerable:!0})},Zr=(u,c,a,h)=>{if(c&&typeof c==\"object\"||typeof c==\"function\")for(let f of Xr(c))!Qr.call(u,f)&&f!==a&&Et(u,f,{get:()=>c[f],enumerable:!(h=Jr(c,f))||h.enumerable});return u};var rt=u=>Zr(Et({},\"__esModule\",{value:!0}),u);var Tt={};At(Tt,{createReadStream:()=>dr,readFile:()=>Kr,readFileSync:()=>en});var Kr,en,dr,Mt=St(()=>{Kr=void 0,en=void 0,dr=void 0});var Ct={};At(Ct,{join:()=>tn});var tn,Dt=St(()=>{tn=void 0});var gr=tt((mr,Ft)=>{\"use strict\";var pr=(()=>{var u=typeof document<\"u\"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<\"u\"&&(u=u||__filename),function(c={}){var a=c,h,f;a.ready=new Promise((r,o)=>{h=r,f=o});var w=Object.assign({},a),g=\"./this.program\",i=typeof window==\"object\",E=typeof importScripts==\"function\",P=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\",U=\"\",D,x,K;if(P){var R=(Mt(),rt(Tt)),I=(Dt(),rt(Ct));U=E?I.dirname(U)+\"/\":__dirname+\"/\",D=(r,o)=>(r=ve(r)?new URL(r):I.normalize(r),R.readFileSync(r,o?void 0:\"utf8\")),K=r=>(r=D(r,!0),r.buffer||(r=new Uint8Array(r)),r),x=(r,o,s,m=!0)=>{r=ve(r)?new URL(r):I.normalize(r),R.readFile(r,m?void 0:\"utf8\",(O,A)=>{O?s(O):o(m?A.buffer:A)})},!a.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),a.inspect=()=>\"[Emscripten Module object]\"}else(i||E)&&(E?U=self.location.href:typeof document<\"u\"&&document.currentScript&&(U=document.currentScript.src),u&&(U=u),U.indexOf(\"blob:\")!==0?U=U.substr(0,U.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):U=\"\",D=r=>{var o=new XMLHttpRequest;return o.open(\"GET\",r,!1),o.send(null),o.responseText},E&&(K=r=>{var o=new XMLHttpRequest;return o.open(\"GET\",r,!1),o.responseType=\"arraybuffer\",o.send(null),new Uint8Array(o.response)}),x=(r,o,s)=>{var m=new XMLHttpRequest;m.open(\"GET\",r,!0),m.responseType=\"arraybuffer\",m.onload=()=>{m.status==200||m.status==0&&m.response?o(m.response):s()},m.onerror=s,m.send(null)});var v=console.log.bind(console),k=console.error.bind(console);Object.assign(a,w),w=null,typeof WebAssembly!=\"object\"&&F(\"no native wasm support detected\");var W,H=!1,se,ee,S,j,Ce;function Ue(){var r=W.buffer;a.HEAP8=se=new Int8Array(r),a.HEAP16=new Int16Array(r),a.HEAPU8=ee=new Uint8Array(r),a.HEAPU16=new Uint16Array(r),a.HEAP32=S=new Int32Array(r),a.HEAPU32=j=new Uint32Array(r),a.HEAPF32=new Float32Array(r),a.HEAPF64=Ce=new Float64Array(r)}var ce=[],ne=[],Q=[],Oe=0,he=null,ae=null;function F(r){throw r=\"Aborted(\"+r+\")\",k(r),H=!0,r=new WebAssembly.RuntimeError(r+\". Build with -sASSERTIONS for more info.\"),f(r),r}var ye=r=>r.startsWith(\"data:application/octet-stream;base64,\"),ve=r=>r.startsWith(\"file://\"),fe;if(fe=\"ort-wasm.wasm\",!ye(fe)){var _e=fe;fe=a.locateFile?a.locateFile(_e,U):U+_e}function Y(r){if(K)return K(r);throw\"both async and sync fetching of the wasm failed\"}function pe(r){if(i||E){if(typeof fetch==\"function\"&&!ve(r))return fetch(r,{credentials:\"same-origin\"}).then(o=>{if(!o.ok)throw\"failed to load wasm binary file at '\"+r+\"'\";return o.arrayBuffer()}).catch(()=>Y(r));if(x)return new Promise((o,s)=>{x(r,m=>o(new Uint8Array(m)),s)})}return Promise.resolve().then(()=>Y(r))}function Ie(r,o,s){return pe(r).then(m=>WebAssembly.instantiate(m,o)).then(m=>m).then(s,m=>{k(`failed to asynchronously prepare wasm: ${m}`),F(m)})}function Ee(r,o){var s=fe;return typeof WebAssembly.instantiateStreaming!=\"function\"||ye(s)||ve(s)||P||typeof fetch!=\"function\"?Ie(s,r,o):fetch(s,{credentials:\"same-origin\"}).then(m=>WebAssembly.instantiateStreaming(m,r).then(o,function(O){return k(`wasm streaming compile failed: ${O}`),k(\"falling back to ArrayBuffer instantiation\"),Ie(s,r,o)}))}var be,we={920016:(r,o,s,m)=>{if(typeof a>\"u\"||!a.za)return 1;if(r=z(r>>>0),r.startsWith(\"./\")&&(r=r.substring(2)),r=a.za.get(r),!r)return 2;if(o>>>=0,s>>>=0,o+s>r.byteLength)return 3;try{return ee.set(r.subarray(o,o+s),m>>>0>>>0),0}catch{return 4}}};function Le(r){this.xa=r-24,this.Ha=function(o){j[this.xa+4>>>2>>>0]=o},this.Ga=function(o){j[this.xa+8>>>2>>>0]=o},this.Aa=function(o,s){this.Fa(),this.Ha(o),this.Ga(s)},this.Fa=function(){j[this.xa+16>>>2>>>0]=0}}var me=0,Se=0,De=typeof TextDecoder<\"u\"?new TextDecoder(\"utf8\"):void 0,te=(r,o,s)=>{o>>>=0;var m=o+s;for(s=o;r[s]&&!(s>=m);)++s;if(16<s-o&&r.buffer&&De)return De.decode(r.subarray(o,s));for(m=\"\";o<s;){var O=r[o++];if(O&128){var A=r[o++]&63;if((O&224)==192)m+=String.fromCharCode((O&31)<<6|A);else{var L=r[o++]&63;O=(O&240)==224?(O&15)<<12|A<<6|L:(O&7)<<18|A<<12|L<<6|r[o++]&63,65536>O?m+=String.fromCharCode(O):(O-=65536,m+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else m+=String.fromCharCode(O)}return m},z=(r,o)=>(r>>>=0)?te(ee,r,o):\"\",le=r=>{for(var o=0,s=0;s<r.length;++s){var m=r.charCodeAt(s);127>=m?o++:2047>=m?o+=2:55296<=m&&57343>=m?(o+=4,++s):o+=3}return o},Fe=(r,o,s,m)=>{if(s>>>=0,!(0<m))return 0;var O=s;m=s+m-1;for(var A=0;A<r.length;++A){var L=r.charCodeAt(A);if(55296<=L&&57343>=L){var re=r.charCodeAt(++A);L=65536+((L&1023)<<10)|re&1023}if(127>=L){if(s>=m)break;o[s++>>>0]=L}else{if(2047>=L){if(s+1>=m)break;o[s++>>>0]=192|L>>6}else{if(65535>=L){if(s+2>=m)break;o[s++>>>0]=224|L>>12}else{if(s+3>=m)break;o[s++>>>0]=240|L>>18,o[s++>>>0]=128|L>>12&63}o[s++>>>0]=128|L>>6&63}o[s++>>>0]=128|L&63}}return o[s>>>0]=0,s-O},Ae=r=>r%4===0&&(r%100!==0||r%400===0),qe=[0,31,60,91,121,152,182,213,244,274,305,335],at=[0,31,59,90,120,151,181,212,243,273,304,334],xe=r=>{var o=le(r)+1,s=st(o);return s&&Fe(r,ee,s,o),s},Ne=[],Re={},He=()=>{if(!Ge){var r={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(typeof navigator==\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:g||\"./this.program\"},o;for(o in Re)Re[o]===void 0?delete r[o]:r[o]=Re[o];var s=[];for(o in r)s.push(`${o}=${r[o]}`);Ge=s}return Ge},Ge,Be=[null,[],[]],Ve=[31,29,31,30,31,30,31,31,30,31,30,31],Je=[31,28,31,30,31,30,31,31,30,31,30,31];function $e(r){var o=Array(le(r)+1);return Fe(r,o,0,o.length),o}function ot(r,o,s,m){function O(d,B,$){for(d=typeof d==\"number\"?d.toString():d||\"\";d.length<B;)d=$[0]+d;return d}function A(d,B){return O(d,B,\"0\")}function L(d,B){function $(et){return 0>et?-1:0<et?1:0}var Te;return(Te=$(d.getFullYear()-B.getFullYear()))===0&&(Te=$(d.getMonth()-B.getMonth()))===0&&(Te=$(d.getDate()-B.getDate())),Te}function re(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function de(d){var B=d.ta;for(d=new Date(new Date(d.ua+1900,0,1).getTime());0<B;){var $=d.getMonth(),Te=(Ae(d.getFullYear())?Ve:Je)[$];if(B>Te-d.getDate())B-=Te-d.getDate()+1,d.setDate(1),11>$?d.setMonth($+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+B);break}}return $=new Date(d.getFullYear()+1,0,4),B=re(new Date(d.getFullYear(),0,4)),$=re($),0>=L(B,d)?0>=L($,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}r>>>=0,o>>>=0,s>>>=0,m>>>=0;var ie=j[m+40>>>2>>>0];m={Da:S[m>>>2>>>0],Ca:S[m+4>>>2>>>0],va:S[m+8>>>2>>>0],ya:S[m+12>>>2>>>0],wa:S[m+16>>>2>>>0],ua:S[m+20>>>2>>>0],oa:S[m+24>>>2>>>0],ta:S[m+28>>>2>>>0],Ia:S[m+32>>>2>>>0],Ba:S[m+36>>>2>>>0],Ea:ie?z(ie):\"\"},s=z(s),ie={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var ue in ie)s=s.replace(new RegExp(ue,\"g\"),ie[ue]);var Ze=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),Ke=\"January February March April May June July August September October November December\".split(\" \");ie={\"%a\":d=>Ze[d.oa].substring(0,3),\"%A\":d=>Ze[d.oa],\"%b\":d=>Ke[d.wa].substring(0,3),\"%B\":d=>Ke[d.wa],\"%C\":d=>A((d.ua+1900)/100|0,2),\"%d\":d=>A(d.ya,2),\"%e\":d=>O(d.ya,2,\" \"),\"%g\":d=>de(d).toString().substring(2),\"%G\":d=>de(d),\"%H\":d=>A(d.va,2),\"%I\":d=>(d=d.va,d==0?d=12:12<d&&(d-=12),A(d,2)),\"%j\":d=>{for(var B=0,$=0;$<=d.wa-1;B+=(Ae(d.ua+1900)?Ve:Je)[$++]);return A(d.ya+B,3)},\"%m\":d=>A(d.wa+1,2),\"%M\":d=>A(d.Ca,2),\"%n\":()=>`\n`,\"%p\":d=>0<=d.va&&12>d.va?\"AM\":\"PM\",\"%S\":d=>A(d.Da,2),\"%t\":()=>\"\t\",\"%u\":d=>d.oa||7,\"%U\":d=>A(Math.floor((d.ta+7-d.oa)/7),2),\"%V\":d=>{var B=Math.floor((d.ta+7-(d.oa+6)%7)/7);if(2>=(d.oa+371-d.ta-2)%7&&B++,B)B==53&&($=(d.oa+371-d.ta)%7,$==4||$==3&&Ae(d.ua)||(B=1));else{B=52;var $=(d.oa+7-d.ta-1)%7;($==4||$==5&&Ae(d.ua%400-1))&&B++}return A(B,2)},\"%w\":d=>d.oa,\"%W\":d=>A(Math.floor((d.ta+7-(d.oa+6)%7)/7),2),\"%y\":d=>(d.ua+1900).toString().substring(2),\"%Y\":d=>d.ua+1900,\"%z\":d=>{d=d.Ba;var B=0<=d;return d=Math.abs(d)/60,(B?\"+\":\"-\")+(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":d=>d.Ea,\"%%\":()=>\"%\"},s=s.replace(/%%/g,\"\\0\\0\");for(ue in ie)s.includes(ue)&&(s=s.replace(new RegExp(ue,\"g\"),ie[ue](m)));return s=s.replace(/\\0\\0/g,\"%\"),ue=$e(s),ue.length>o?0:(se.set(ue,r>>>0),ue.length-1)}var G={a:function(r,o,s){throw r>>>=0,new Le(r).Aa(o>>>0,s>>>0),me=r,Se++,me},e:function(){return 0},H:function(){},x:function(){},z:function(){},J:function(){return 0},F:function(){},A:function(){},E:function(){},g:function(){},y:function(){},v:function(){},G:function(){},w:function(){},k:()=>1,n:function(r,o,s){r=o+2097152>>>0<4194305-!!r?(r>>>0)+4294967296*o:NaN,s>>>=0,r=new Date(1e3*r),S[s>>>2>>>0]=r.getUTCSeconds(),S[s+4>>>2>>>0]=r.getUTCMinutes(),S[s+8>>>2>>>0]=r.getUTCHours(),S[s+12>>>2>>>0]=r.getUTCDate(),S[s+16>>>2>>>0]=r.getUTCMonth(),S[s+20>>>2>>>0]=r.getUTCFullYear()-1900,S[s+24>>>2>>>0]=r.getUTCDay(),S[s+28>>>2>>>0]=(r.getTime()-Date.UTC(r.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},o:function(r,o,s){r=o+2097152>>>0<4194305-!!r?(r>>>0)+4294967296*o:NaN,s>>>=0,r=new Date(1e3*r),S[s>>>2>>>0]=r.getSeconds(),S[s+4>>>2>>>0]=r.getMinutes(),S[s+8>>>2>>>0]=r.getHours(),S[s+12>>>2>>>0]=r.getDate(),S[s+16>>>2>>>0]=r.getMonth(),S[s+20>>>2>>>0]=r.getFullYear()-1900,S[s+24>>>2>>>0]=r.getDay(),S[s+28>>>2>>>0]=(Ae(r.getFullYear())?qe:at)[r.getMonth()]+r.getDate()-1|0,S[s+36>>>2>>>0]=-(60*r.getTimezoneOffset()),o=new Date(r.getFullYear(),6,1).getTimezoneOffset();var m=new Date(r.getFullYear(),0,1).getTimezoneOffset();S[s+32>>>2>>>0]=(o!=m&&r.getTimezoneOffset()==Math.min(m,o))|0},p:function(r){r>>>=0;var o=new Date(S[r+20>>>2>>>0]+1900,S[r+16>>>2>>>0],S[r+12>>>2>>>0],S[r+8>>>2>>>0],S[r+4>>>2>>>0],S[r>>>2>>>0],0),s=S[r+32>>>2>>>0],m=o.getTimezoneOffset(),O=new Date(o.getFullYear(),6,1).getTimezoneOffset(),A=new Date(o.getFullYear(),0,1).getTimezoneOffset(),L=Math.min(A,O);return 0>s?S[r+32>>>2>>>0]=+(O!=A&&L==m):0<s!=(L==m)&&(O=Math.max(A,O),o.setTime(o.getTime()+6e4*((0<s?L:O)-m))),S[r+24>>>2>>>0]=o.getDay(),S[r+28>>>2>>>0]=(Ae(o.getFullYear())?qe:at)[o.getMonth()]+o.getDate()-1|0,S[r>>>2>>>0]=o.getSeconds(),S[r+4>>>2>>>0]=o.getMinutes(),S[r+8>>>2>>>0]=o.getHours(),S[r+12>>>2>>>0]=o.getDate(),S[r+16>>>2>>>0]=o.getMonth(),S[r+20>>>2>>>0]=o.getYear(),r=o.getTime(),isNaN(r)?(S[je()>>>2>>>0]=61,r=-1):r/=1e3,Xe((be=r,1<=+Math.abs(be)?0<be?+Math.floor(be/4294967296)>>>0:~~+Math.ceil((be-+(~~be>>>0))/4294967296)>>>0:0)),r>>>0},l:function(){return-52},m:function(){},t:function(r,o,s){function m(de){return(de=de.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?de[1]:\"GMT\"}s>>>=0;var O=new Date().getFullYear(),A=new Date(O,0,1),L=new Date(O,6,1);O=A.getTimezoneOffset();var re=L.getTimezoneOffset();j[r>>>0>>>2>>>0]=60*Math.max(O,re),S[o>>>0>>>2>>>0]=+(O!=re),r=m(A),o=m(L),r=xe(r),o=xe(o),re<O?(j[s>>>2>>>0]=r,j[s+4>>>2>>>0]=o):(j[s>>>2>>>0]=o,j[s+4>>>2>>>0]=r)},d:()=>{F(\"\")},B:function(r,o,s){r>>>=0,o>>>=0,s>>>=0,Ne.length=0;for(var m;m=ee[o++>>>0];){var O=m!=105;O&=m!=112,s+=O&&s%8?4:0,Ne.push(m==112?j[s>>>2>>>0]:m==105?S[s>>>2>>>0]:Ce[s>>>3>>>0]),s+=O?8:4}return we[r].apply(null,Ne)},h:()=>Date.now(),u:function(){return 4294901760},b:()=>performance.now(),I:function(r,o,s){return o>>>=0,ee.copyWithin(r>>>0>>>0,o>>>0,o+(s>>>0)>>>0)},s:function(r){r>>>=0;var o=ee.length;if(4294901760<r)return!1;for(var s=1;4>=s;s*=2){var m=o*(1+.2/s);m=Math.min(m,r+100663296);var O=Math;m=Math.max(r,m);e:{O=(O.min.call(O,4294901760,m+(65536-m%65536)%65536)-W.buffer.byteLength+65535)/65536;try{W.grow(O),Ue();var A=1;break e}catch{}A=void 0}if(A)return!0}return!1},C:function(r,o){r>>>=0,o>>>=0;var s=0;return He().forEach((m,O)=>{var A=o+s;for(O=j[r+4*O>>>2>>>0]=A,A=0;A<m.length;++A)se[O++>>>0>>>0]=m.charCodeAt(A);se[O>>>0>>>0]=0,s+=m.length+1}),0},D:function(r,o){r>>>=0,o>>>=0;var s=He();j[r>>>2>>>0]=s.length;var m=0;return s.forEach(O=>m+=O.length+1),j[o>>>2>>>0]=m,0},f:()=>52,j:function(){return 52},q:function(){return 70},i:function(r,o,s,m){o>>>=0,s>>>=0,m>>>=0;for(var O=0,A=0;A<s;A++){var L=j[o>>>2>>>0],re=j[o+4>>>2>>>0];o+=8;for(var de=0;de<re;de++){var ie=ee[L+de>>>0],ue=Be[r];ie===0||ie===10?((r===1?v:k)(te(ue,0)),ue.length=0):ue.push(ie)}O+=re}return j[m>>>2>>>0]=O,0},r:ot,c:function(r,o,s,m){return ot(r>>>0,o>>>0,s>>>0,m>>>0)}},C=function(){function r(s){return C=s.exports,C=ut(),W=C.K,Ue(),ne.unshift(C.L),Oe--,Oe==0&&(he!==null&&(clearInterval(he),he=null),ae&&(s=ae,ae=null,s())),C}var o={a:G};if(Oe++,a.instantiateWasm)try{return a.instantiateWasm(o,r)}catch(s){k(`Module.instantiateWasm callback failed with error: ${s}`),f(s)}return Ee(o,function(s){r(s.instance)}).catch(f),{}}();a._OrtInit=(r,o)=>(a._OrtInit=C.M)(r,o),a._OrtGetLastError=(r,o)=>(a._OrtGetLastError=C.N)(r,o),a._OrtCreateSessionOptions=(r,o,s,m,O,A,L,re,de,ie)=>(a._OrtCreateSessionOptions=C.O)(r,o,s,m,O,A,L,re,de,ie),a._OrtAppendExecutionProvider=(r,o)=>(a._OrtAppendExecutionProvider=C.P)(r,o),a._OrtAddFreeDimensionOverride=(r,o,s)=>(a._OrtAddFreeDimensionOverride=C.Q)(r,o,s),a._OrtAddSessionConfigEntry=(r,o,s)=>(a._OrtAddSessionConfigEntry=C.R)(r,o,s),a._OrtReleaseSessionOptions=r=>(a._OrtReleaseSessionOptions=C.S)(r),a._OrtCreateSession=(r,o,s)=>(a._OrtCreateSession=C.T)(r,o,s),a._OrtReleaseSession=r=>(a._OrtReleaseSession=C.U)(r),a._OrtGetInputOutputCount=(r,o,s)=>(a._OrtGetInputOutputCount=C.V)(r,o,s),a._OrtGetInputName=(r,o)=>(a._OrtGetInputName=C.W)(r,o),a._OrtGetOutputName=(r,o)=>(a._OrtGetOutputName=C.X)(r,o),a._OrtFree=r=>(a._OrtFree=C.Y)(r),a._OrtCreateTensor=(r,o,s,m,O,A)=>(a._OrtCreateTensor=C.Z)(r,o,s,m,O,A),a._OrtGetTensorData=(r,o,s,m,O)=>(a._OrtGetTensorData=C._)(r,o,s,m,O),a._OrtReleaseTensor=r=>(a._OrtReleaseTensor=C.$)(r),a._OrtCreateRunOptions=(r,o,s,m)=>(a._OrtCreateRunOptions=C.aa)(r,o,s,m),a._OrtAddRunConfigEntry=(r,o,s)=>(a._OrtAddRunConfigEntry=C.ba)(r,o,s),a._OrtReleaseRunOptions=r=>(a._OrtReleaseRunOptions=C.ca)(r),a._OrtCreateBinding=r=>(a._OrtCreateBinding=C.da)(r),a._OrtBindInput=(r,o,s)=>(a._OrtBindInput=C.ea)(r,o,s),a._OrtBindOutput=(r,o,s,m)=>(a._OrtBindOutput=C.fa)(r,o,s,m),a._OrtClearBoundOutputs=r=>(a._OrtClearBoundOutputs=C.ga)(r),a._OrtReleaseBinding=r=>(a._OrtReleaseBinding=C.ha)(r),a._OrtRunWithBinding=(r,o,s,m,O)=>(a._OrtRunWithBinding=C.ia)(r,o,s,m,O),a._OrtRun=(r,o,s,m,O,A,L,re)=>(a._OrtRun=C.ja)(r,o,s,m,O,A,L,re),a._OrtEndProfiling=r=>(a._OrtEndProfiling=C.ka)(r);var je=()=>(je=C.la)(),st=a._malloc=r=>(st=a._malloc=C.ma)(r);a._free=r=>(a._free=C.na)(r);var Xe=r=>(Xe=C.pa)(r),it=()=>(it=C.qa)(),M=r=>(M=C.ra)(r),ke=r=>(ke=C.sa)(r);function ut(){var r=C;r=Object.assign({},r);var o=m=>()=>m()>>>0,s=m=>O=>m(O)>>>0;return r.la=o(r.la),r.ma=s(r.ma),r.qa=o(r.qa),r.sa=s(r.sa),r}a.stackAlloc=ke,a.stackSave=it,a.stackRestore=M,a.UTF8ToString=z,a.stringToUTF8=(r,o,s)=>Fe(r,ee,o,s),a.lengthBytesUTF8=le;var Pe;ae=function r(){Pe||Qe(),Pe||(ae=r)};function Qe(){if(!(0<Oe)){if(a.preRun)for(typeof a.preRun==\"function\"&&(a.preRun=[a.preRun]);a.preRun.length;){var r=a.preRun.shift();ce.unshift(r)}for(;0<ce.length;)ce.shift()(a);if(!(0<Oe||Pe||(Pe=!0,a.calledRun=!0,H))){for(;0<ne.length;)ne.shift()(a);for(h(a);0<Q.length;)Q.shift()(a)}}}return Qe(),c.ready}})();typeof mr==\"object\"&&typeof Ft==\"object\"?Ft.exports=pr:typeof define==\"function\"&&define.amd&&define([],()=>pr)});var hr=tt(()=>{});var yr=tt(()=>{});var br={};At(br,{cpus:()=>rn});var rn,wr=St(()=>{rn=void 0});var _r=tt((vr,xt)=>{\"use strict\";var Or=(()=>{var u=typeof document<\"u\"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<\"u\"&&(u=u||__filename),function(c={}){function a(){return Q.buffer!=F.buffer&&Y(),F}function h(){return Q.buffer!=F.buffer&&Y(),ye}function f(){return Q.buffer!=F.buffer&&Y(),ve}function w(){return Q.buffer!=F.buffer&&Y(),fe}function g(){return Q.buffer!=F.buffer&&Y(),_e}var i=c,E,P;i.ready=new Promise((e,t)=>{E=e,P=t});var U=Object.assign({},i),D=\"./this.program\",x=(e,t)=>{throw t},K=typeof window==\"object\",R=typeof importScripts==\"function\",I=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\",v=i.ENVIRONMENT_IS_PTHREAD||!1,k=\"\";function W(e){return i.locateFile?i.locateFile(e,k):k+e}var H,se,ee;if(I){var S=(Mt(),rt(Tt)),j=(Dt(),rt(Ct));k=R?j.dirname(k)+\"/\":__dirname+\"/\",H=(t,n)=>(t=z(t)?new URL(t):j.normalize(t),S.readFileSync(t,n?void 0:\"utf8\")),ee=t=>(t=H(t,!0),t.buffer||(t=new Uint8Array(t)),t),se=(t,n,l,y=!0)=>{t=z(t)?new URL(t):j.normalize(t),S.readFile(t,y?void 0:\"utf8\",(b,_)=>{b?l(b):n(y?_.buffer:_)})},!i.thisProgram&&1<process.argv.length&&(D=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),x=(t,n)=>{throw process.exitCode=t,n},i.inspect=()=>\"[Emscripten Module object]\";let e;try{e=hr()}catch(t){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),t}global.Worker=e.Worker}else(K||R)&&(R?k=self.location.href:typeof document<\"u\"&&document.currentScript&&(k=document.currentScript.src),typeof u<\"u\"&&u&&(k=u),k.indexOf(\"blob:\")!==0?k=k.substr(0,k.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):k=\"\",I||(H=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},R&&(ee=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),se=(e,t,n)=>{var l=new XMLHttpRequest;l.open(\"GET\",e,!0),l.responseType=\"arraybuffer\",l.onload=()=>{l.status==200||l.status==0&&l.response?t(l.response):n()},l.onerror=n,l.send(null)}));I&&typeof performance>\"u\"&&(global.performance=yr().performance);var Ce=console.log.bind(console),Ue=console.error.bind(console);I&&(Ce=(...e)=>S.writeSync(1,e.join(\" \")+`\n`),Ue=(...e)=>S.writeSync(2,e.join(\" \")+`\n`));var ce=Ce,ne=Ue;Object.assign(i,U),U=null,typeof WebAssembly!=\"object\"&&De(\"no native wasm support detected\");var Q,Oe,he=!1,ae,F,ye,ve,fe,_e;function Y(){var e=Q.buffer;i.HEAP8=F=new Int8Array(e),i.HEAP16=new Int16Array(e),i.HEAPU8=ye=new Uint8Array(e),i.HEAPU16=new Uint16Array(e),i.HEAP32=ve=new Int32Array(e),i.HEAPU32=fe=new Uint32Array(e),i.HEAPF32=new Float32Array(e),i.HEAPF64=_e=new Float64Array(e)}var pe=16777216;if(v)Q=i.wasmMemory;else if(i.wasmMemory)Q=i.wasmMemory;else if(Q=new WebAssembly.Memory({initial:pe/65536,maximum:65536,shared:!0}),!(Q.buffer instanceof SharedArrayBuffer))throw ne(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),I&&ne(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");Y(),pe=Q.buffer.byteLength;var Ie=[],Ee=[],be=[],we=0,Le=null,me=null;function Se(){if(we--,we==0&&(Le!==null&&(clearInterval(Le),Le=null),me)){var e=me;me=null,e()}}function De(e){throw e=\"Aborted(\"+e+\")\",ne(e),he=!0,ae=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),P(e),e}var te=e=>e.startsWith(\"data:application/octet-stream;base64,\"),z=e=>e.startsWith(\"file://\"),le;le=\"ort-wasm-threaded.wasm\",te(le)||(le=W(le));function Fe(e){if(ee)return ee(e);throw\"both async and sync fetching of the wasm failed\"}function Ae(e){if(K||R){if(typeof fetch==\"function\"&&!z(e))return fetch(e,{credentials:\"same-origin\"}).then(t=>{if(!t.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return t.arrayBuffer()}).catch(()=>Fe(e));if(se)return new Promise((t,n)=>{se(e,l=>t(new Uint8Array(l)),n)})}return Promise.resolve().then(()=>Fe(e))}function qe(e,t,n){return Ae(e).then(l=>WebAssembly.instantiate(l,t)).then(l=>l).then(n,l=>{ne(`failed to asynchronously prepare wasm: ${l}`),De(l)})}function at(e,t){var n=le;return typeof WebAssembly.instantiateStreaming!=\"function\"||te(n)||z(n)||I||typeof fetch!=\"function\"?qe(n,e,t):fetch(n,{credentials:\"same-origin\"}).then(l=>WebAssembly.instantiateStreaming(l,e).then(t,function(y){return ne(`wasm streaming compile failed: ${y}`),ne(\"falling back to ArrayBuffer instantiation\"),qe(n,e,t)}))}var xe,Ne={921388:(e,t,n,l)=>{if(typeof i>\"u\"||!i.cb)return 1;if(e=$e(e>>>0),e.startsWith(\"./\")&&(e=e.substring(2)),e=i.cb.get(e),!e)return 2;if(t>>>=0,n>>>=0,l>>>=0,t+n>e.byteLength)return 3;try{return h().set(e.subarray(t,t+n),l>>>0),0}catch{return 4}}};function Re(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}var He=e=>{e.terminate(),e.onmessage=()=>{}},Ge=e=>{M.Pa.length==0&&(Xe(),M.Ya(M.Pa[0]));var t=M.Pa.pop();if(!t)return 6;M.Qa.push(t),M.Ma[e.Oa]=t,t.Oa=e.Oa;var n={cmd:\"run\",start_routine:e.kb,arg:e.hb,pthread_ptr:e.Oa};return I&&t.unref(),t.postMessage(n,e.qb),0},Be=0,Ve=typeof TextDecoder<\"u\"?new TextDecoder(\"utf8\"):void 0,Je=(e,t,n)=>{t>>>=0;var l=t+n;for(n=t;e[n]&&!(n>=l);)++n;if(16<n-t&&e.buffer&&Ve)return Ve.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(l=\"\";t<n;){var y=e[t++];if(y&128){var b=e[t++]&63;if((y&224)==192)l+=String.fromCharCode((y&31)<<6|b);else{var _=e[t++]&63;y=(y&240)==224?(y&15)<<12|b<<6|_:(y&7)<<18|b<<12|_<<6|e[t++]&63,65536>y?l+=String.fromCharCode(y):(y-=65536,l+=String.fromCharCode(55296|y>>10,56320|y&1023))}}else l+=String.fromCharCode(y)}return l},$e=(e,t)=>(e>>>=0)?Je(h(),e,t):\"\",ot=e=>{var t=vt();return e=e(),ct(t),e};function G(e,t){var n=arguments.length-2,l=arguments;return ot(()=>{for(var y=_t(8*n),b=y>>>3,_=0;_<n;_++){var J=l[2+_];g()[b+_>>>0]=J}return ar(e,n,y,t)})}function C(e){if(v)return G(0,1,e);ae=e,0<Be||(M.lb(),i.onExit?.(e),he=!0),x(e,new Re(e))}var je=e=>{if(ae=e,v)throw ut(e),\"unwind\";C(e)};function st(){for(var e=i.numThreads;e--;)Xe();Ie.unshift(()=>{we++,it(()=>Se())})}function Xe(){var e=W(\"ort-wasm-threaded.worker.js\");e=new Worker(e),M.Pa.push(e)}function it(e){v?e():Promise.all(M.Pa.map(M.Ya)).then(e)}var M={Pa:[],Qa:[],bb:[],Ma:{},Wa(){v?(M.receiveObjectTransfer=M.jb,M.threadInitTLS=M.ab,M.setExitStatus=M.$a):st()},$a:e=>ae=e,tb:[\"$terminateWorker\"],lb:()=>{for(var e of M.Qa)He(e);for(e of M.Pa)He(e);M.Pa=[],M.Qa=[],M.Ma=[]},Za:e=>{var t=e.Oa;delete M.Ma[t],M.Pa.push(e),M.Qa.splice(M.Qa.indexOf(e),1),e.Oa=0,wt(t)},jb(){},ab(){M.bb.forEach(e=>e())},Ya:e=>new Promise(t=>{e.onmessage=b=>{b=b.data;var _=b.cmd;if(b.targetThread&&b.targetThread!=lt()){var J=M.Ma[b.targetThread];J?J.postMessage(b,b.transferList):ne(`Internal error! Worker sent a message \"${_}\" to target pthread ${b.targetThread}, but that thread no longer exists!`)}else _===\"checkMailbox\"?ft():_===\"spawnThread\"?Ge(b):_===\"cleanupThread\"?M.Za(M.Ma[b.thread]):_===\"killThread\"?(b=b.thread,_=M.Ma[b],delete M.Ma[b],He(_),wt(b),M.Qa.splice(M.Qa.indexOf(_),1),_.Oa=0):_===\"cancelThread\"?M.Ma[b.thread].postMessage({cmd:\"cancel\"}):_===\"loaded\"?(e.loaded=!0,I&&!e.Oa&&e.unref(),t(e)):_===\"alert\"?alert(`Thread ${b.threadId}: ${b.text}`):b.target===\"setimmediate\"?e.postMessage(b):_===\"callHandler\"?i[b.handler](...b.args):_&&ne(`worker sent an unknown command ${_}`)},e.onerror=b=>{throw ne(`worker sent an error! ${b.filename}:${b.lineno}: ${b.message}`),b},I&&(e.on(\"message\",b=>e.onmessage({data:b})),e.on(\"error\",b=>e.onerror(b)));var n=[],l=[\"onExit\"],y;for(y of l)i.hasOwnProperty(y)&&n.push(y);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:i.mainScriptUrlOrBlob||u,wasmMemory:Q,wasmModule:Oe})})};i.PThread=M;var ke=e=>{for(;0<e.length;)e.shift()(i)};i.establishStackSpace=()=>{var e=lt(),t=w()[e+52>>>2>>>0];e=w()[e+56>>>2>>>0],ir(t,t-e),ct(t)};function ut(e){if(v)return G(1,0,e);je(e)}var Pe=[],Qe;i.invokeEntryPoint=(e,t)=>{var n=Pe[e];n||(e>=Pe.length&&(Pe.length=e+1),Pe[e]=n=Qe.get(e)),e=n(t),0<Be?M.$a(e):Ot(e)};function r(e){this.Va=e-24,this.gb=function(t){w()[this.Va+4>>>2>>>0]=t},this.fb=function(t){w()[this.Va+8>>>2>>>0]=t},this.Wa=function(t,n){this.eb(),this.gb(t),this.fb(n)},this.eb=function(){w()[this.Va+16>>>2>>>0]=0}}var o=0,s=0;function m(e,t,n,l){return v?G(2,1,e,t,n,l):O(e,t,n,l)}function O(e,t,n,l){if(e>>>=0,t>>>=0,n>>>=0,l>>>=0,typeof SharedArrayBuffer>\"u\")return ne(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var y=[];return v&&y.length===0?m(e,t,n,l):(e={kb:n,Oa:e,hb:l,qb:y},v?(e.sb=\"spawnThread\",postMessage(e,y),0):Ge(e))}function A(e,t,n){return v?G(3,1,e,t,n):0}function L(e,t){if(v)return G(4,1,e,t)}var re=e=>{for(var t=0,n=0;n<e.length;++n){var l=e.charCodeAt(n);127>=l?t++:2047>=l?t+=2:55296<=l&&57343>=l?(t+=4,++n):t+=3}return t},de=(e,t,n,l)=>{if(n>>>=0,!(0<l))return 0;var y=n;l=n+l-1;for(var b=0;b<e.length;++b){var _=e.charCodeAt(b);if(55296<=_&&57343>=_){var J=e.charCodeAt(++b);_=65536+((_&1023)<<10)|J&1023}if(127>=_){if(n>=l)break;t[n++>>>0]=_}else{if(2047>=_){if(n+1>=l)break;t[n++>>>0]=192|_>>6}else{if(65535>=_){if(n+2>=l)break;t[n++>>>0]=224|_>>12}else{if(n+3>=l)break;t[n++>>>0]=240|_>>18,t[n++>>>0]=128|_>>12&63}t[n++>>>0]=128|_>>6&63}t[n++>>>0]=128|_&63}}return t[n>>>0]=0,n-y},ie=(e,t,n)=>de(e,h(),t,n);function ue(e,t){if(v)return G(5,1,e,t)}function Ze(e,t,n){if(v)return G(6,1,e,t,n)}function Ke(e,t,n){return v?G(7,1,e,t,n):0}function d(e,t){if(v)return G(8,1,e,t)}function B(e,t,n){if(v)return G(9,1,e,t,n)}function $(e,t,n,l){if(v)return G(10,1,e,t,n,l)}function Te(e,t,n,l){if(v)return G(11,1,e,t,n,l)}function et(e,t,n,l){if(v)return G(12,1,e,t,n,l)}function Bt(e){if(v)return G(13,1,e)}function kt(e,t){if(v)return G(14,1,e,t)}function Wt(e,t,n){if(v)return G(15,1,e,t,n)}function mt(e){e>>>=0,typeof Atomics.rb==\"function\"&&(Atomics.rb(f(),e>>>2,e).value.then(ft),e+=128,Atomics.store(f(),e>>>2,1))}i.__emscripten_thread_mailbox_await=mt;var ft=()=>{var e=lt();if(e&&(mt(e),e=or,!he))try{if(e(),!(0<Be))try{v?Ot(ae):je(ae)}catch(t){t instanceof Re||t==\"unwind\"||x(1,t)}}catch(t){t instanceof Re||t==\"unwind\"||x(1,t)}};i.checkMailbox=ft;var gt=[],Ye=e=>e%4===0&&(e%100!==0||e%400===0),Nt=[0,31,60,91,121,152,182,213,244,274,305,335],Ht=[0,31,59,90,120,151,181,212,243,273,304,334];function Gt(e,t,n,l,y,b,_,J){return v?G(16,1,e,t,n,l,y,b,_,J):-52}function $t(e,t,n,l,y,b,_){if(v)return G(17,1,e,t,n,l,y,b,_)}var jt=e=>{var t=re(e)+1,n=rr(t);return n&&ie(e,n,t),n},ht=[],yt={},Yt=()=>{if(!bt){var e={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(typeof navigator==\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:D||\"./this.program\"},t;for(t in yt)yt[t]===void 0?delete e[t]:e[t]=yt[t];var n=[];for(t in e)n.push(`${t}=${e[t]}`);bt=n}return bt},bt;function zt(e,t){if(v)return G(18,1,e,t);e>>>=0,t>>>=0;var n=0;return Yt().forEach((l,y)=>{var b=t+n;for(y=w()[e+4*y>>>2>>>0]=b,b=0;b<l.length;++b)a()[y++>>>0>>>0]=l.charCodeAt(b);a()[y>>>0>>>0]=0,n+=l.length+1}),0}function qt(e,t){if(v)return G(19,1,e,t);e>>>=0,t>>>=0;var n=Yt();w()[e>>>2>>>0]=n.length;var l=0;return n.forEach(y=>l+=y.length+1),w()[t>>>2>>>0]=l,0}function Vt(e){return v?G(20,1,e):52}function Jt(e,t,n,l){return v?G(21,1,e,t,n,l):52}function Xt(e,t,n,l,y){return v?G(22,1,e,t,n,l,y):70}var $r=[null,[],[]];function Qt(e,t,n,l){if(v)return G(23,1,e,t,n,l);t>>>=0,n>>>=0,l>>>=0;for(var y=0,b=0;b<n;b++){var _=w()[t>>>2>>>0],J=w()[t+4>>>2>>>0];t+=8;for(var Me=0;Me<J;Me++){var oe=h()[_+Me>>>0],ge=$r[e];oe===0||oe===10?((e===1?ce:ne)(Je(ge,0)),ge.length=0):ge.push(oe)}y+=J}return w()[l>>>2>>>0]=y,0}var Zt=[31,29,31,30,31,30,31,31,30,31,30,31],Kt=[31,28,31,30,31,30,31,31,30,31,30,31];function jr(e){var t=Array(re(e)+1);return de(e,t,0,t.length),t}var Yr=(e,t)=>{a().set(e,t>>>0)};function er(e,t,n,l){function y(p,N,X){for(p=typeof p==\"number\"?p.toString():p||\"\";p.length<N;)p=X[0]+p;return p}function b(p,N){return y(p,N,\"0\")}function _(p,N){function X(cr){return 0>cr?-1:0<cr?1:0}var We;return(We=X(p.getFullYear()-N.getFullYear()))===0&&(We=X(p.getMonth()-N.getMonth()))===0&&(We=X(p.getDate()-N.getDate())),We}function J(p){switch(p.getDay()){case 0:return new Date(p.getFullYear()-1,11,29);case 1:return p;case 2:return new Date(p.getFullYear(),0,3);case 3:return new Date(p.getFullYear(),0,2);case 4:return new Date(p.getFullYear(),0,1);case 5:return new Date(p.getFullYear()-1,11,31);case 6:return new Date(p.getFullYear()-1,11,30)}}function Me(p){var N=p.Ra;for(p=new Date(new Date(p.Sa+1900,0,1).getTime());0<N;){var X=p.getMonth(),We=(Ye(p.getFullYear())?Zt:Kt)[X];if(N>We-p.getDate())N-=We-p.getDate()+1,p.setDate(1),11>X?p.setMonth(X+1):(p.setMonth(0),p.setFullYear(p.getFullYear()+1));else{p.setDate(p.getDate()+N);break}}return X=new Date(p.getFullYear()+1,0,4),N=J(new Date(p.getFullYear(),0,4)),X=J(X),0>=_(N,p)?0>=_(X,p)?p.getFullYear()+1:p.getFullYear():p.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0,l>>>=0;var oe=w()[l+40>>>2>>>0];l={ob:f()[l>>>2>>>0],nb:f()[l+4>>>2>>>0],Ta:f()[l+8>>>2>>>0],Xa:f()[l+12>>>2>>>0],Ua:f()[l+16>>>2>>>0],Sa:f()[l+20>>>2>>>0],Na:f()[l+24>>>2>>>0],Ra:f()[l+28>>>2>>>0],ub:f()[l+32>>>2>>>0],mb:f()[l+36>>>2>>>0],pb:oe?$e(oe):\"\"},n=$e(n),oe={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var ge in oe)n=n.replace(new RegExp(ge,\"g\"),oe[ge]);var fr=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),lr=\"January February March April May June July August September October November December\".split(\" \");oe={\"%a\":p=>fr[p.Na].substring(0,3),\"%A\":p=>fr[p.Na],\"%b\":p=>lr[p.Ua].substring(0,3),\"%B\":p=>lr[p.Ua],\"%C\":p=>b((p.Sa+1900)/100|0,2),\"%d\":p=>b(p.Xa,2),\"%e\":p=>y(p.Xa,2,\" \"),\"%g\":p=>Me(p).toString().substring(2),\"%G\":p=>Me(p),\"%H\":p=>b(p.Ta,2),\"%I\":p=>(p=p.Ta,p==0?p=12:12<p&&(p-=12),b(p,2)),\"%j\":p=>{for(var N=0,X=0;X<=p.Ua-1;N+=(Ye(p.Sa+1900)?Zt:Kt)[X++]);return b(p.Xa+N,3)},\"%m\":p=>b(p.Ua+1,2),\"%M\":p=>b(p.nb,2),\"%n\":()=>`\n`,\"%p\":p=>0<=p.Ta&&12>p.Ta?\"AM\":\"PM\",\"%S\":p=>b(p.ob,2),\"%t\":()=>\"\t\",\"%u\":p=>p.Na||7,\"%U\":p=>b(Math.floor((p.Ra+7-p.Na)/7),2),\"%V\":p=>{var N=Math.floor((p.Ra+7-(p.Na+6)%7)/7);if(2>=(p.Na+371-p.Ra-2)%7&&N++,N)N==53&&(X=(p.Na+371-p.Ra)%7,X==4||X==3&&Ye(p.Sa)||(N=1));else{N=52;var X=(p.Na+7-p.Ra-1)%7;(X==4||X==5&&Ye(p.Sa%400-1))&&N++}return b(N,2)},\"%w\":p=>p.Na,\"%W\":p=>b(Math.floor((p.Ra+7-(p.Na+6)%7)/7),2),\"%y\":p=>(p.Sa+1900).toString().substring(2),\"%Y\":p=>p.Sa+1900,\"%z\":p=>{p=p.mb;var N=0<=p;return p=Math.abs(p)/60,(N?\"+\":\"-\")+(\"0000\"+(p/60*100+p%60)).slice(-4)},\"%Z\":p=>p.pb,\"%%\":()=>\"%\"},n=n.replace(/%%/g,\"\\0\\0\");for(ge in oe)n.includes(ge)&&(n=n.replace(new RegExp(ge,\"g\"),oe[ge](l)));return n=n.replace(/\\0\\0/g,\"%\"),ge=jr(n),ge.length>t?0:(Yr(ge,e),ge.length-1)}M.Wa();var zr=[C,ut,m,A,L,ue,Ze,Ke,d,B,$,Te,et,Bt,kt,Wt,Gt,$t,zt,qt,Vt,Jt,Xt,Qt],qr={b:function(e,t,n){throw e>>>=0,new r(e).Wa(t>>>0,n>>>0),o=e,s++,o},L:function(e){nr(e>>>0,!R,1,!K,131072,!1),M.ab()},j:function(e){e>>>=0,v?postMessage({cmd:\"cleanupThread\",thread:e}):M.Za(M.Ma[e])},H:O,h:A,S:L,D:ue,F:Ze,T:Ke,Q:d,J:B,P:$,n:Te,E:et,B:Bt,R:kt,C:Wt,p:()=>1,z:function(e,t){e>>>=0,e==t>>>0?setTimeout(()=>ft()):v?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=M.Ma[e])&&e.postMessage({cmd:\"checkMailbox\"})},I:function(e,t,n,l){t>>>=0,gt.length=n,l=l>>>0>>>3;for(var y=0;y<n;y++)gt[y]=g()[l+y>>>0];return e=0>e?Ne[-e-1]:zr[e],M.ib=t,t=e.apply(null,gt),M.ib=0,t},K:mt,o:function(e){I&&M.Ma[e>>>0].ref()},s:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),f()[n>>>2>>>0]=e.getUTCSeconds(),f()[n+4>>>2>>>0]=e.getUTCMinutes(),f()[n+8>>>2>>>0]=e.getUTCHours(),f()[n+12>>>2>>>0]=e.getUTCDate(),f()[n+16>>>2>>>0]=e.getUTCMonth(),f()[n+20>>>2>>>0]=e.getUTCFullYear()-1900,f()[n+24>>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,f()[n+28>>>2>>>0]=e},t:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),f()[n>>>2>>>0]=e.getSeconds(),f()[n+4>>>2>>>0]=e.getMinutes(),f()[n+8>>>2>>>0]=e.getHours(),f()[n+12>>>2>>>0]=e.getDate(),f()[n+16>>>2>>>0]=e.getMonth(),f()[n+20>>>2>>>0]=e.getFullYear()-1900,f()[n+24>>>2>>>0]=e.getDay(),t=(Ye(e.getFullYear())?Nt:Ht)[e.getMonth()]+e.getDate()-1|0,f()[n+28>>>2>>>0]=t,f()[n+36>>>2>>>0]=-(60*e.getTimezoneOffset()),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var l=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=(t!=l&&e.getTimezoneOffset()==Math.min(l,t))|0,f()[n+32>>>2>>>0]=e},u:function(e){e>>>=0;var t=new Date(f()[e+20>>>2>>>0]+1900,f()[e+16>>>2>>>0],f()[e+12>>>2>>>0],f()[e+8>>>2>>>0],f()[e+4>>>2>>>0],f()[e>>>2>>>0],0),n=f()[e+32>>>2>>>0],l=t.getTimezoneOffset(),y=new Date(t.getFullYear(),6,1).getTimezoneOffset(),b=new Date(t.getFullYear(),0,1).getTimezoneOffset(),_=Math.min(b,y);return 0>n?f()[e+32>>>2>>>0]=+(y!=b&&_==l):0<n!=(_==l)&&(y=Math.max(b,y),t.setTime(t.getTime()+6e4*((0<n?_:y)-l))),f()[e+24>>>2>>>0]=t.getDay(),n=(Ye(t.getFullYear())?Nt:Ht)[t.getMonth()]+t.getDate()-1|0,f()[e+28>>>2>>>0]=n,f()[e>>>2>>>0]=t.getSeconds(),f()[e+4>>>2>>>0]=t.getMinutes(),f()[e+8>>>2>>>0]=t.getHours(),f()[e+12>>>2>>>0]=t.getDate(),f()[e+16>>>2>>>0]=t.getMonth(),f()[e+20>>>2>>>0]=t.getYear(),e=t.getTime(),isNaN(e)?(f()[tr()>>>2>>>0]=61,e=-1):e/=1e3,sr((xe=e,1<=+Math.abs(xe)?0<xe?+Math.floor(xe/4294967296)>>>0:~~+Math.ceil((xe-+(~~xe>>>0))/4294967296)>>>0:0)),e>>>0},q:Gt,r:$t,y:function(e,t,n){function l(oe){return(oe=oe.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?oe[1]:\"GMT\"}e>>>=0,t>>>=0,n>>>=0;var y=new Date().getFullYear(),b=new Date(y,0,1),_=new Date(y,6,1);y=b.getTimezoneOffset();var J=_.getTimezoneOffset(),Me=Math.max(y,J);w()[e>>>2>>>0]=60*Me,f()[t>>>2>>>0]=+(y!=J),e=l(b),t=l(_),e=jt(e),t=jt(t),J<y?(w()[n>>>2>>>0]=e,w()[n+4>>>2>>>0]=t):(w()[n>>>2>>>0]=t,w()[n+4>>>2>>>0]=e)},c:()=>{De(\"\")},O:function(e,t,n){e>>>=0,t>>>=0,n>>>=0,ht.length=0;for(var l;l=h()[t++>>>0];){var y=l!=105;y&=l!=112,n+=y&&n%8?4:0,ht.push(l==112?w()[n>>>2>>>0]:l==105?f()[n>>>2>>>0]:g()[n>>>3>>>0]),n+=y?8:4}return Ne[e].apply(null,ht)},k:()=>{},i:()=>Date.now(),U:()=>{throw Be+=1,\"unwind\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:()=>I?(wr(),rt(br)).cpus().length:navigator.hardwareConcurrency,x:function(e){e>>>=0;var t=h().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var l=t*(1+.2/n);l=Math.min(l,e+100663296);var y=Math;l=Math.max(e,l);e:{y=(y.min.call(y,4294901760,l+(65536-l%65536)%65536)-Q.buffer.byteLength+65535)/65536;try{Q.grow(y),Y();var b=1;break e}catch{}b=void 0}if(b)return!0}return!1},M:zt,N:qt,G:je,g:Vt,m:Jt,v:Xt,l:Qt,a:Q||i.wasmMemory,w:er,d:function(e,t,n,l){return er(e>>>0,t>>>0,n>>>0,l>>>0)}},T=function(){function e(n,l){return T=n.exports,T=Vr(),M.bb.push(T.za),Qe=T.Aa,Ee.unshift(T.V),Oe=l,Se(),T}var t={a:qr};if(we++,i.instantiateWasm)try{return i.instantiateWasm(t,e)}catch(n){ne(`Module.instantiateWasm callback failed with error: ${n}`),P(n)}return at(t,function(n){e(n.instance,n.module)}).catch(P),{}}();i._OrtInit=(e,t)=>(i._OrtInit=T.W)(e,t),i._OrtGetLastError=(e,t)=>(i._OrtGetLastError=T.X)(e,t),i._OrtCreateSessionOptions=(e,t,n,l,y,b,_,J,Me,oe)=>(i._OrtCreateSessionOptions=T.Y)(e,t,n,l,y,b,_,J,Me,oe),i._OrtAppendExecutionProvider=(e,t)=>(i._OrtAppendExecutionProvider=T.Z)(e,t),i._OrtAddFreeDimensionOverride=(e,t,n)=>(i._OrtAddFreeDimensionOverride=T._)(e,t,n),i._OrtAddSessionConfigEntry=(e,t,n)=>(i._OrtAddSessionConfigEntry=T.$)(e,t,n),i._OrtReleaseSessionOptions=e=>(i._OrtReleaseSessionOptions=T.aa)(e),i._OrtCreateSession=(e,t,n)=>(i._OrtCreateSession=T.ba)(e,t,n),i._OrtReleaseSession=e=>(i._OrtReleaseSession=T.ca)(e),i._OrtGetInputOutputCount=(e,t,n)=>(i._OrtGetInputOutputCount=T.da)(e,t,n),i._OrtGetInputName=(e,t)=>(i._OrtGetInputName=T.ea)(e,t),i._OrtGetOutputName=(e,t)=>(i._OrtGetOutputName=T.fa)(e,t),i._OrtFree=e=>(i._OrtFree=T.ga)(e),i._OrtCreateTensor=(e,t,n,l,y,b)=>(i._OrtCreateTensor=T.ha)(e,t,n,l,y,b),i._OrtGetTensorData=(e,t,n,l,y)=>(i._OrtGetTensorData=T.ia)(e,t,n,l,y),i._OrtReleaseTensor=e=>(i._OrtReleaseTensor=T.ja)(e),i._OrtCreateRunOptions=(e,t,n,l)=>(i._OrtCreateRunOptions=T.ka)(e,t,n,l),i._OrtAddRunConfigEntry=(e,t,n)=>(i._OrtAddRunConfigEntry=T.la)(e,t,n),i._OrtReleaseRunOptions=e=>(i._OrtReleaseRunOptions=T.ma)(e),i._OrtCreateBinding=e=>(i._OrtCreateBinding=T.na)(e),i._OrtBindInput=(e,t,n)=>(i._OrtBindInput=T.oa)(e,t,n),i._OrtBindOutput=(e,t,n,l)=>(i._OrtBindOutput=T.pa)(e,t,n,l),i._OrtClearBoundOutputs=e=>(i._OrtClearBoundOutputs=T.qa)(e),i._OrtReleaseBinding=e=>(i._OrtReleaseBinding=T.ra)(e),i._OrtRunWithBinding=(e,t,n,l,y)=>(i._OrtRunWithBinding=T.sa)(e,t,n,l,y),i._OrtRun=(e,t,n,l,y,b,_,J)=>(i._OrtRun=T.ta)(e,t,n,l,y,b,_,J),i._OrtEndProfiling=e=>(i._OrtEndProfiling=T.ua)(e);var tr=()=>(tr=T.va)(),lt=i._pthread_self=()=>(lt=i._pthread_self=T.wa)(),rr=i._malloc=e=>(rr=i._malloc=T.xa)(e);i._free=e=>(i._free=T.ya)(e),i.__emscripten_tls_init=()=>(i.__emscripten_tls_init=T.za)();var nr=i.__emscripten_thread_init=(e,t,n,l,y,b)=>(nr=i.__emscripten_thread_init=T.Ba)(e,t,n,l,y,b);i.__emscripten_thread_crashed=()=>(i.__emscripten_thread_crashed=T.Ca)();var ar=(e,t,n,l)=>(ar=T.Da)(e,t,n,l),wt=e=>(wt=T.Ea)(e),Ot=i.__emscripten_thread_exit=e=>(Ot=i.__emscripten_thread_exit=T.Fa)(e),or=()=>(or=T.Ga)(),sr=e=>(sr=T.Ha)(e),ir=(e,t)=>(ir=T.Ia)(e,t),vt=()=>(vt=T.Ja)(),ct=e=>(ct=T.Ka)(e),_t=e=>(_t=T.La)(e);function Vr(){var e=T;e=Object.assign({},e);var t=l=>()=>l()>>>0,n=l=>y=>l(y)>>>0;return e.va=t(e.va),e.wa=t(e.wa),e.xa=n(e.xa),e.emscripten_main_runtime_thread_id=t(e.emscripten_main_runtime_thread_id),e.Ja=t(e.Ja),e.La=n(e.La),e}i.wasmMemory=Q,i.stackAlloc=_t,i.stackSave=vt,i.stackRestore=ct,i.keepRuntimeAlive=()=>0<Be,i.UTF8ToString=$e,i.stringToUTF8=ie,i.lengthBytesUTF8=re,i.ExitStatus=Re,i.PThread=M;var dt;me=function e(){dt||ur(),dt||(me=e)};function ur(){if(!(0<we))if(v)E(i),v||ke(Ee),startWorker(i);else{if(i.preRun)for(typeof i.preRun==\"function\"&&(i.preRun=[i.preRun]);i.preRun.length;)Ie.unshift(i.preRun.shift());ke(Ie),0<we||dt||(dt=!0,i.calledRun=!0,he||(v||ke(Ee),E(i),v||ke(be)))}}return ur(),c.ready}})();typeof vr==\"object\"&&typeof xt==\"object\"?xt.exports=Or:typeof define==\"function\"&&define.amd&&define([],()=>Or)});var Er=tt((On,nn)=>{nn.exports='\"use strict\";var Module={},ENVIRONMENT_IS_NODE=typeof process==\"object\"&&typeof process.versions==\"object\"&&typeof process.versions.node==\"string\";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require(\"worker_threads\"),parentPort=nodeWorkerThreads.parentPort;parentPort.on(\"message\",e=>onmessage({data:e}));var fs=require(\"fs\"),vm=require(\"vm\");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,\"utf8\"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(\" \");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(\" \");postMessage({cmd:\"alert\",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd===\"load\"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:\"loaded\"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:\"callHandler\",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob==\"string\")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd===\"run\"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!=\"unwind\")throw a}}else e.data.cmd===\"cancel\"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target===\"setimmediate\"||(e.data.cmd===\"checkMailbox\"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\\n'});var Ar;Ar=gr();var an=_r(),Pt,Ut=!1,pt=!1,Sr=!1,on=u=>{if(u===1)return!1;if(typeof SharedArrayBuffer>\"u\")return typeof self<\"u\"&&!self.crossOriginIsolated&&console.warn(\"env.wasm.numThreads is set to \"+u+\", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info.\"),!1;typeof process<\"u\"&&process.versions&&process.versions.node&&console.warn(\"env.wasm.numThreads is set to \"+u+\", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.\");try{return typeof MessageChannel<\"u\"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},sn=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},un=(u,c)=>u?c?\"ort-wasm-simd-threaded.wasm\":\"ort-wasm-simd.wasm\":c?\"ort-wasm-threaded.wasm\":\"ort-wasm.wasm\",Tr=async u=>{if(Ut)return Promise.resolve();if(pt)throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");if(Sr)throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");pt=!0;let c=u.initTimeout,a=u.numThreads,h=u.simd,f=on(a),w=h&&sn(),g=u.wasmPaths,i=typeof g==\"string\"?g:void 0,E=un(w,f),P=typeof g==\"object\"?g[E]:void 0,U=!1,D=[];if(c>0&&D.push(new Promise(x=>{setTimeout(()=>{U=!0,x()},c)})),D.push(new Promise((x,K)=>{let R=f?an:Ar,I={locateFile:(v,k)=>f&&v.endsWith(\".worker.js\")&&typeof Blob<\"u\"?URL.createObjectURL(new Blob([Er()],{type:\"text/javascript\"})):v.endsWith(\".wasm\")?P||(i??k)+E:k+v};if(f)if(I.numThreads=a,typeof Blob>\"u\")I.mainScriptUrlOrBlob=(void 0)(__dirname,\"ort-wasm-threaded.js\");else{let v=`var ortWasmThreaded=${R.toString()};`;I.mainScriptUrlOrBlob=new Blob([v],{type:\"text/javascript\"})}R(I).then(v=>{pt=!1,Ut=!0,Pt=v,x()},v=>{pt=!1,Sr=!0,K(v)})})),await Promise.race(D),U)throw new Error(`WebAssembly backend initializing failed due to timeout: ${c}ms`)},Z=()=>{if(Ut&&Pt)return Pt;throw new Error(\"WebAssembly is not initialized yet.\")};var q=(u,c)=>{let a=Z(),h=a.lengthBytesUTF8(u)+1,f=a._malloc(h);return a.stringToUTF8(u,f,h),c.push(f),f},nt=(u,c,a,h)=>{if(typeof u==\"object\"&&u!==null){if(a.has(u))throw new Error(\"Circular reference in options\");a.add(u)}Object.entries(u).forEach(([f,w])=>{let g=c?c+f:f;if(typeof w==\"object\")nt(w,g+\".\",a,h);else if(typeof w==\"string\"||typeof w==\"number\")h(g,w.toString());else if(typeof w==\"boolean\")h(g,w?\"1\":\"0\");else throw new Error(`Can't handle extra config type: ${typeof w}`)})},V=u=>{let c=Z(),a=c.stackSave();try{let h=c.stackAlloc(8);c._OrtGetLastError(h,h+4);let f=c.HEAP32[h/4],w=c.HEAPU32[h/4+1],g=w?c.UTF8ToString(w):\"\";throw new Error(`${u} ERROR_CODE: ${f}, ERROR_MESSAGE: ${g}`)}finally{c.stackRestore(a)}};var Mr=u=>{let c=Z(),a=0,h=[],f=u||{};try{if(u?.logSeverityLevel===void 0)f.logSeverityLevel=2;else if(typeof u.logSeverityLevel!=\"number\"||!Number.isInteger(u.logSeverityLevel)||u.logSeverityLevel<0||u.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${u.logSeverityLevel}`);if(u?.logVerbosityLevel===void 0)f.logVerbosityLevel=0;else if(typeof u.logVerbosityLevel!=\"number\"||!Number.isInteger(u.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${u.logVerbosityLevel}`);u?.terminate===void 0&&(f.terminate=!1);let w=0;return u?.tag!==void 0&&(w=q(u.tag,h)),a=c._OrtCreateRunOptions(f.logSeverityLevel,f.logVerbosityLevel,!!f.terminate,w),a===0&&V(\"Can't create run options.\"),u?.extra!==void 0&&nt(u.extra,\"\",new WeakSet,(g,i)=>{let E=q(g,h),P=q(i,h);c._OrtAddRunConfigEntry(a,E,P)!==0&&V(`Can't set a run config entry: ${g} - ${i}.`)}),[a,h]}catch(w){throw a!==0&&c._OrtReleaseRunOptions(a),h.forEach(g=>c._free(g)),w}};var fn=u=>{switch(u){case\"disabled\":return 0;case\"basic\":return 1;case\"extended\":return 2;case\"all\":return 99;default:throw new Error(`unsupported graph optimization level: ${u}`)}},ln=u=>{switch(u){case\"sequential\":return 0;case\"parallel\":return 1;default:throw new Error(`unsupported execution mode: ${u}`)}},cn=u=>{u.extra||(u.extra={}),u.extra.session||(u.extra.session={});let c=u.extra.session;c.use_ort_model_bytes_directly||(c.use_ort_model_bytes_directly=\"1\"),u.executionProviders&&u.executionProviders.some(a=>(typeof a==\"string\"?a:a.name)===\"webgpu\")&&(u.enableMemPattern=!1)},dn=(u,c,a)=>{for(let h of c){let f=typeof h==\"string\"?h:h.name;switch(f){case\"webnn\":if(f=\"WEBNN\",typeof h!=\"string\"){let g=h;if(g?.deviceType){let i=q(\"deviceType\",a),E=q(g.deviceType,a);Z()._OrtAddSessionConfigEntry(u,i,E)!==0&&V(`Can't set a session config entry: 'deviceType' - ${g.deviceType}.`)}if(g?.numThreads){let i=g.numThreads;(typeof i!=\"number\"||!Number.isInteger(i)||i<0)&&(i=0);let E=q(\"numThreads\",a),P=q(i.toString(),a);Z()._OrtAddSessionConfigEntry(u,E,P)!==0&&V(`Can't set a session config entry: 'numThreads' - ${g.numThreads}.`)}if(g?.powerPreference){let i=q(\"powerPreference\",a),E=q(g.powerPreference,a);Z()._OrtAddSessionConfigEntry(u,i,E)!==0&&V(`Can't set a session config entry: 'powerPreference' - ${g.powerPreference}.`)}}break;case\"webgpu\":if(f=\"JS\",typeof h!=\"string\"){let g=h;if(g?.preferredLayout){if(g.preferredLayout!==\"NCHW\"&&g.preferredLayout!==\"NHWC\")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${g.preferredLayout}`);let i=q(\"preferredLayout\",a),E=q(g.preferredLayout,a);Z()._OrtAddSessionConfigEntry(u,i,E)!==0&&V(`Can't set a session config entry: 'preferredLayout' - ${g.preferredLayout}.`)}}break;case\"wasm\":case\"cpu\":continue;default:throw new Error(`not supported execution provider: ${f}`)}let w=q(f,a);Z()._OrtAppendExecutionProvider(u,w)!==0&&V(`Can't append execution provider: ${f}.`)}},Cr=u=>{let c=Z(),a=0,h=[],f=u||{};cn(f);try{let w=fn(f.graphOptimizationLevel??\"all\"),g=ln(f.executionMode??\"sequential\"),i=typeof f.logId==\"string\"?q(f.logId,h):0,E=f.logSeverityLevel??2;if(!Number.isInteger(E)||E<0||E>4)throw new Error(`log serverity level is not valid: ${E}`);let P=f.logVerbosityLevel??0;if(!Number.isInteger(P)||P<0||P>4)throw new Error(`log verbosity level is not valid: ${P}`);let U=typeof f.optimizedModelFilePath==\"string\"?q(f.optimizedModelFilePath,h):0;if(a=c._OrtCreateSessionOptions(w,!!f.enableCpuMemArena,!!f.enableMemPattern,g,!!f.enableProfiling,0,i,E,P,U),a===0&&V(\"Can't create session options.\"),f.executionProviders&&dn(a,f.executionProviders,h),f.enableGraphCapture!==void 0){if(typeof f.enableGraphCapture!=\"boolean\")throw new Error(`enableGraphCapture must be a boolean value: ${f.enableGraphCapture}`);let D=q(\"enableGraphCapture\",h),x=q(f.enableGraphCapture.toString(),h);c._OrtAddSessionConfigEntry(a,D,x)!==0&&V(`Can't set a session config entry: 'enableGraphCapture' - ${f.enableGraphCapture}.`)}if(f.freeDimensionOverrides)for(let[D,x]of Object.entries(f.freeDimensionOverrides)){if(typeof D!=\"string\")throw new Error(`free dimension override name must be a string: ${D}`);if(typeof x!=\"number\"||!Number.isInteger(x)||x<0)throw new Error(`free dimension override value must be a non-negative integer: ${x}`);let K=q(D,h);c._OrtAddFreeDimensionOverride(a,K,x)!==0&&V(`Can't set a free dimension override: ${D} - ${x}.`)}return f.extra!==void 0&&nt(f.extra,\"\",new WeakSet,(D,x)=>{let K=q(D,h),R=q(x,h);c._OrtAddSessionConfigEntry(a,K,R)!==0&&V(`Can't set a session config entry: ${D} - ${x}.`)}),[a,h]}catch(w){throw a!==0&&c._OrtReleaseSessionOptions(a),h.forEach(g=>c._free(g)),w}};var Rt=u=>{switch(u){case\"int8\":return 3;case\"uint8\":return 2;case\"bool\":return 9;case\"int16\":return 5;case\"uint16\":return 4;case\"int32\":return 6;case\"uint32\":return 12;case\"float16\":return 10;case\"float32\":return 1;case\"float64\":return 11;case\"string\":return 8;case\"int64\":return 7;case\"uint64\":return 13;default:throw new Error(`unsupported data type: ${u}`)}},Dr=u=>{switch(u){case 3:return\"int8\";case 2:return\"uint8\";case 9:return\"bool\";case 5:return\"int16\";case 4:return\"uint16\";case 6:return\"int32\";case 12:return\"uint32\";case 10:return\"float16\";case 1:return\"float32\";case 11:return\"float64\";case 8:return\"string\";case 7:return\"int64\";case 13:return\"uint64\";default:throw new Error(`unsupported data type: ${u}`)}},It=u=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][u],Fr=u=>{switch(u){case\"float16\":return typeof Float16Array<\"u\"&&Float16Array.from?Float16Array:Uint16Array;case\"float32\":return Float32Array;case\"uint8\":return Uint8Array;case\"int8\":return Int8Array;case\"uint16\":return Uint16Array;case\"int16\":return Int16Array;case\"int32\":return Int32Array;case\"bool\":return Uint8Array;case\"float64\":return Float64Array;case\"uint32\":return Uint32Array;case\"int64\":return BigInt64Array;case\"uint64\":return BigUint64Array;default:throw new Error(`unsupported type: ${u}`)}},xr=u=>{switch(u){case\"verbose\":return 0;case\"info\":return 1;case\"warning\":return 2;case\"error\":return 3;case\"fatal\":return 4;default:throw new Error(`unsupported logging level: ${u}`)}},Pr=u=>u===\"float32\"||u===\"float16\"||u===\"int32\"||u===\"int64\"||u===\"uint32\"||u===\"uint8\"||u===\"bool\",Ur=u=>{switch(u){case\"none\":return 0;case\"cpu\":return 1;case\"cpu-pinned\":return 2;case\"texture\":return 3;case\"gpu-buffer\":return 4;default:throw new Error(`unsupported data location: ${u}`)}};var Rr=async u=>{if(typeof u==\"string\")if(typeof process<\"u\"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(u))}catch(c){if(c.code===\"ERR_FS_FILE_TOO_LARGE\"){let a=(void 0)(u),h=[];for await(let f of a)h.push(f);return new Uint8Array(Buffer.concat(h))}throw c}else{let c=await fetch(u);if(!c.ok)throw new Error(`failed to load external data file: ${u}`);let a=c.headers.get(\"Content-Length\"),h=a?parseInt(a,10):0;if(h<1073741824)return new Uint8Array(await c.arrayBuffer());{if(!c.body)throw new Error(`failed to load external data file: ${u}, no response body.`);let f=c.body.getReader(),w;try{w=new ArrayBuffer(h)}catch(i){if(i instanceof RangeError){let E=Math.ceil(h/65536);w=new WebAssembly.Memory({initial:E,maximum:E}).buffer}else throw i}let g=0;for(;;){let{done:i,value:E}=await f.read();if(i)break;let P=E.byteLength;new Uint8Array(w,g,P).set(E),g+=P}return new Uint8Array(w,0,h)}}else return u instanceof Blob?new Uint8Array(await u.arrayBuffer()):u instanceof Uint8Array?u:new Uint8Array(u)};var pn=(u,c)=>{Z()._OrtInit(u,c)!==0&&V(\"Can't initialize onnxruntime.\")},Lr=async u=>{pn(u.wasm.numThreads,xr(u.logLevel))},Br=async(u,c)=>{},ze=new Map,mn=u=>{let c=Z(),a=c.stackSave();try{let h=c.stackAlloc(8);return c._OrtGetInputOutputCount(u,h,h+4)!==0&&V(\"Can't get session input/output count.\"),[c.HEAP32[h/4],c.HEAP32[h/4+1]]}finally{c.stackRestore(a)}},Lt=u=>{let c=Z(),a=c._malloc(u.byteLength);if(a===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${u.byteLength}.`);return c.HEAPU8.set(u,a),[a,u.byteLength]},kr=async(u,c)=>{let a,h,f=Z();Array.isArray(u)?[a,h]=u:u.buffer===f.HEAPU8.buffer?[a,h]=[u.byteOffset,u.byteLength]:[a,h]=Lt(u);let w=0,g=0,i=0,E=[],P=[],U=[];try{if([g,E]=Cr(c),c?.externalData&&f.mountExternalData){let W=[];for(let H of c.externalData){let se=typeof H==\"string\"?H:H.path;W.push(Rr(typeof H==\"string\"?H:H.data).then(ee=>{f.mountExternalData(se,ee)}))}await Promise.all(W)}w=await f._OrtCreateSession(a,h,g),w===0&&V(\"Can't create a session.\");let[D,x]=mn(w),K=!!c?.enableGraphCapture,R=[],I=[],v=[];for(let W=0;W<D;W++){let H=f._OrtGetInputName(w,W);H===0&&V(\"Can't get an input name.\"),P.push(H),R.push(f.UTF8ToString(H))}for(let W=0;W<x;W++){let H=f._OrtGetOutputName(w,W);H===0&&V(\"Can't get an output name.\"),U.push(H);let se=f.UTF8ToString(H);I.push(se)}let k=null;return ze.set(w,[w,P,U,k,K,!1]),[w,R,I]}catch(D){throw P.forEach(x=>f._OrtFree(x)),U.forEach(x=>f._OrtFree(x)),i!==0&&f._OrtReleaseBinding(i),w!==0&&f._OrtReleaseSession(w),D}finally{f._free(a),g!==0&&f._OrtReleaseSessionOptions(g),E.forEach(D=>f._free(D)),f.unmountExternalData?.()}},Wr=u=>{let c=Z(),a=ze.get(u);if(!a)throw new Error(`cannot release session. invalid session id: ${u}`);let[h,f,w,g,i]=a;g&&(i&&c._OrtClearBoundOutputs(g.handle),c._OrtReleaseBinding(g.handle)),c.jsepOnReleaseSession?.(u),f.forEach(E=>c._OrtFree(E)),w.forEach(E=>c._OrtFree(E)),c._OrtReleaseSession(h),ze.delete(u)},Ir=(u,c,a,h,f,w=!1)=>{if(!u){c.push(0);return}let g=Z(),i=u[0],E=u[1],P=u[3],U,D;if(i===\"string\"&&P===\"gpu-buffer\")throw new Error(\"String tensor is not supported on GPU.\");if(w&&P!==\"gpu-buffer\")throw new Error(`External buffer must be provided for input/output index ${f} when enableGraphCapture is true.`);if(P===\"gpu-buffer\"){let R=u[2].gpuBuffer,I=It(Rt(i));D=E.reduce((k,W)=>k*W,1)*I;let v=g.jsepRegisterBuffer;if(!v)throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');U=v(h,f,R,D)}else{let R=u[2];if(Array.isArray(R)){D=4*R.length,U=g._malloc(D),a.push(U);let I=U/4;for(let v=0;v<R.length;v++){if(typeof R[v]!=\"string\")throw new TypeError(`tensor data at index ${v} is not a string`);g.HEAPU32[I++]=q(R[v],a)}}else D=R.byteLength,U=g._malloc(D),a.push(U),g.HEAPU8.set(new Uint8Array(R.buffer,R.byteOffset,D),U)}let x=g.stackSave(),K=g.stackAlloc(4*E.length);try{let R=K/4;E.forEach(v=>g.HEAP32[R++]=v);let I=g._OrtCreateTensor(Rt(i),U,D,K,E.length,Ur(P));I===0&&V(`Can't create tensor for input/output. session=${h}, index=${f}.`),c.push(I)}finally{g.stackRestore(x)}},Nr=async(u,c,a,h,f,w)=>{let g=Z(),i=ze.get(u);if(!i)throw new Error(`cannot run inference. invalid session id: ${u}`);let E=i[0],P=i[1],U=i[2],D=i[3],x=i[4],K=i[5],R=c.length,I=h.length,v=0,k=[],W=[],H=[],se=[],ee=g.stackSave(),S=g.stackAlloc(R*4),j=g.stackAlloc(R*4),Ce=g.stackAlloc(I*4),Ue=g.stackAlloc(I*4);try{[v,k]=Mr(w);for(let F=0;F<R;F++)Ir(a[F],W,se,u,c[F],x);for(let F=0;F<I;F++)Ir(f[F],H,se,u,R+h[F],x);let ce=S/4,ne=j/4,Q=Ce/4,Oe=Ue/4;for(let F=0;F<R;F++)g.HEAPU32[ce++]=W[F],g.HEAPU32[ne++]=P[c[F]];for(let F=0;F<I;F++)g.HEAPU32[Q++]=H[F],g.HEAPU32[Oe++]=U[h[F]];g.jsepOnRunStart?.(E);let he;he=await g._OrtRun(E,j,S,R,Ue,I,Ce,v),he!==0&&V(\"failed to call OrtRun().\");let ae=[];for(let F=0;F<I;F++){let ye=g.HEAPU32[Ce/4+F];if(ye===H[F]){ae.push(f[F]);continue}let ve=g.stackSave(),fe=g.stackAlloc(4*4),_e=!1,Y,pe=0;try{g._OrtGetTensorData(ye,fe,fe+4,fe+8,fe+12)!==0&&V(`Can't access output tensor data on index ${F}.`);let Ee=fe/4,be=g.HEAPU32[Ee++];pe=g.HEAPU32[Ee++];let we=g.HEAPU32[Ee++],Le=g.HEAPU32[Ee++],me=[];for(let te=0;te<Le;te++)me.push(g.HEAPU32[we/4+te]);g._OrtFree(we);let Se=me.reduce((te,z)=>te*z,1);Y=Dr(be);let De=D?.outputPreferredLocations[h[F]];if(Y===\"string\"){if(De===\"gpu-buffer\")throw new Error(\"String tensor is not supported on GPU.\");let te=[],z=pe/4;for(let le=0;le<Se;le++){let Fe=g.HEAPU32[z++],Ae=le===Se-1?void 0:g.HEAPU32[z]-Fe;te.push(g.UTF8ToString(Fe,Ae))}ae.push([Y,me,te,\"cpu\"])}else if(De===\"gpu-buffer\"&&Se>0){let te=g.jsepGetBuffer;if(!te)throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');let z=te(pe),le=It(be);if(le===void 0||!Pr(Y))throw new Error(`Unsupported data type: ${Y}`);_e=!0,ae.push([Y,me,{gpuBuffer:z,download:g.jsepCreateDownloader(z,Se*le,Y),dispose:()=>{g._OrtReleaseTensor(ye)}},\"gpu-buffer\"])}else{let te=Fr(Y),z=new te(Se);new Uint8Array(z.buffer,z.byteOffset,z.byteLength).set(g.HEAPU8.subarray(pe,pe+z.byteLength)),ae.push([Y,me,z,\"cpu\"])}}finally{g.stackRestore(ve),Y===\"string\"&&pe&&g._free(pe),_e||g._OrtReleaseTensor(ye)}}return D&&!x&&(g._OrtClearBoundOutputs(D.handle),ze.set(u,[E,P,U,D,x,!1])),ae}finally{g.stackRestore(ee),W.forEach(ce=>g._OrtReleaseTensor(ce)),H.forEach(ce=>g._OrtReleaseTensor(ce)),se.forEach(ce=>g._free(ce)),v!==0&&g._OrtReleaseRunOptions(v),k.forEach(ce=>g._free(ce))}},Hr=u=>{let c=Z(),a=ze.get(u);if(!a)throw new Error(\"invalid session id\");let h=a[0],f=c._OrtEndProfiling(h);f===0&&V(\"Can't get an profile file name.\"),c._OrtFree(f)},Gr=u=>{let c=[];for(let a of u){let h=a[2];!Array.isArray(h)&&\"buffer\"in h&&c.push(h.buffer)}return c};self.onmessage=u=>{let{type:c,in:a}=u.data;try{switch(c){case\"init-wasm\":Tr(a.wasm).then(()=>{Lr(a).then(()=>{postMessage({type:c})},h=>{postMessage({type:c,err:h})})},h=>{postMessage({type:c,err:h})});break;case\"init-ep\":{let{epName:h,env:f}=a;Br(f,h).then(()=>{postMessage({type:c})},w=>{postMessage({type:c,err:w})});break}case\"copy-from\":{let{buffer:h}=a,f=Lt(h);postMessage({type:c,out:f});break}case\"create\":{let{model:h,options:f}=a;kr(h,f).then(w=>{postMessage({type:c,out:w})},w=>{postMessage({type:c,err:w})});break}case\"release\":Wr(a),postMessage({type:c});break;case\"run\":{let{sessionId:h,inputIndices:f,inputs:w,outputIndices:g,options:i}=a;Nr(h,f,w,g,new Array(g.length).fill(null),i).then(E=>{E.some(P=>P[3]!==\"cpu\")?postMessage({type:c,err:\"Proxy does not support non-cpu tensor location.\"}):postMessage({type:c,out:E},Gr([...w,...E]))},E=>{postMessage({type:c,err:E})});break}case\"end-profiling\":Hr(a),postMessage({type:c});break;default:}}catch(h){postMessage({type:c,err:h})}};})();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableInternalBuffer, SerializableSessionMetadata, SerializableTensorMetadata, TensorMetadata} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\ntype PromiseCallbacks<T = void> = [resolve: (result: T) => void, reject: (reason: unknown) => void];\nlet initWasmCallbacks: PromiseCallbacks;\nconst queuedCallbacks: Map<OrtWasmMessage['type'], Array<PromiseCallbacks<unknown>>> = new Map();\n\nconst enqueueCallbacks = (type: OrtWasmMessage['type'], callbacks: PromiseCallbacks<unknown>): void => {\n  const queue = queuedCallbacks.get(type);\n  if (queue) {\n    queue.push(callbacks);\n  } else {\n    queuedCallbacks.set(type, [callbacks]);\n  }\n};\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ep':\n    case 'copy-from':\n    case 'create':\n    case 'release':\n    case 'run':\n    case 'end-profiling': {\n      const callbacks = queuedCallbacks.get(ev.data.type)!;\n      if (ev.data.err) {\n        callbacks.shift()![1](ev.data.err);\n      } else {\n        callbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    }\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyAndOrtRuntime = async(): Promise<void> => {\n  if (initialized) {\n    return;\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initWasm()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initWasm()\\' failed.');\n  }\n\n  initializing = true;\n\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n\n      const workerUrl = URL.createObjectURL(new Blob(\n          [\n            // This require() function is handled by esbuild plugin to load file content as string.\n            // eslint-disable-next-line @typescript-eslint/no-require-imports\n            require('./proxy-worker/main')\n          ],\n          {type: 'text/javascript'}));\n      proxyWorker = new Worker(workerUrl, {name: 'ort-wasm-proxy-worker'});\n      proxyWorker.onerror = (ev: ErrorEvent) => reject(ev);\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      URL.revokeObjectURL(workerUrl);\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    try {\n      await initializeWebAssembly(env.wasm);\n      await core.initRuntime(env);\n      initialized = true;\n    } catch (e) {\n      aborted = true;\n      throw e;\n    } finally {\n      initializing = false;\n    }\n  }\n};\n\nexport const initializeOrtEp = async(epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('init-ep', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'init-ep', in : {epName, env}};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initEp(env, epName);\n  }\n};\n\nexport const copyFromExternalBuffer = async(buffer: Uint8Array): Promise<SerializableInternalBuffer> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableInternalBuffer>((resolve, reject) => {\n      enqueueCallbacks('copy-from', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'copy-from', in : {buffer}};\n      proxyWorker!.postMessage(message, [buffer.buffer]);\n    });\n  } else {\n    return core.copyFromExternalBuffer(buffer);\n  }\n};\n\nexport const createSession =\n    async(model: SerializableInternalBuffer|Uint8Array, options?: InferenceSession.SessionOptions):\n        Promise<SerializableSessionMetadata> => {\n          if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n            // check unsupported options\n            if (options?.preferredOutputLocation) {\n              throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n            }\n            ensureWorker();\n            return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n              enqueueCallbacks('create', [resolve, reject]);\n              const message: OrtWasmMessage = {type: 'create', in : {model, options: {...options}}};\n              const transferable: Transferable[] = [];\n              if (model instanceof Uint8Array) {\n                transferable.push(model.buffer);\n              }\n              proxyWorker!.postMessage(message, transferable);\n            });\n          } else {\n            return core.createSession(model, options);\n          }\n        };\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('release', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: TensorMetadata[], outputIndices: number[],\n    outputs: Array<TensorMetadata|null>, options: InferenceSession.RunOptions): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some(t => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some(t => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      enqueueCallbacks('run', [resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[];  // every input is on CPU.\n      const message: OrtWasmMessage =\n          {type: 'run', in : {sessionId, inputIndices, inputs: serializableInputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('end-profiling', [resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, InferenceSessionHandler, SessionHandler, Tensor, TRACE_FUNC_BEGIN, TRACE_FUNC_END} from 'onnxruntime-common';\n\nimport {SerializableInternalBuffer, TensorMetadata} from './proxy-messages';\nimport {copyFromExternalBuffer, createSession, endProfiling, releaseSession, run} from './proxy-wrapper';\nimport {isGpuBufferSupportedType} from './wasm-common';\nimport {loadFile} from './wasm-utils-load-file';\n\nexport const encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, {gpuBuffer: tensor.gpuBuffer}, 'gpu-buffer'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nexport const decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const {gpuBuffer, download, dispose} = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, {dataType, dims: tensor[1], download, dispose});\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async fetchModelAndCopyToWasmMemory(path: string): Promise<SerializableInternalBuffer> {\n    // fetch model from url and move to wasm heap.\n    return copyFromExternalBuffer(await loadFile(path));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    TRACE_FUNC_BEGIN();\n    let model: Parameters<typeof createSession>[0];\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        model = await loadFile(pathOrBuffer);\n      } else {\n        // browser\n        // fetch model and copy to wasm heap.\n        model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);\n      }\n    } else {\n      model = pathOrBuffer;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n    TRACE_FUNC_END();\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor|null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs =\n        inputArray.map((t, i) => encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`));\n    const outputs = outputArray.map(\n        (t, i) => t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null);\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    TRACE_FUNC_END();\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {cpus} from 'node:os';\nimport {Backend, env, InferenceSession, InferenceSessionHandler} from 'onnxruntime-common';\n\nimport {initializeOrtEp, initializeWebAssemblyAndOrtRuntime} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler-inference';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.trace !== 'boolean') {\n    env.wasm.trace = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    // Web: when crossOriginIsolated is false, SharedArrayBuffer is not available so WebAssembly threads will not work.\n    // Node.js: onnxruntime-web does not support multi-threads in Node.js.\n    if ((typeof self !== 'undefined' && !self.crossOriginIsolated) ||\n        (typeof process !== 'undefined' && process.versions && process.versions.node)) {\n      env.wasm.numThreads = 1;\n    }\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nexport class OnnxruntimeWebAssemblyBackend implements Backend {\n  /**\n   * This function initializes the WebAssembly backend.\n   *\n   * This function will be called only once for each backend name. It will be called the first time when\n   * `ort.InferenceSession.create()` is called with a registered backend name.\n   *\n   * @param backendName - the registered backend name.\n   */\n  async init(backendName: string): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyAndOrtRuntime();\n\n    // performe EP specific initialization\n    await initializeOrtEp(backendName);\n  }\n  createInferenceSessionHandler(path: string, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OnnxruntimeWebAssemblyBackend} from './backend-wasm';\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow bundler to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow bundler remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport * as ort from 'onnxruntime-common';\nexport default ort;\n\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = BUILD_DEFS.DISABLE_TRAINING ? require('./backend-wasm-inference').wasmBackend :\n                                                    require('./backend-wasm-training').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n    registerBackend('webnn', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n}\n\nObject.defineProperty(env.versions, 'web', {value: version, enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.17.3';\n"],"names":["backends","backendsSortedByPriority","registerBackend","tryResolveAndInitializeBackend","resolveBackendAndExecutionProviders","init_backend_impl","__esmMin","name","backend","priority","currentBackend","i","backendName","backendInfo","isInitializing","options","eps","backendHints","backendNames","errors","availableBackendNames","resolveResult","e","err","filteredEps","target","prop","init_backend","version","init_version","logLevelValue","env","init_env_impl","value","init_env","tensorToDataURL","tensorToImageData","init_tensor_conversion_impl","tensor","canvas","pixels2DContext","width","height","inputformat","norm","normMean","normBias","stride","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","j","R","G","B","A","image","channels","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","bufferToTensor","tensorFromImage","tensorFromTexture","tensorFromGpuBuffer","tensorFromPinnedBuffer","init_tensor_factory_impl","init_tensor_impl","buffer","outputformat","float32Data","Tensor","isHTMLImageEle","isImageDataEle","isImageBitmap","isString","data","bufferToTensorOptions","createCanvas","createCanvasContext","tempCanvas","resolve","reject","context","newImage","img","texture","download","dispose","dims","gpuBuffer","dataType","type","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isTypedArrayChecked","checkTypedArray","init_tensor_impl_type_mapping","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","isFloat16ArrayAvailable","calculateSize","tensorReshape","init_tensor_utils_impl","size","dim","arg0","arg1","arg2","expectedTypedArrayConstructor","maybeDims","typedArrayConstructor","firstElementType","mappedType","releaseData","init_tensor","TRACE","TRACE_FUNC","TRACE_FUNC_BEGIN","TRACE_FUNC_END","init_trace","deviceType","label","msg","extraMsg","stack","hasTraceFunc","InferenceSession","init_inference_session_impl","_InferenceSession","handler","feeds","fetches","isFetchesEmpty","isFetches","arg1Keys","v","results","returnValue","key","result","arg3","filePathOrUint8Array","byteOffset","byteLength","optionsWithValidatedEPs","init_inference_session","init_tensor_conversion","init_tensor_factory","init_onnx_model","init_onnx_value","noBackendErrMsg","TrainingSession","init_training_session_impl","_TrainingSession","hasOptimizerModel","hasEvalModel","trainingOptions","sessionOptions","evalModel","optimizerModel","inputNames","outputNames","trainableOnly","array","paramsSize","init_training_session","esm_exports","__export","init_esm","log","createCategorizedLogger","logInternal","category","severity","content","_stack","config","LOGGER_CONFIG_MAP","SEVERITY_VALUE","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","Logger","Event","EventRecord","Profiler","now","init_instrument","_severity","_content","_category","verbose","info","warning","error","fatal","reset","set","previousConfig","setWithEnv","startTime","endCallback","timer","ctx","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","func","event","isPromise","res","reason","eventRes","currentTime","previousPointer","resolveOperator","node","opsets","rules","rule","opType","domain","versionSelector","opImpl","opInit","opset","matchSelector","selector","rangeStart","pair","rangeEnd","init_opset","require_guid","__commonJSMin","exports","Guid","guid","count","out","other","Long","low","high","unsigned","isLong","obj","ctz32","c","fromInt","cachedObj","cache","UINT_CACHE","fromBits","INT_CACHE","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","fromString","str","radix","p","radixToPower","pow_dbl","power","fromValue","val","wasm","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","long_default","init_long","radixLong","div","rem1","rem","remDiv","intval","digits","bit","thisNeg","otherNeg","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtrahend","multiplier","divisor","approx","halfThis","log2","delta","approxRes","approxRem","numBits","b","le","hi","lo","bytes","flatbuffers","init_flatbuffers","opt_initial_size","initial_size","forceDefaults","additional_bytes","align_size","old_buf_size","byte_size","voffset","defaultValue","bb","new_buf_size","nbb","offset","numfields","vtableloc","trimmed_size","standard_fields","len","existing_vtable","vt1","outer_loop","vt2","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","table","field","table_start","vtable_start","ok","elem_size","num_elems","alignment","s","utf8","codePoint","a","position","bb_pos","vtable_offset","vtable","t","opt_encoding","length","d","ident","onnxruntime","init_ort_generated","experimental","fbs","AttributeType","DimensionValueType","TensorDataType","NodeType","TypeInfoValue","Shape","index","builder","dimOffset","numElems","Dimension","optionalEncoding","valueOffset","denotationOffset","DimensionValue","dimType","dimValue","dimParamOffset","TensorTypeAndShape","elemType","shapeOffset","MapType","keyType","valueTypeOffset","SequenceType","elemTypeOffset","EdgeEnd","node_index","src_arg_index","dst_arg_index","NodeEdge","nodeIndex","inputEdgesOffset","outputEdgesOffset","Node","nameOffset","docStringOffset","domainOffset","sinceVersion","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","implicitInputsOffset","ValueInfo","typeOffset","TypeInfo","valueType","OperatorSetId","dimsOffset","rawDataOffset","stringDataOffset","SparseTensor","valuesOffset","indicesOffset","Attribute","f","sOffset","tOffset","gOffset","floatsOffset","intsOffset","stringsOffset","tensorsOffset","graphsOffset","Graph","initializersOffset","nodeArgsOffset","nodesOffset","maxNodeIndex","nodeEdgesOffset","sparseInitializersOffset","Model","irVersion","opsetImportOffset","producerNameOffset","producerVersionOffset","modelVersion","graphOffset","graphDocStringOffset","KernelCreateInfos","nodeIndicesOffset","kernelDefHashesOffset","SubGraphSessionState","graphIdOffset","sessionStateOffset","SessionState","kernelsOffset","subGraphSessionStatesOffset","ortVersionOffset","modelOffset","require_aspromise","module","asPromise","fn","params","pending","require_base64","base64","string","n","b64","s64","start","end","parts","chunk","invalidEncoding","require_eventemitter","EventEmitter","evt","listeners","args","require_float","factory","f32","f8b","writeFloat_f32_cpy","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","sign","exponent","mantissa","writeUintLE","writeUintBE","readFloat_ieee754","readUint","uint","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","require_inquire","require_utf8","c1","c2","require_pool","pool","alloc","slice","SIZE","MAX","slab","require_longbits","LongBits","util","zero","zeroHash","charCodeAt","hash","mask","part0","part1","part2","require_minimal","Buffer","sizeOrArray","bits","merge","dst","src","ifNotSet","keys","newError","CustomError","message","properties","fieldNames","fieldMap","encoding","require_writer","Writer","BufferWriter","Op","noop","State","writer","create","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","writeBytes","head","tail","BufferWriter_","require_writer_buffer","writeStringBuffer","require_reader","Reader","BufferReader","indexOutOfRange","reader","writeLength","create_array","readLongVarint","readFixed32_end","readFixed64","wireType","BufferReader_","require_reader_buffer","require_service","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","callback","self","response","endedByRPC","require_rpc","rpc","require_roots","require_index_minimal","protobuf","configure","require_onnx","$protobuf","$Reader","$Writer","$util","$root","onnx","valuesById","values","AttributeProto","tag","end2","object","long","typeUrlPrefix","ValueInfoProto","NodeProto","TrainingInfoProto","ModelProto","StringStringEntryProto","TensorAnnotation","GraphProto","TensorProto","Segment","SparseTensorProto","TensorShapeProto","$oneOfFields","TypeProto","Sequence","Map","Optional","OperatorSetIdProto","FunctionProto","assert","expr","decodeUtf8String","import_onnx","ArrayUtil","MatMulUtil","BroadcastUtil","GemmUtil","ProtoUtil","LongUtil","ShapeUtil","SplitUtil","PoolConvUtil","MIN_CLIP","MAX_CLIP","init_util","n1","n2","dimsA","dimsB","outputShape","aRank","bRank","_BroadcastUtil","adims","bdims","isMatMul","arank","brank","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","op","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","shape","finalShape","inputRank","finalRank","inputShape","inRank","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","_ProtoUtil","typeProto","attributes","_ShapeUtil","axis","rank","strides","indices","tensorRank","axes","x","axisToIncrementOn","k","originalDims","shapeHints","nDims","reshapedDims","unknownDimension","newTensorSize","oldTensorSize","perm","pad","shape1","shape2","total","y","right","outputDims","inSqueezeList","inputDimsIterator","_SplitUtil","split","numOutputs","shapes","offsets","numElementsAlongAxis","_PoolConvUtil","isGlobalOperator","inputDims","kernelShape","dilations","pads","autoPad","filterDims","inSize","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","sizeof","sizeofProto","createView","dataBuffer","dataviewConstructor","longToNumber","ortFbs","readProto","view","import_guid_typescript","_Tensor","dataProvider","asyncDataProvider","dataId","empty","constructor","tensorProto","dataDest","dataSource","elementSize","element","ortTensor","getGlsl","GLSL_ES_2_0","GLSL_ES_3_0","getVertexShaderSource","glsl","getFragShaderPreamble","getDefaultFragShaderMain","outputShapeLength","init_glsl_source","init_types","repeatedTry","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","generateShaderFuncNameFromInputSamplerName","samplerName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","squeezeInputShape","squeezedShape","newInputShape","getSqueezedParams","keptDims","getCoordsDataType","getGlChannels","init_utils","getVecChannels","getChannels","unpackFromChannel","init_packing_utils","getOutOfBoundsCondition","cond","getOutput","coord00","coord01","coord10","coord11","D","getSetup","rows","cols","packProgramMetadata","createPackProgramInfo","createPackProgramInfoLoader","init_pack","input","outputRank","coordsDataType","setup","reversedInputWH","outOfBoundsCondition","output","shaderSource","processDims3D","batch","isReshapeCheap","isCheapReshape","getReshapedInputCoords","coords","line1","line2","getFlattenedIndexFrom3D","createPackedReshape3DProgramMetadata","createPackedReshape3DProgramInfo","createPackedReshape3DProgramInfoLoader","init_reshape_packed","outputShape3D","input3D","metadata","inputShape3D","squeezedOutputShape","mainLoop","outputCoords","encodeAsUint8","init_uint8_encode","inferenceHandler","programInfo","getSourceCoords","unpackProgramMetadata","createUnpackProgramInfo","createUnpackProgramInfoLoader","init_unpack","innerDims","unpackChannel","sourceCoords","RedFloat32DataEncoder","RGBAFloatDataEncoder","Uint8DataEncoder","init_texture_data_encoder","gl","textureSize","source","dataSize","_value","textureType","dest","_textureSize","createTextureLayoutFromTextureType","calculateTextureWidthAndHeight","createTextureLayoutFromShape","init_texture_layout","textureLayoutStrategy","channel","isPacked","reverseWH","breakAxis","unpackedShape","layout","prefs","inferredDims","getProgramInfoUniqueKey","WebGLInferenceHandler","init_inference_handler","inputTextureDatas","inputs","session","program","artifact","outputTextureLayout","outputTextureData","td","adjustedKernelShape","adjustedLayout","numFeatureMaps","oldRowSize","newRowSize","newSize","oldOffset","newOffset","unpackedTextureLayout","unpackedTextureData","usage","inputTD","newTextureLayout","squeezedInputShape","squeezedInputTensor","squeezedOutputTensor","tensorId","textureData","_id","AttributeWithCacheKeyImpl","createAttributeWithCacheKey","init_attribute_with_cache_key","attribute","batchNormalizationProgramMetadata","batchNormalization","parseBatchNormalizationAttributes","createBatchNormalizationProgramInfo","validateInputs","init_batch_normalization","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","mean","var_","GlslContext","GlslLib","GlslLibRoutine","GlslLibRoutineNode","TopologicalSortGlslRoutines","init_glsl_definitions","glContext","inputTextureLayouts","routineBody","dependencies","nodes","cycleCheck","alreadyTraversed","graphNodes","root","glslAdd","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","fname","createBinaryProgramInfoLoader","createBinaryProgramInfo","add","and","equal","greater","less","mul","or","pow","pRelu","sub","xor","init_binary_op","glslFunc","outputTensorType","cacheKey","isBroadcast","usePackedTexture","calculatedShape","aBcast","bBcast","cast","parseCastAttributes","init_cast","to","createPackedConcatProgramMetadata","createPackedConcatProgramInfo","createPackedConcatProgramInfoLoader","getShiftedChannelsSnippet","init_concat_packed","inputCount","cacheHint","_v","dataNShape","axisIndex","dtype","lastChannels","allChannels","getValueSnippet","shift","lastIndex","channelIdx","idx","concat","createUnpackedConcatProgramMetadata","createUnpackedConcatProgramInfo","createUnpackedConcatProgramInfoLoader","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","parseConcatAttributes","init_concat","_handler","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","fetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","numberOfTensors","codeLines","inputType","inputDimensionality","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","alpha","glslExp","glslFloor","glslClip","min","max","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslRelu","glslSigmoid","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfo","createElementwiseProgramInfoLoader","abs","acos","asin","atan","clip","parseClipAttributes","clipV11","generateClipAttributesFromInputs","ceil","cos","elu","parseEluAttributes","exp","floor","identity","leakyRelu","parseLeakyReluAttributes","neg","not","relu","sigmoid","sin","sqrt","tan","tanh","init_unary_op","getActivationSnippet","activationName","activationFunction","applyActivation","parseInternalActivationAttributes","init_fuse_utils","activation","clipMin","clipMax","createUnpackedGroupedConvProgramMetadata","createUnpackedGroupedConvProgramInfo","createUnpackedGroupedConvProgramInfoLoader","init_conv_grouped","init_conv","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","calculateOutputShape","createPackedIm2ColProgramMetadata","createPackedIm2ColProgramInfo","createPackedIm2ColProgramInfoLoader","init_im2col_pack","w","xshape","wshape","rowDim","colDim","im2colShape","kernelSize","unrolled","row","col","createMatmulProgramInfo","activationAttributes","aShape","bShape","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","sharedDim","createMatmulProgramInfoLoader","createMatmulProgramMetadata","inShape","outShape","unpackedCoordsSnippet","outRank","rankDiff","_s","coordsSnippet","isInputScalar","matMul","parseMatMulAttributes","init_matmul","init_matmul_pack","createPackedMatmulProgramInfoLoader","getBcastSamplerForMatmul","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getA","getB","createPackedMatmulProgramMetadata","createPackedMatmulProgramInfo","sharedDimIndex","getBcastedSamplerForMatmulSnippet","getSamplerAInLoopSnippet","getSamplerBInLoopSnippet","getOutputCoordsSnippet","conv2DPacked","init_conv_pack","kshape","im2colOutput","kernelReshaped","matmulInputs","matmulOutput","createIm2ColProgramMetadata","createIm2ColProgramInfo","createIm2ColProgramInfoLoader","calculateIm2ColDims","init_im2col","_inferenceHandler","im2colDims","createDotProductProgramMetadata","createDotProductProgramInfo","createDotProductProgramInfoLoader","init_dot_product","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","conv","conv2d","conv2DUnpackedPointwise","conv2DUnpacked","getAdjustedConvAttributes","parseConvAttributes","adjustPads","batchSize","inputSpatialShape","spatialRank","outChannels","dilatedKernelShape","outputSpatialShape","adjustedAttributes","packMode","isPointwise","reshapedX","reshapedK","xIm2Col","dotProductInputs","newAttributes","group","dataChannel","filterInChannel","computeTotalPad","distributePadding","calculateOutputShapeAndPads","convTranspose","convTranspose2d","createConvTransposeProgramMetadata","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","convTranspose2DUnpacked","getAdjustedConvTransposeAttributes","parseConvTransposeAttributes","init_conv_transpose","inDim","adj","outSize","totalPad","smallPad","outputPadding","updateShape","valueInit","inputChannelsPerGroup","featureMaps","transposeProgramMetadata","transpose","parseTransposeAttributes","createTransposeProgramInfo","getAdjustedPerm","getOutputShape","getPermFunctionBody","init_transpose","unpackedOutputShape","reverseFunc","depthToSpace","parseDepthToSpaceAttributes","init_depth_to_space","blocksize","blocksizeSqr","transposePerm","firstReshapeShape","firstReshapedTensor","transposeAttributes","transposeOutput","secondReshapeShape","mode","flatten","parseFlattenAttributes","init_flatten","r","NUMBER_TYPES","init_operators","gather","parseGatherAttributes","gatherProgramMetadata","createGatherProgramInfo","createGatherProgramInfoLoader","init_gather","indexDataShape","indexCopyOps","orank","irank","iDrank","gemm","parseGemmAttributes","parseGemmAttributesV7","parseGemmAttributesV11","createGemmProgramInfoLoader","createGemmProgramInfo","init_gemm","isOptionalC","transA","transB","beta","line","declareC","broadcastC","calculateC","imageScaler","parseImageScalerAttributes","imageScalerProgramMetadata","createImageScalerProgramInfo","createImageScalerProgramInfoLoader","createGetBiasMethod","init_image_scaler","bias","numChannels","instanceNormalization","parseInstanceNormalizationAttributes","meanAndVarianceProgramMetadata","createMeanAndVarianceProgramInfo","createMeanAndVarianceProgramInfoLoader","computeOutputProgramMetadata","createComputeOutputProgramInfo","createComputeOutputProgramInfoLoader","init_instance_normalization","meanAndVariance","xDims","channelSize","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createLrnProgramInfo","C","from","lrnProgramMetadata","createLrnProgramInfoLoader","lrn","parseLrnAttributes","init_lrn","padProgramMetadata","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","generatePadAttributesFromInputs","createPadProgramInfo","validateInputsV2","validateInputsV11","getPadFunction","getPadConstant","getPadReflect","getPadEdge","init_pad","attrubutes","block","averagePool","parseAveragePoolAttributes","createAveragePoolProgramInfo","globalAveragePool","parseGlobalAveragePoolAttributes","maxPool","parseMaxPoolAttributes","createMaxPoolProgramInfo","getAdjustedPoolAttributesAndOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","globalMaxPool","generatePoolingCode","copyArray","offsetToIndices","init_pool","ceilMode","countIncludePad","op1","op2","storageOrder","hasDilations","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyPads","copyKernelStrides","copyStrides","hasPads","sum","cur","padCode","arrayName","reduce","parseReduceAttributes","createReduceProgramInfo","reduceSum","reduceMean","reduceMax","reduceMin","reduceProd","reduceLogSum","reduceLogSumSquare","init_reduce","reduceOp","reduceProgramMetadata","keepDims","_name","iRank","idxCopy","ops","reduceOps","idxZero","reshape","init_reshape","upsampleProgramMetadata","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","parseUpsampleAttributes","createUpsampleProgramInfo","scalesValidation","init_upsample","isResize","scales","extrapolationValue","coordinateTransformMode","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","scalesInputIdx","sizesInputIdx","inputWidth","inputHeight","outputWidth","outputHeight","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","resizeProgramMetadata","resize","parseResizeAttributesV10","parseResizeAttributesV11","createPackedResizeProgramInfo","prepareInputs","parseScalesData","parseScalesDataFromOutputSize","init_resize_packed","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","sizesTensor","yDims","init_shape","sliceProgramMetadata","parseSliceAttributes","createSliceProgramInfo","sliceV10","generateSliceAttributesFromInputs","validateInputsV10","init_slice","starts","ends","_val","normalizedAxes","sliceOps","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","softmax","parseSoftmaxAttributes","parseSoftmaxAttributesV13","softmaxV13","computeSoftmax","createComputeMaxProgramInfo","createComputScaleProgramInfo","createSoftMaxProgramInfo","init_softmax","logicalRowCount","featureCount","isTransposeRequired","transposedInputShape","transposedInputs","transposeAttribute","_","computeMaxProgramInfo","computeScaleProgramInfo","softMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","parseSplitAttributes","getProgramCount","createSplitProgramInfo","init_split","squeeze","squeezeV13","parseSqueezeAttributes","validateInputsV13","init_squeeze","createSumProgramInfo","init_sum","sumProgramMetadata","tile","createTileProgramInfo","init_tile","tileProgramMetadata","tileOps","unsqueeze","unsqueezeV13","parseUnsqueezeAttributes","init_unsqueeze","WEBGL_OP_RESOLVE_RULES","init_op_resolve_rules","replaceInlines","script","inlineDefs","match","INLINE_FUNC_DEF_REGEX","tokens","regexString","FUNC_CALL_REGEX","regex","variable","declLine","newBody","paramRedecLine","replacement","init_glsl_function_inliner","squeezeShape","newShape","isEmptyArray","parseAxisParam","ax","isInt","sizeFromShape","sizeToSquarishShape","PreferLogicalStrategy","init_texture_layout_strategy","maxTextureSize","wh","wsize","hsize","logShape","_d","CoordsGlslLib","init_glsl_coordinate_lib","funcName","outputLayout","outTexShape","floatTextureSetRGBASource","floatTextureSetRGBAFuncName","floatTextureSetRSource","floatTextureSetRFuncName","_shape","texShape","packedTexShape","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coordsToCompute","coordsFromIndexSnippet","inputLayout","outCoordFuncName","texFuncSnippet","broadcastDims","fields","isOutputScalar","swapLastDimsSnippet","inTexShape","texNumR","texNumC","packedSampler","valuesPerRow","newInputLayout","samplerRoutine","tNumR","tNumC","stride0","stride1","routine","revDims","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","varName","EncodingGlslLib","init_glsl_encoding_lib","_EncodingGlslLib","endianness","FragColorGlslLib","init_glsl_fragcolor_lib","ShapeUtilsGlslLib","init_glsl_shape_utils_lib","_ShapeUtilsGlslLib","shapeInit","VecGlslLib","init_glsl_vec_lib","nameOp","assignmentBlock","glslRegistry","init_glsl_registered_libs","GlslPreprocessor","init_glsl_preprocessor","lib","map","libName","routinesInLib","currentNode","routinesIncluded","routines","classAndRoutine","samplers","variables","uniformLines","sampler","ProgramManager","init_program_manager","profiler","buildArtifact","preprocessor","fragScript","fragShaderScript","vertexShaderScript","fragShader","attribLocations","positionHandle","textureCoordHandle","uniformLocations","textures","texturePosition","location","arrayLength","uniformHandle","reference","TextureManager","init_texture_manager","layoutStrategy","textureDataType","encoder","inUseTextures","idleTextures","subscribers","tensorData","deleteTexture","_dataType","WebGLSessionHandler","init_session_handler","graph","initializers","linearSearchLastTrue","arr","WebGLContext","init_webgl_context","vertexShader","shaderType","shader","unit","geometry","fb","internalFormat","frameBuffer","isComplete","fragmentShader","gl2","ext","query","available","disjoint","timeElapsed","fenceContext","isFencePassed","status","resolveFn","isDoneFn","createWebGLContext","contextId","offscreenCanvas","createOffscreenCanvas","createNewWebGLContext","contextAttributes","ca","init_webgl_context_factory","WebGLBackend","init_backend_webgl","resolveBackend","hint","hints","backendHint","backendsCache","tryLoadBackend","backendObj","isBackend","init","o","KernelOp","ExecutionPlan","init_execution_plan","resolved","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","_output","currentDownstreamNodeIndex","currentDownstreamNode","outputIndex","outputTensor","init_attribute","_Attribute","attr","valueAndType","attrType","numberValue","maybeLong","ints","strings","tensors","Value","GraphImpl","init_graph","graphProto","initializer","valueInfo","_nodeProto","graphInitializer","dataIndices","nodesIndices","inputValueNames","currentIndex","nodeProto","pick","dataIndex","inputName","outputName","starters","nodesStack","nodesState","outgoingEdgeIndex","downstreamNodeIndex","newIndices","nodePossition","ind","currentData","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","next","child","init_model","isOrtFormat","modelProto","ortModel","opsetId","Session","init_session","arg","modelProtoBlob","outputTensors","modelInputNames","sortedInputs","sortedInputsIndex","modelInputIndices","modelValues","graphInputDims","graphInput","graphInputTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","modelOutputNames","OnnxjsSessionHandler","init_session_handler_inference","_fetches","_options","inputMap","feed","outputMap","backend_onnxjs_exports","onnxjsBackend","OnnxjsBackend","init_backend_onnxjs","pathOrBuffer","fs_exports","createReadStream","readFile","readFileSync","init_fs","path_exports","join","init_path","require_ort_wasm","ortWasm","_scriptDir","moduleArg","l","aa","ba","q","da","z","fs","g","h","ea","E","fa","H","I","J","ha","ia","L","ja","O","ka","P","la","ma","na","oa","pa","Q","qa","ra","sa","ta","ua","va","m","S","T","U","wa","xa","Ca","Ba","V","W","Da","Ea","Fa","Ga","Ha","Ia","ya","u","za","Aa","La","Ja","Ka","Y","Ma","Na","Oa","Pa","Z","Qa","Ra","require_worker_threads","require_perf_hooks","os_exports","cpus","init_os","require_ort_wasm_threaded","ortWasmThreaded","Sa","Ta","Ua","Va","Wa","Xa","Ya","Za","$a","ab","cb","db","eb","gb","hb","ib","jb","kb","lb","mb","nb","ob","pb","qb","rb","sb","tb","ub","vb","wb","xb","yb","zb","Bb","Ab","Cb","Db","Fb","Eb","Gb","Kb","Lb","Mb","Nb","Ob","Pb","Qb","Rb","Sb","Tb","Ub","Hb","F","Ib","Jb","Vb","Zb","Wb","Xb","Yb","$b","ac","bc","cc","require_ort_wasm_threaded_worker","ortWasmFactory","ortWasmFactoryThreaded","initialized","initializing","aborted","isMultiThreadSupported","isSimdSupported","getWasmFileName","initializeWebAssembly","getInstance","init_wasm_factory","numThreads","useSimd","useThreads","flags","timeout","simd","wasmPaths","wasmPrefixOverride","wasmFileName","wasmPathOverride","isTimeout","tasks","fileName","scriptDirectory","scriptSourceCode","what","allocWasmString","iterateExtraOptions","checkLastError","init_wasm_utils","allocs","dataLength","dataOffset","prefix","seen","paramsOffset","errorCode","errorMessagePointer","errorMessage","setRunOptions","init_run_options","runOptionsHandle","runOptions","tagDataOffset","keyDataOffset","valueDataOffset","getGraphOptimzationLevel","getExecutionMode","appendDefaultOptions","setExecutionProviders","setSessionOptions","init_session_options","graphOptimizationLevel","executionMode","ep","sessionOptionsHandle","executionProviders","epName","webnnOptions","webgpuOptions","epNameDataOffset","logIdDataOffset","logSeverityLevel","logVerbosityLevel","optimizedModelFilePathOffset","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","getTensorElementSize","tensorTypeToTypedArrayConstructor","logLevelStringToEnum","isGpuBufferSupportedType","dataLocationStringToEnum","init_wasm_common","dateType","logLevel","loadFile","init_wasm_utils_load_file","file","stream","chunks","contentLengthHeader","fileSize","pages","done","chunkSize","initOrt","initRuntime","initEp","activeSessions","getSessionInputOutputCount","copyFromExternalBuffer","createSession","releaseSession","prepareInputOutputTensor","run","endProfiling","extractTransferableBuffers","init_wasm_core_impl","loggingLevel","sessionHandle","model","modelDataOffset","modelData","modelDataLength","ioBindingHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","loadingPromises","path","outputCount","enableGraphCapture","outputPreferredLocations","nameString","bindingState","sessionId","ioBindingState","tensorHandles","rawData","dataByteLength","elementSizeInBytes","registerBuffer","dimIndex","inputIndices","inputOutputBound","runOptionsAllocs","inputTensorHandles","outputTensorHandles","inputOutputAllocs","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","beforeGetTensorDataStack","tensorDataOffset","keepOutputTensor","tensorDataIndex","dimsLength","preferredLocation","stringData","maxBytesToRead","getBuffer","profileFileName","buffers","require_main","isProxy","proxyWorker","initWasmCallbacks","queuedCallbacks","enqueueCallbacks","ensureWorker","onProxyWorkerMessage","scriptSrc","initializeWebAssemblyAndOrtRuntime","initializeOrtEp","init_proxy_wrapper","callbacks","queue","ev","workerUrl","transferable","outputs","serializableInputs","encodeTensorMetadata","decodeTensorMetadata","OnnxruntimeWebAssemblySessionHandler","getName","inputArray","kvp","outputArray","resultMap","initializeFlags","OnnxruntimeWebAssemblyBackend","init_backend_wasm","numCpuLogicalCores","backend_wasm_inference_exports","wasmBackend","init_backend_wasm_inference","lib_default"],"mappings":"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"}},
    {"offset": {"line": 18330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}